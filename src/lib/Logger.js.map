{"version":3,"file":"Logger.js","sourceRoot":"","sources":["Logger.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\r\n\r\nexport class Logger {\r\n\r\n  public static readonly TRACE = 'TRACE';\r\n  public static readonly DEBUG = 'DEBUG';\r\n  public static readonly INFO = 'INFO';\r\n  public static readonly WARN = 'WARN';\r\n  public static readonly ERROR = 'ERROR';\r\n  private static readonly validLevels = [Logger.TRACE, Logger.DEBUG, Logger.INFO, Logger.WARN, Logger.ERROR];\r\n  private conf: any;\r\n  private className: string;\r\n  private logLevel: string;\r\n  private levelMap: any;\r\n  private writeCb: (msg:string)=>void;\r\n\r\n  constructor(conf: any, clazz, writeCb: (msg:string)=>void = null) {\r\n    this.conf = _.cloneDeep(conf);\r\n    this.className = clazz.constructor.name;\r\n    this.logLevel = conf.logLevel || Logger.INFO;\r\n    this.logLevel = this.logLevel.toUpperCase();\r\n    this.levelMap = {\r\n      'TRACE': 0,\r\n      'DEBUG': 1,\r\n      'INFO': 2,\r\n      'WARN': 3,\r\n      'ERROR': 4\r\n    };\r\n    this.writeCb = writeCb || console.log;\r\n  }\r\n\r\n  static isLogLevel(val) {\r\n    return Logger.validLevels.indexOf(val.toUpperCase()) !== -1 ? true : false;\r\n  }\r\n\r\n  passesLevel(level) {\r\n    return this.levelMap[level] >= this.levelMap[this.logLevel];\r\n  }\r\n\r\n  debug(message, pretty = false) {\r\n    this.write(Logger.DEBUG, message, pretty);\r\n  }\r\n\r\n  info(message, pretty = false) {\r\n    this.write(Logger.INFO, message, pretty);\r\n  }\r\n\r\n  warn(message, pretty = false) {\r\n    this.write(Logger.WARN, message, pretty);\r\n  }\r\n\r\n  error(message, pretty = false) {\r\n    this.write(Logger.ERROR, message, pretty);\r\n  }\r\n\r\n  trace(message, pretty = false) {\r\n    this.write(Logger.TRACE, message, pretty);\r\n  }\r\n\r\n  private write(level, message, pretty) {\r\n    if (!this.passesLevel(level)) {\r\n      return;\r\n    }\r\n\r\n    if (_.isObject(message)) {\r\n      if (pretty) {\r\n        message = JSON.stringify(message, null, '\\t');\r\n      } else {\r\n        message = JSON.stringify(message);\r\n      }\r\n      if (this.logLevel === Logger.DEBUG || this.logLevel === Logger.TRACE) {\r\n        level = `${level}:${this.className}:`;\r\n      }\r\n      this.writeCb(level);\r\n      this.writeCb(message);\r\n    } else {\r\n      if (this.logLevel === Logger.DEBUG || this.logLevel === Logger.TRACE) {\r\n        this.writeCb(`${level}:${this.className}: ${message}`);\r\n      } else {\r\n        this.writeCb(`${level}: ${message}`);\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n"]}