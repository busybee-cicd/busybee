{"version":3,"file":"KeyIdentifier.js","sourceRoot":"","sources":["KeyIdentifier.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\r\n\r\nexport class KeyIdentifier {\r\n  static process(config: any, expected: any, actual: any, action: (key: string, ex: any, ac: any) => void) {\r\n    // parse the config payload\r\n    config.forEach((configItem) => {\r\n      if (_.isObject(configItem) && !_.isArray(configItem)) {\r\n        KeyIdentifier.parseConfigObject(configItem, expected, actual, action);\r\n      } else if (_.isString(configItem)) {\r\n        KeyIdentifier.parseConfigString(configItem, expected, actual, action);\r\n      }\r\n    });\r\n\r\n    return {expected, actual};\r\n  }\r\n\r\n  /*\r\n   Called when the initial process() method encounters an Object\r\n   */\r\n  private static parseConfigObject(configObj, expected, actual, action: (key: string, expected: any, actual: any) => void) {\r\n    _.forEach(configObj, (v, k) => {\r\n      // first split the key to see if we need to traverse further before performing the supplied action\r\n      let keyArray = k === '*' ? [k] : k.split('.');\r\n      if (keyArray.length > 1) {\r\n        // we need to dive deeper..this key describes further nesting ie) key.childKey.grandChild.key\r\n        KeyIdentifier.parseConfigObjectPathString(k, v, expected, actual, action);\r\n        return;\r\n      }\r\n\r\n      if (_.isArray(v)) {\r\n        v.forEach((keyToRemove) => {\r\n          // keyToRemove could be a string or an object\r\n          if (_.isObject(keyToRemove) && !_.isArray(keyToRemove)) { // an object describing further recursion\r\n            // advance the expected/actual and pass in the keyToRemove (configObj)\r\n            let nextExpected = expected[k];\r\n            let nextActual = actual[k];\r\n            if (KeyIdentifier.valueIsArray(nextExpected, nextActual)) { // if this next key is a collection in our actual/expected\r\n              nextExpected.forEach((_nextExpected, i) => {\r\n                KeyIdentifier.parseConfigObject(keyToRemove, _nextExpected, nextActual[i], action);\r\n              })\r\n            } else {\r\n              KeyIdentifier.parseConfigObject(keyToRemove, nextExpected, nextActual, action);\r\n            }\r\n\r\n          } else { // simply a string representing a key to remove at this iteration\r\n            KeyIdentifier.advanceAndRemoveKey(k, keyToRemove, expected, actual, action);\r\n          }\r\n        });\r\n      } else if (_.isObject(v)) {\r\n        let nextExpected = expected[k];\r\n        let nextActual = actual[k];\r\n        if (KeyIdentifier.valueIsArray(nextExpected, nextActual)) {\r\n          nextExpected.forEach((_nextExpected, i) => {\r\n            KeyIdentifier.parseConfigObject(v, _nextExpected, actual[i], action);\r\n          });\r\n        } else {\r\n          KeyIdentifier.parseConfigObject(v, nextExpected, nextActual, action);\r\n        }\r\n      } else if (_.isString(v)) {\r\n        KeyIdentifier.advanceAndRemoveKey(k, v, expected, actual, action);\r\n      }\r\n    });\r\n  }\r\n\r\n  private static advanceAndRemoveKey(advanceKey, keyToRemove, actual, expected, action: (key: string, expected: any, actual: any) => void) {\r\n    let nextExpected = advanceKey === '*' ? expected : expected[advanceKey];\r\n    let nextActual = advanceKey === '*' ? actual : actual[advanceKey];\r\n    if (KeyIdentifier.valueIsArray(nextExpected, nextActual)) {\r\n      nextExpected.forEach((_nextExpected, i) => {\r\n        action(keyToRemove, _nextExpected, nextActual[i]);\r\n      });\r\n    } else {\r\n      action(keyToRemove, nextExpected, nextActual);\r\n    }\r\n  }\r\n\r\n  /*\r\n   Called when the initial process() method encounters a String as\r\n   opposed to an object at the top-level\r\n   */\r\n  private static parseConfigString(configString, expected, actual, action: (key: string, expected: any, actual: any) => void) {\r\n    let configArr = configString === '*' ? [configString] : configString.split('.');\r\n    if (configArr.length === 1) {\r\n      action(configArr[0], expected, actual);\r\n\r\n      return;\r\n    }\r\n\r\n    let advanceKey = configArr.shift();\r\n    let nextConfigString = configArr.join('.');\r\n    let nextExpected = advanceKey === '*' ? expected : expected[advanceKey];\r\n    let nextActual = advanceKey === '*' ? actual : actual[advanceKey];\r\n    if (KeyIdentifier.valueIsArray(nextExpected, nextActual)) {\r\n      nextExpected.forEach((_nextExpected, i) => {\r\n        KeyIdentifier.parseConfigString(nextConfigString, _nextExpected, nextActual[i], action);\r\n      });\r\n    } else {\r\n      KeyIdentifier.parseConfigString(nextConfigString, nextExpected, nextActual, action);\r\n    }\r\n  };\r\n\r\n  /*\r\n   Called when a key has been encounted which represents a nested path\r\n   ie) \"my.nested.path\" : \"keyToRemove\" | { \"object\": \"toContinueParsingOnceTraversed\" }\r\n   */\r\n  private static parseConfigObjectPathString(configStringKey, configValue, expected, actual, action: (key: string, expected: any, actual: any) => void) {\r\n    // goal here is to split the string, advance to the next item, once fully advanced, take action\r\n    let configArr = configStringKey === '*' ? [configStringKey] : configStringKey.split('.');\r\n    if (configArr.length > 1) {\r\n      // advance in the expected and actual objects and recurse\r\n      let advanceKey = configArr.shift();\r\n      let nextConfigStringKey = configArr.join(\".\");\r\n      let nextExpected = advanceKey === '*' ? expected : expected[advanceKey];\r\n      let nextActual = advanceKey === '*' ? actual : actual[advanceKey];\r\n      if (KeyIdentifier.valueIsArray(nextExpected, nextActual)) {\r\n        nextExpected.forEach((_nextExpected, i) => {\r\n          KeyIdentifier.parseConfigObjectPathString(nextConfigStringKey, configValue, _nextExpected, nextActual[i], action);\r\n        });\r\n      } else {\r\n        KeyIdentifier.parseConfigObjectPathString(nextConfigStringKey, configValue, nextExpected, nextActual, action);\r\n      }\r\n    } else {\r\n      // take action\r\n      let advanceKey = configArr[0];\r\n      let nextExpected = advanceKey === '*' ? expected : expected[advanceKey];\r\n      let nextActual = advanceKey === '*' ? actual : actual[advanceKey];\r\n      // the value could be another object, an array of keys to delete\r\n      if (_.isArray(configValue)) { // always a have to check _.isArray first because _.isObject([]) == true\r\n        // remove all these dang keys\r\n        configValue.forEach((keyToRemove) => {\r\n          if (KeyIdentifier.valueIsArray(nextExpected, nextActual)) {\r\n            nextExpected.forEach((_nextExpected, i) => {\r\n              action(keyToRemove, _nextExpected, nextActual[i]);\r\n              //KeyIdentifier.deleteKey(keyToRemove, _nextExpected, nextActual[i]);\r\n            })\r\n          } else {\r\n            action(keyToRemove, nextExpected, nextActual);\r\n            //KeyIdentifier.deleteKey(keyToRemove, nextExpected, nextActual);\r\n          }\r\n        });\r\n      } else if (_.isObject(configValue)) {\r\n        // advance in expected/actual and then parse the obj\r\n        if (KeyIdentifier.valueIsArray(nextExpected, nextActual)) {\r\n          nextExpected.forEach((_nextExpected, i) => {\r\n            KeyIdentifier.parseConfigObject(configValue, _nextExpected, nextActual[i], action);\r\n          })\r\n        } else {\r\n          KeyIdentifier.parseConfigObject(configValue, nextExpected, nextActual, action);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private static deleteKey(key, expected, actual) {\r\n    delete expected[key];\r\n    delete actual[key];\r\n  }\r\n\r\n  private static valueIsArray(expected, actual) {\r\n    return _.isArray(expected) && _.isArray(actual);\r\n  }\r\n}\r\n"]}