{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import test from 'ava';\r\nimport { spawn } from 'child_process';\r\nimport * as path from 'path';\r\nimport { ITUtil } from './util/ITUtil';\r\nimport * as http from 'http';\r\nimport * as request from 'request-promise';\r\nimport { Logger, IOUtil, LoggerConf } from 'busybee-util';\r\nconst _request = request.defaults({\r\n  json: true,\r\n  simple: false,\r\n  resolveWithFullResponse: true,\r\n  proxy: false\r\n});\r\nconst busybee = path.join(__dirname, '../../dist/src/index.js');\r\nconst loggerClazz = { constructor: { name: 'ITRunner' } }; // hack to get the logger to prepend something meaningful in debug mode\r\nprocess.env['NO_PROXY'] = 'localhost,127.0.0.1';\r\n\r\n/**\r\n * .serial modifier will force this test to run by itself. need this since we check for specific ports to be used\r\n * in the response.\r\n */\r\ntest.serial(`REST happy path`, t => {\r\n  const loggerConf = new LoggerConf(\r\n    loggerClazz,\r\n    process.env.LOG_LEVEL,\r\n    t.log.bind(t)\r\n  );\r\n  const logger = new Logger(loggerConf);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    let returned = false;\r\n    const testCmd = spawn(busybee, [\r\n      'test',\r\n      '-d',\r\n      path.join(__dirname, 'fixtures/REST-happy-path')\r\n    ]);\r\n    const expected = {\r\n      runId: '82148fd0-a709-11e8-9c57-3b02ed94a9b8',\r\n      runTimestamp: 1535051991373,\r\n      data: [\r\n        {\r\n          testSets: [\r\n            {\r\n              pass: true,\r\n              id: 'ts1',\r\n              tests: [\r\n                {\r\n                  pass: true,\r\n                  id: 'body assertion',\r\n                  body: {\r\n                    pass: true,\r\n                    actual: {\r\n                      hello: 'world',\r\n                      object: {\r\n                        '1': '2',\r\n                        arr: [1, 3, 4],\r\n                        nested: { im: 'nested', arr: [1, 2, 3, 4] }\r\n                      },\r\n                      arr: [1, 2, 3]\r\n                    }\r\n                  },\r\n                  request: {\r\n                    json: true,\r\n                    resolveWithFullResponse: true,\r\n                    simple: false,\r\n                    method: 'GET',\r\n                    url: 'http://localhost:7777/body-assertion',\r\n                    timeout: 30000\r\n                  }\r\n                },\r\n                {\r\n                  pass: true,\r\n                  id: 'status assertion',\r\n                  status: { pass: true, actual: 404 },\r\n                  request: {\r\n                    json: true,\r\n                    resolveWithFullResponse: true,\r\n                    simple: false,\r\n                    method: 'GET',\r\n                    url: 'http://localhost:7777/status-assertion',\r\n                    timeout: 30000\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          ],\r\n          pass: true,\r\n          type: 'REST',\r\n          id: 'REST Happy Path',\r\n          summary: {\r\n            numberOfPassedTests: 2,\r\n            numberOfTestSets: 1,\r\n            numberOfTests: 2\r\n          }\r\n        }\r\n      ]\r\n    };\r\n    let actual;\r\n    let testWasDelayed = false;\r\n\r\n    testCmd.stdout.on('data', data => {\r\n      let lines = IOUtil.parseDataBuffer(data);\r\n      lines.forEach(l => {\r\n        if (l === 'INFO: Delaying request for 1 second(s)') {\r\n          testWasDelayed = true;\r\n        }\r\n        if (l.startsWith('RESULTS:')) {\r\n          actual = JSON.parse(l.replace('RESULTS: ', ''));\r\n        }\r\n      });\r\n    });\r\n\r\n    testCmd.stderr.on('data', () => {\r\n      if (!returned) {\r\n        returned = true;\r\n        t.fail();\r\n        testCmd.kill('SIGHUP');\r\n        resolve();\r\n      }\r\n    });\r\n\r\n    testCmd.on('close', () => {\r\n      if (!returned) {\r\n        returned = true;\r\n        // remove the nested 'date' property from actual/expected since this will be different each run\r\n        t.deepEqual(actual.data, expected.data);\r\n        t.is(\r\n          testWasDelayed,\r\n          true,\r\n          'Body assertion test was not delayed 1 second'\r\n        );\r\n        resolve();\r\n      }\r\n    });\r\n  });\r\n});\r\n\r\ntest(`tests run in order`, async t => {\r\n  const loggerConf = new LoggerConf(\r\n    loggerClazz,\r\n    process.env.LOG_LEVEL,\r\n    t.log.bind(t)\r\n  );\r\n  const logger = new Logger(loggerConf);\r\n  const testCmd = spawn(busybee, [\r\n    'test',\r\n    '-d',\r\n    path.join(__dirname, 'fixtures/REST-tests-run-in-order')\r\n  ]);\r\n  const expected = [\r\n    'INFO: Running Test Set: ts1',\r\n    'INFO: ts1: 0: test at index: 0',\r\n    'INFO: ts1: 1: test at index: 1',\r\n    'INFO: ts1: 2: test at index: 2',\r\n    'INFO: ts1: 3: test at index: 3',\r\n    'INFO: ts1: 4: test at index: 4',\r\n    'INFO: ts1: #: implicitly ordered 1',\r\n    'INFO: ts1: #: implicitly ordered 2',\r\n    'INFO: ts1: #: implicitly ordered 3'\r\n  ];\r\n\r\n  let result = await ITUtil.expectInOrder(testCmd, expected, t, false, logger);\r\n  t.is(result.length, 0);\r\n});\r\n\r\ntest(`env start failure`, async t => {\r\n  const loggerConf = new LoggerConf(\r\n    loggerClazz,\r\n    process.env.LOG_LEVEL,\r\n    t.log.bind(t)\r\n  );\r\n  const logger = new Logger(loggerConf);\r\n  const expected = {\r\n    'BUSYBEE_ERROR detected': 4,\r\n    'Stopping Environment: Env That Will Fail To Start': 4, // stop() is called each time it fails to start. first failure + 3 retries.\r\n    'Stopping Environment: Env That Starts Successfully': 1,\r\n    'Restart attempt number': 3,\r\n    'Tests finished in': 1\r\n  };\r\n\r\n  const testCmd = spawn(busybee, [\r\n    'test',\r\n    '-d',\r\n    path.join(__dirname, 'fixtures/env-start-failure')\r\n  ]);\r\n\r\n  let actual = await ITUtil.analyzeOutputFrequency(testCmd, expected, logger);\r\n  t.deepEqual(actual, expected);\r\n});\r\n\r\ntest.serial(`env healthcheck failure`, async t => {\r\n  const loggerConf = new LoggerConf(\r\n    loggerClazz,\r\n    process.env.LOG_LEVEL,\r\n    t.log.bind(t)\r\n  );\r\n  const logger = new Logger(loggerConf);\r\n  const expected = [\r\n    'INFO: Starting Environment: Env That Will Fail Healthcheck',\r\n    'INFO: Stopping Environment: Env That Will Fail Healthcheck',\r\n    'INFO: Starting Environment: Env That Will Pass Healthcheck',\r\n    'INFO: Stopping Environment: Env That Will Pass Healthcheck',\r\n    'INFO: Starting Environment: Env That Will Fail Healthcheck',\r\n    'INFO: Stopping Environment: Env That Will Fail Healthcheck',\r\n    'INFO: Starting Environment: Env That Will Fail Healthcheck',\r\n    'INFO: Stopping Environment: Env That Will Fail Healthcheck',\r\n    'INFO: Starting Environment: Env That Will Fail Healthcheck',\r\n    'INFO: Stopping Environment: Env That Will Fail Healthcheck'\r\n  ];\r\n\r\n  const testCmd = spawn(busybee, [\r\n    'test',\r\n    '-d',\r\n    path.join(__dirname, 'fixtures/env-healthcheck-failure')\r\n  ]);\r\n\r\n  let result = await ITUtil.expectInOrder(testCmd, expected, t, true, logger);\r\n  t.is(result.length, 0);\r\n});\r\n\r\n/**\r\n * .serial modifier will force this test to run by itself to ensure ports aren't being reserved. need this since\r\n * we're asserting specific ports\r\n */\r\ntest(`ports in use`, async t => {\r\n  const loggerConf = new LoggerConf(\r\n    loggerClazz,\r\n    process.env.LOG_LEVEL,\r\n    t.log.bind(t)\r\n  );\r\n  const logger = new Logger(loggerConf);\r\n  // spin up a service on 7777 to block the port\r\n  const server = http.createServer();\r\n  server.listen(8888);\r\n\r\n  // wait for service to begin listening\r\n  await new Promise((resolve, reject) => {\r\n    server.on('listening', async () => {\r\n      resolve();\r\n    });\r\n\r\n    server.on('error', err => {\r\n      reject(err);\r\n    });\r\n  });\r\n\r\n  // spin up busybee and assert output\r\n  const childEnv = Object.assign({}, process.env, { LOG_LEVEL: 'TRACE' });\r\n  const testCmd = spawn(\r\n    busybee,\r\n    ['test', '-d', path.join(__dirname, 'fixtures/ports-in-use')],\r\n    { env: childEnv }\r\n  );\r\n  const expected = {\r\n    'TRACE:EnvManager: arePortsInUseByBusybee  | 8888,8889': 1,\r\n    'TRACE:EnvManager: 8889 is available': 2,\r\n    'TRACE:EnvManager: 8888 is in use': 1,\r\n    'TRACE:EnvManager: ports identified: {\"ports\":[8889,8890],\"portOffset\":1}': 1,\r\n    'TRACE:EnvManager: ports identified: {\"ports\":[8891,8892],\"portOffset\":3}': 1,\r\n    'INFO:Object: Tests finished in': 1\r\n  };\r\n\r\n  let actual = await ITUtil.analyzeOutputFrequency(testCmd, expected, logger);\r\n  t.deepEqual(actual, expected);\r\n\r\n  // shut down server holding 7777\r\n  await new Promise((resolve, reject) => {\r\n    server.close(err => {\r\n      if (err) {\r\n        reject(err);\r\n      } else {\r\n        resolve();\r\n      }\r\n    });\r\n  });\r\n});\r\n\r\n/**\r\n *\r\n */\r\ntest(`USER_PROVIDED happy path`, async t => {\r\n  const loggerConf = new LoggerConf(\r\n    loggerClazz,\r\n    process.env.LOG_LEVEL,\r\n    t.log.bind(t)\r\n  );\r\n  const logger = new Logger(loggerConf);\r\n  const childEnv = Object.assign({}, process.env, {\r\n    MY_ENV_VAR: 'MY_ENV_VAR Was Passed to run.sh'\r\n  });\r\n  const testCmd = spawn(\r\n    busybee,\r\n    [\r\n      'test',\r\n      '-d',\r\n      path.join(__dirname, 'fixtures/USER_PROVIDED-happy-path'),\r\n      '-D'\r\n    ],\r\n    { env: childEnv }\r\n  );\r\n  const expected = [\r\n    'DEBUG:EnvManager: startData is neat',\r\n    'DEBUG:EnvManager: MY_ENV_VAR Was Passed to run.sh',\r\n    'DEBUG:EnvManager: runData rules',\r\n    'DEBUG:EnvManager: stopData is also neat'\r\n  ];\r\n  const result = await ITUtil.expectInOrder(\r\n    testCmd,\r\n    expected,\r\n    t,\r\n    false,\r\n    logger\r\n  );\r\n\r\n  t.is(result.length, 0);\r\n});\r\n\r\n/**\r\n * tests that mock behavior is working properly\r\n */\r\ntest(`REST mock mode`, async t => {\r\n  const loggerConf = new LoggerConf(\r\n    loggerClazz,\r\n    process.env.LOG_LEVEL,\r\n    t.log.bind(t)\r\n  );\r\n  const logger = new Logger(loggerConf);\r\n  const testCmd = spawn(busybee, [\r\n    'mock',\r\n    '-d',\r\n    path.join(__dirname, 'fixtures/REST-mock-mode'),\r\n    '--testSuite',\r\n    'REST Mock Mode'\r\n  ]);\r\n  // confirm start-up\r\n  await ITUtil.waitFor(\r\n    testCmd,\r\n    'INFO: Mock Server listening on 3030',\r\n    t,\r\n    false,\r\n    logger\r\n  );\r\n  //await ITUtil.waitFor(testCmd, 'forever', t, false, logger);\r\n\r\n  /*\r\n    1. check that a test with multiple mocks will iterate\r\n    between them on subsequent calls\r\n  */\r\n  let uri = 'http://localhost:3030/body-assertion';\r\n  try {\r\n    let okRes = await _request({ uri: uri });\r\n    t.is(okRes.statusCode, 200);\r\n    t.deepEqual(okRes.body, { hello: 'world' });\r\n\r\n    let failRes = await _request({ uri: uri });\r\n    t.is(failRes.statusCode, 500);\r\n  } catch (e) {\r\n    t.fail(e.message);\r\n  }\r\n\r\n  /*\r\n    2. check that an explicitly defined mock can be called separately\r\n    for the same endpoint using the busybee-mock-status header\r\n  */\r\n  try {\r\n    // call the uri without busybee-mock-status header and should get 200\r\n    let okRes = await _request({ uri: uri });\r\n    t.is(okRes.statusCode, 200);\r\n    t.deepEqual(okRes.body, { hello: 'world' });\r\n\r\n    // explicitly request a 404 status\r\n    let notFoundRes = await _request({\r\n      uri: uri,\r\n      headers: { 'busybee-mock-status': 404 }\r\n    });\r\n    t.is(notFoundRes.statusCode, 404);\r\n  } catch (e) {\r\n    t.fail(e.message);\r\n  }\r\n\r\n  testCmd.kill('SIGHUP');\r\n});\r\n\r\ntest(`REST variable exports`, async t => {\r\n  const loggerConf = new LoggerConf(\r\n    loggerClazz,\r\n    process.env.LOG_LEVEL,\r\n    t.log.bind(t)\r\n  );\r\n  const logger = new Logger(loggerConf);\r\n  const expected = ['Test Passed?: true'];\r\n\r\n  //const childEnv = Object.assign({}, process.env, {LOG_LEVEL: 'TRACE'});\r\n  const testCmd = spawn(busybee, [\r\n    'test',\r\n    '-d',\r\n    path.join(__dirname, 'fixtures/REST-variable-exports')\r\n  ]);\r\n\r\n  let result = await ITUtil.expectInOrder(testCmd, expected, t, false, logger);\r\n  t.is(result.length, 0);\r\n});\r\n\r\n// function sleep(ms = 0) {\r\n//   return new Promise(r => setTimeout(r, ms));\r\n// }\r\n"]}