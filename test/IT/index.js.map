{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import test from 'ava';\r\nimport { spawn } from 'child_process';\r\nimport * as path from 'path';\r\nimport { IgnoreKeys } from '../../src/lib/assertionModifications/IgnoreKeys';\r\nimport { ITUtil } from './util/ITUtil';\r\nimport * as http from 'http';\r\nimport * as request from 'request-promise';\r\nimport { Logger, IOUtil, LoggerConf } from 'busybee-util';\r\nconst _request = request.defaults({\r\n  json:true,\r\n  simple: false,\r\n  resolveWithFullResponse: true,\r\n  proxy: false\r\n});\r\nconst busybee = path.join(__dirname, '../../dist/src/index.js');\r\nconst loggerClazz = { constructor: { name: 'ITRunner' } }; // hack to get the logger to prepend something meaningful in debug mode\r\nprocess.env['NO_PROXY'] = 'localhost,127.0.0.1';\r\n\r\n/**\r\n * .serial modifier will force this test to run by itself. need this since we check for specific ports to be used\r\n * in the response.\r\n */\r\ntest.serial(`REST happy path`, (t) => {\r\n  const loggerConf = new LoggerConf(loggerClazz, process.env.LOG_LEVEL, t.log.bind(t));\r\n  const logger = new Logger(loggerConf);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    let returned = false;\r\n    const testCmd = spawn(busybee, ['test', '-d', path.join(__dirname, 'fixtures/REST-happy-path')]);\r\n    const expected = {\"runId\":\"82148fd0-a709-11e8-9c57-3b02ed94a9b8\",\"runTimestamp\":1535051991373,\"data\":[{\"testSets\":[{\"pass\":true,\"id\":\"ts1\",\"tests\":[{\"pass\":true,\"id\":\"body assertion\",\"body\":{\"pass\":true,\"actual\":{\"hello\":\"world\",\"object\":{\"1\":\"2\",\"arr\":[1,3,4],\"nested\":{\"im\":\"nested\",\"arr\":[1,2,3,4]}},\"arr\":[1,2,3]}},\"request\":{\"json\":true,\"resolveWithFullResponse\":true,\"simple\":false,\"method\":\"GET\",\"url\":\"http://localhost:7777/body-assertion\",\"timeout\":30000}},{\"pass\":true,\"id\":\"status assertion\",\"status\":{\"pass\":true,\"actual\":404},\"request\":{\"json\":true,\"resolveWithFullResponse\":true,\"simple\":false,\"method\":\"GET\",\"url\":\"http://localhost:7777/status-assertion\",\"timeout\":30000}}]}],\"pass\":true,\"type\":\"REST\",\"id\":\"REST Happy Path\"}]};\r\n    let actual;\r\n\r\n    testCmd.stdout.on('data', (data) => {\r\n      let lines = IOUtil.parseDataBuffer(data);\r\n      lines.forEach((l) => {\r\n        if (l.startsWith('RESULTS:')) {\r\n          actual = JSON.parse(l.replace('RESULTS: ', ''));\r\n        }\r\n      })\r\n    });\r\n\r\n    testCmd.stderr.on('data', (data) => {\r\n      if (!returned) {\r\n        returned = true;\r\n        t.fail();\r\n        testCmd.kill('SIGHUP');\r\n        resolve();\r\n      }\r\n    });\r\n\r\n    testCmd.on('close', () => {\r\n      if (!returned) {\r\n        returned = true;\r\n        // remove the nested 'date' property from actual/expected since this will be different each run\r\n        t.deepEqual(actual.data, expected.data);\r\n        resolve();\r\n      }\r\n    });\r\n  });\r\n});\r\n\r\ntest(`tests run in order`, async (t) => {\r\n  const loggerConf = new LoggerConf(loggerClazz, process.env.LOG_LEVEL, t.log.bind(t));\r\n  const logger = new Logger(loggerConf);\r\n  const testCmd = spawn(busybee, ['test', '-d', path.join(__dirname, 'fixtures/REST-tests-run-in-order')]);\r\n  const expected = [\r\n    'INFO: Running Test Set: ts1',\r\n    'INFO: ts1: 0: test at index: 0',\r\n    'INFO: ts1: 1: test at index: 1',\r\n    'INFO: ts1: 2: test at index: 2',\r\n    'INFO: ts1: 3: test at index: 3',\r\n    'INFO: ts1: 4: test at index: 4',\r\n    'INFO: ts1: #: implicitly ordered 1',\r\n    'INFO: ts1: #: implicitly ordered 2',\r\n    'INFO: ts1: #: implicitly ordered 3'\r\n  ];\r\n\r\n  let result = await ITUtil.expectInOrder(testCmd, expected, t, false, logger);\r\n  t.is(result.length, 0);\r\n});\r\n\r\n// TODO: re-write now that we have retries\r\ntest(`env start failure`, async (t) => {\r\n  const loggerConf = new LoggerConf(loggerClazz, process.env.LOG_LEVEL, t.log.bind(t));\r\n  const logger = new Logger(loggerConf);\r\n  const expected = {\r\n    'BUSYBEE_ERROR detected': 4,\r\n    'Stopping Environment: Env That Will Fail To Start': 4, // stop() is called each time it fails to start. first failure + 3 retries.\r\n    'Stopping Environment: Env That Starts Successfully': 1,\r\n    'Restart attempt number': 3,\r\n    'Tests finished in': 1\r\n  };\r\n\r\n  const testCmd = spawn(busybee, ['test', '-d', path.join(__dirname, 'fixtures/env-start-failure')]);\r\n\r\n  let actual = await ITUtil.analyzeOutputFrequency(testCmd, expected, logger);\r\n  t.deepEqual(actual, expected);\r\n});\r\n\r\n/**\r\n * .serial modifier will force this test to run by itself to ensure ports aren't being reserved. need this since\r\n * we're asserting specific ports\r\n */\r\ntest(`ports in use`, async (t) => {\r\n  const loggerConf = new LoggerConf(loggerClazz, process.env.LOG_LEVEL, t.log.bind(t));\r\n  const logger = new Logger(loggerConf);\r\n  // spin up a service on 7777 to block the port\r\n  const server = http.createServer();\r\n  server.listen(8888);\r\n\r\n  // wait for service to begin listening\r\n  await new Promise((resolve, reject) => {\r\n    server.on('listening', async () => {\r\n      resolve();\r\n    });\r\n\r\n    server.on('error', (err) => {\r\n      reject(err);\r\n    });\r\n  });\r\n\r\n  // spin up busybee and assert output\r\n  const childEnv = Object.assign({}, process.env, {LOG_LEVEL: 'TRACE'});\r\n  const testCmd = spawn(busybee, ['test', '-d', path.join(__dirname, 'fixtures/ports-in-use')], {env: childEnv});\r\n  const expected = {\r\n    'TRACE:EnvManager: arePortsInUseByBusybee  | 8888,8889' : 1,\r\n    'TRACE:EnvManager: 8889 is available': 2,\r\n    'TRACE:EnvManager: 8888 is in use': 1,\r\n    'TRACE:EnvManager: ports identified: {\"ports\":[8889,8890],\"portOffset\":1}': 1,\r\n    'TRACE:EnvManager: ports identified: {\"ports\":[8891,8892],\"portOffset\":3}': 1,\r\n    'INFO:Object: Tests finished in': 1\r\n  };\r\n\r\n  let actual = await ITUtil.analyzeOutputFrequency(testCmd, expected, logger);\r\n  t.deepEqual(actual, expected);\r\n\r\n  // shut down server holding 7777\r\n  await new Promise((resolve, reject) => {\r\n    server.close((err) => {\r\n      if (err) {\r\n        reject(err);\r\n      } else {\r\n        resolve();\r\n      }\r\n    })\r\n  });\r\n});\r\n\r\n/**\r\n *\r\n */\r\ntest(`USER_PROVIDED happy path`, async (t) => {\r\n  const loggerConf = new LoggerConf(loggerClazz, process.env.LOG_LEVEL, t.log.bind(t));\r\n  const logger = new Logger(loggerConf);\r\n  const testCmd = spawn(busybee, ['test', '-d', path.join(__dirname, 'fixtures/USER_PROVIDED-happy-path'), '-D']);\r\n  const expected = [\r\n    'DEBUG:EnvManager: startData is neat',\r\n    'DEBUG:EnvManager: runData rules',\r\n    'DEBUG:EnvManager: stopData is also neat'\r\n  ];\r\n  const result = await ITUtil.expectInOrder(testCmd, expected, t, false, logger);\r\n\r\n  t.is(result.length, 0);\r\n});\r\n\r\n/**\r\n * tests that mock behavior is working properly\r\n */\r\ntest(`REST mock mode`, async (t) => {\r\n  const loggerConf = new LoggerConf(loggerClazz, process.env.LOG_LEVEL, t.log.bind(t));\r\n  const logger = new Logger(loggerConf);\r\n  const testCmd = spawn(busybee, ['mock', '-d', path.join(__dirname, 'fixtures/REST-mock-mode'), '--testSuite', 'REST Mock Mode']);\r\n  // confirm start-up\r\n  await ITUtil.waitFor(testCmd, 'INFO: Mock Server listening on 3030', t, false, logger);\r\n  //await ITUtil.waitFor(testCmd, 'forever', t, false, logger);\r\n\r\n  /*\r\n    1. check that a test with multiple mocks will iterate\r\n    between them on subsequent calls\r\n  */\r\n  let uri = 'http://localhost:3030/body-assertion';\r\n  try {\r\n    let okRes = await _request({uri: uri});\r\n    t.is(okRes.statusCode, 200);\r\n    t.deepEqual(okRes.body, {hello: 'world'});\r\n\r\n    let failRes = await _request({uri: uri});\r\n    t.is(failRes.statusCode, 500);\r\n  } catch (e) {\r\n    t.fail(e.message);\r\n  }\r\n\r\n  /*\r\n    2. check that an explicitly defined mock can be called separately\r\n    for the same endpoint using the busybee-mock-status header\r\n  */\r\n  try {\r\n    // call the uri without busybee-mock-status header and should get 200\r\n    let okRes = await _request({uri: uri});\r\n    t.is(okRes.statusCode, 200);\r\n    t.deepEqual(okRes.body, {hello: 'world'});\r\n\r\n    // explicitly request a 404 status\r\n    let notFoundRes = await _request({uri: uri, headers: {'busybee-mock-status': 404}});\r\n    t.is(notFoundRes.statusCode, 404);\r\n  } catch (e) {\r\n    t.fail(e.message);\r\n  }\r\n\r\n  testCmd.kill('SIGHUP');\r\n});\r\n\r\ntest.only(`REST variable exports`, async (t) => {\r\n  const loggerConf = new LoggerConf(loggerClazz, process.env.LOG_LEVEL, t.log.bind(t));\r\n  const logger = new Logger(loggerConf);\r\n  const expected = ['Test Passed?: true'];\r\n\r\n  //const childEnv = Object.assign({}, process.env, {LOG_LEVEL: 'TRACE'});\r\n  const testCmd = spawn(busybee, ['test', '-d', path.join(__dirname, 'fixtures/REST-variable-exports')]);\r\n\r\n  let result = await ITUtil.expectInOrder(testCmd, expected, t, false, logger);\r\n  t.is(result.length, 0);\r\n});\r\n\r\n\r\n// function sleep(ms = 0) {\r\n//   return new Promise(r => setTimeout(r, ms));\r\n// }\r\n"]}