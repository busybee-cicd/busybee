{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import test, { GenericTestContext, Context } from 'ava';\r\nimport { spawn, ChildProcess, SpawnOptions } from 'child_process';\r\nimport * as path from 'path';\r\nimport { IOUtil } from '../../src/lib/IOUtil';\r\nimport { IgnoreKeys } from '../../src/lib/assertionModifications/IgnoreKeys';\r\nimport { ITUtil } from './ITUtil';\r\nimport * as http from 'http';\r\nimport { resolve } from 'url';\r\nconst busybee = path.join(__dirname, '../../dist/src/index.js');\r\n\r\n/**\r\n * .serial modifier will force this test to run by itself. need this since we check for specific ports to be used\r\n * in the response.\r\n */\r\ntest.serial(`happy path simple`, (t) => {\r\n  return new Promise((resolve, reject) => {\r\n    let returned = false;\r\n    const testCmd = spawn(busybee, ['test', '-d', path.join(__dirname, 'fixtures/REST-happy-path-simple')]);\r\n    const expected = [{\"testSets\":[{\"pass\":true,\"id\":\"ts1\",\"tests\":[{\"pass\":true,\"id\":\"body assertion\",\"status\":{\"pass\":true,\"actual\":200},\"headers\":{\"pass\":true,\"actual\":[{\"content-type\":\"application/json\"},{\"date\":\"Wed, 04 Jul 2018 15:15:16 GMT\"},{\"connection\":\"close\"},{\"transfer-encoding\":\"chunked\"}],\"expected\":[]},\"body\":{\"pass\":true,\"actual\":{\"hello\":\"world\",\"object\":{\"1\":\"2\",\"arr\":[1,3,4],\"nested\":{\"im\":\"nested\",\"arr\":[1,2,3,4]}},\"arr\":[1,2,3]}},\"request\":{\"json\":true,\"method\":\"GET\",\"url\":\"http://localhost:7777/body-assertion\",\"timeout\":30000,\"resolveWithFullResponse\":true,\"simple\":false}},{\"pass\":true,\"id\":\"status assertion\",\"status\":{\"pass\":true,\"actual\":404},\"headers\":{\"pass\":true,\"actual\":[{\"content-type\":\"application/json\"},{\"date\":\"Wed, 04 Jul 2018 15:15:16 GMT\"},{\"connection\":\"close\"},{\"transfer-encoding\":\"chunked\"}],\"expected\":[]},\"body\":{\"pass\":true},\"request\":{\"json\":true,\"method\":\"GET\",\"url\":\"http://localhost:7777/status-assertion\",\"timeout\":30000,\"resolveWithFullResponse\":true,\"simple\":false}}]}],\"pass\":true,\"type\":\"REST\",\"id\":\"Happy Path\"}];\r\n    let actual;\r\n\r\n    testCmd.stdout.on('data', (data) => {\r\n      let lines = IOUtil.parseDataBuffer(data);\r\n      lines.forEach((l) => {\r\n        if (l.startsWith('RESULTS:')) {\r\n          actual = JSON.parse(l.replace('RESULTS: ', ''));\r\n        }\r\n      })\r\n    });\r\n\r\n    testCmd.stderr.on('data', (data) => {\r\n      if (!returned) {\r\n        returned = true;\r\n        t.fail();\r\n        testCmd.kill('SIGHUP');\r\n        resolve();\r\n      }\r\n    });\r\n\r\n    testCmd.on('close', () => {\r\n      if (!returned) {\r\n        returned = true;\r\n        // remove the nested 'date' property from actual/expected since this will be different each run\r\n        IgnoreKeys.process(['*.testSets.tests.headers.actual.date'], expected, actual);\r\n        t.deepEqual(actual, expected);\r\n        resolve();\r\n      }\r\n    });\r\n  })\r\n});\r\n\r\ntest(`tests run in order`, async (t) => {\r\n  const testCmd = spawn(busybee, ['test', '-d', path.join(__dirname, 'fixtures/REST-tests-run-in-order')]);\r\n  const expected = [\r\n    'INFO: Running Test Set: ts1',\r\n    'INFO: ts1: 0: test at index: 0',\r\n    'INFO: ts1: 1: test at index: 1',\r\n    'INFO: ts1: 2: test at index: 2',\r\n    'INFO: ts1: 3: test at index: 3',\r\n    'INFO: ts1: 4: test at index: 4',\r\n    'INFO: ts1: #: implicitly ordered 1',\r\n    'INFO: ts1: #: implicitly ordered 2',\r\n    'INFO: ts1: #: implicitly ordered 3'\r\n  ];\r\n\r\n  let result = await ITUtil.expectInOrder(testCmd, expected, t);\r\n  t.is(result.length, 0);\r\n});\r\n\r\ntest(`env start failure`, async (t) => {\r\n  const expected = {\r\n    'BUSYBEE_ERROR detected': 2,\r\n    'Stopping Environment: Env That Will Fail To Start (1)': 1,\r\n    'Stopping Environment: Env That Will Fail To Start (2)': 1,\r\n    'Stopping Environment: Env That Starts Successfully (1)': 1,\r\n    'Stopping Environment: Env That Starts Successfully (2)': 1,\r\n    'Tests finished in': 1\r\n  };\r\n\r\n  const testCmd = spawn(busybee, ['test', '-d', path.join(__dirname, 'fixtures/env-start-failure')]);\r\n\r\n  let actual = await ITUtil.analyzeOutputFrequency(testCmd, expected);\r\n  t.deepEqual(actual, expected);\r\n});\r\n\r\n/**\r\n * .serial modifier will force this test to run by itself to ensure ports aren't being reserved. need this since\r\n * we're asserting specific ports\r\n */\r\ntest(`ports in use`, async (t) => {\r\n  // spin up a service on 7777 to block the port\r\n  const server = http.createServer();\r\n  server.listen(7777);\r\n\r\n  // wait for service to begin listening\r\n  await new Promise((resolve, reject) => {\r\n    server.on('listening', async () => {\r\n      resolve();\r\n    });\r\n\r\n    server.on('error', (err) => {\r\n      reject(err);\r\n    });\r\n  });\r\n\r\n  // spin up busybee and assert output\r\n  const childEnv = Object.assign({}, process.env, {BUSYBEE_LOG_LEVEL: 'TRACE'});\r\n  const testCmd = spawn(busybee, ['test', '-d', path.join(__dirname, 'fixtures/ports-in-use')], {env: childEnv});\r\n  const expected = {\r\n    'TRACE:EnvManager: arePortsInUseByBusybee  | 7777,7778' : 1,\r\n    'TRACE:EnvManager: 7778 is available': 2,\r\n    'TRACE:EnvManager: 7777 is in use': 1,\r\n    'TRACE:EnvManager: ports identified: {\"ports\":[7778,7779],\"portOffset\":1}': 1,\r\n    'TRACE:EnvManager: ports identified: {\"ports\":[7780,7781],\"portOffset\":3}': 1,\r\n    'INFO:Object: Tests finished in': 1\r\n  };\r\n\r\n  let actual = await ITUtil.analyzeOutputFrequency(testCmd, expected);\r\n  t.deepEqual(actual, expected);\r\n\r\n  // shut down server holding 7777\r\n  await new Promise((resolve, reject) => {\r\n    server.close((err) => {\r\n      if (err) {\r\n        reject(err);\r\n      } else {\r\n        resolve();\r\n      }\r\n    })\r\n  });\r\n});\r\n\r\n\r\nfunction sleep(ms = 0) {\r\n  return new Promise(r => setTimeout(r, ms));\r\n}\r\n"]}