{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import test from 'ava';\r\nimport { spawn, ChildProcess } from 'child_process';\r\nimport * as path from 'path';\r\nimport { Logger } from '../../src/lib/Logger';\r\nimport { IOHelper } from '../../src/lib/IOHelper';\r\nconst busybee = path.join(__dirname, '../../dist/src/index.js');\r\nconst logger = new Logger({}, {constructor : {name: 'IT'}});\r\n\r\n\r\ntest(`happy path simple`, (t) => {\r\n  return new Promise((resolve, reject) => {\r\n    let returned = false;\r\n    const testCmd = spawn(busybee, ['test', '-d', path.join(__dirname, 'fixtures/happy-path-simple'), '-D']);\r\n\r\n    testCmd.stderr.on('data', (data) => {\r\n      logger.info(data.toString());\r\n\r\n      if (!returned) {\r\n        returned = true;\r\n        t.fail();\r\n        testCmd.kill('SIGHUP');\r\n        resolve();\r\n      }\r\n    });\r\n\r\n    testCmd.on('close', () => {\r\n      if (!returned) {\r\n        returned = true;\r\n        t.pass();\r\n        resolve();\r\n      }\r\n    });\r\n  })\r\n});\r\n\r\ntest(`env start failure`, async (t) => {\r\n  const assertions = {\r\n    'BUSYBEE_ERROR detected': 2,\r\n    'Stopping Environment: Env That Will Fail To Start (1)': 1,\r\n    'Stopping Environment: Env That Will Fail To Start (2)': 1,\r\n    'Stopping Environment: Env That Starts Successfully (1)': 1,\r\n    'Stopping Environment: Env That Starts Successfully (2)': 1,\r\n    'Tests finished in': 1\r\n  };\r\n\r\n  const testCmd = spawn(busybee, ['test', '-d', path.join(__dirname, 'fixtures/env-start-failure')]);\r\n\r\n  let actual = await analyzeOutput(testCmd, assertions);\r\n  t.deepEqual(actual, assertions);\r\n});\r\n\r\nfunction analyzeOutput(childProcess: ChildProcess, assertions: any): Promise<any> {\r\n  return new Promise((resolve, reject) => {\r\n    let actual = {};\r\n\r\n    childProcess.stdout.on('data', (data) => {\r\n      let lines = IOHelper.parseDataBuffer(data);\r\n      lines.forEach((l) => {\r\n        let found = Object.keys(assertions).find((k) => {\r\n          return l.includes(k);\r\n        });\r\n\r\n        if (found) {\r\n          if (!actual[found]) {\r\n            actual[found] = 0;\r\n          }\r\n\r\n          actual[found] += 1;\r\n        }\r\n      });\r\n    });\r\n\r\n    childProcess.on('close', () => {\r\n      resolve(actual);\r\n    });\r\n  });\r\n}\r\n"]}