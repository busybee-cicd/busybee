{"version":3,"file":"ITUtil.js","sourceRoot":"","sources":["ITUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChildProcess } from 'child_process';\r\nimport { GenericTestContext, Context } from 'ava';\r\nimport { Logger, IOUtil } from 'busybee-util';\r\n\r\nexport class ITUtil {\r\n\r\n  static getResult(childProc: ChildProcess, logger = null): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      let returned = false;\r\n\r\n      childProc.stdout.on('data', (data) => {\r\n        let lines = IOUtil.parseDataBuffer(data);\r\n        lines.forEach((l) => {\r\n          if (l.startsWith('RESULTS:')) {\r\n            resolve(JSON.parse(l.replace('RESULTS: ', '')));\r\n          }\r\n        })\r\n      });\r\n\r\n      childProc.stderr.on('data', (data) => {\r\n        if (!returned) {\r\n          returned = true;\r\n          childProc.kill('SIGHUP');\r\n          reject();\r\n        }\r\n      });\r\n\r\n      childProc.on('close', () => {\r\n        if (!returned) {\r\n          returned = true;\r\n          // remove the nested 'date' property from actual/expected since this will be different each run\r\n          resolve();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * looks for occurrences of strings in a stdout stream of a child process\r\n   * when given an assertions object {stringToFind: numberOfOccurrences}\r\n   *\r\n   * @param childProc\r\n   * @param assertions\r\n   * @param logger\r\n   */\r\n  static analyzeOutputFrequency(childProc: ChildProcess, assertions: any, logger = null): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      let actual = {};\r\n\r\n      childProc.stdout.on('data', (data) => {\r\n        let lines = IOUtil.parseDataBuffer(data);\r\n        lines.forEach((l) => {\r\n          if (logger) {\r\n            logger.debug(l);\r\n          }\r\n          let found = Object.keys(assertions).find((k) => {\r\n            return l.includes(k);\r\n          });\r\n\r\n          if (found) {\r\n            if (!actual[found]) {\r\n              actual[found] = 0;\r\n            }\r\n\r\n            actual[found] += 1;\r\n          }\r\n        });\r\n      });\r\n\r\n      childProc.on('close', () => {\r\n        if (logger) {\r\n          logger.debug('child process closing');\r\n        }\r\n        resolve(actual);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * reads from stdout and shifts entries out of the provided array as they are encountered.\r\n   * if all items are encountered in the order in which they appear in the stdout stream then the\r\n   * collection should be empty when resolved\r\n   *\r\n   * @param childProc\r\n   * @param expect\r\n   * @param t\r\n   * @param startsWith\r\n   * @param logger\r\n   */\r\n  static expectInOrder(childProc: ChildProcess, expect: Array<string>, t: GenericTestContext<Context<any>>, startsWith:boolean = false, logger:Logger = null): Promise<Array<string>> {\r\n    return new Promise((resolve, reject) => {\r\n      let returned = false;\r\n      childProc.stdout.on('data', (data) => {\r\n        let lines: string[] = IOUtil.parseDataBuffer(data);\r\n        lines.forEach((l) => {\r\n          if (logger) {\r\n            logger.debug(l);\r\n          }\r\n          if (startsWith) {\r\n            if (l.startsWith(expect[0])) {\r\n              expect.shift();\r\n            }\r\n          } else {\r\n            if (l === expect[0]) {\r\n              expect.shift();\r\n            }\r\n          }\r\n\r\n        })\r\n      });\r\n\r\n      childProc.stderr.on('data', (data) => {\r\n        if (!returned) {\r\n          if (logger) {\r\n            logger.debug(data.toString());\r\n          }\r\n          returned = true;\r\n          childProc.kill('SIGHUP');\r\n          resolve(expect);\r\n        }\r\n      });\r\n\r\n      childProc.on('close', () => {\r\n        if (!returned) {\r\n          if (logger) {\r\n            logger.debug('child process closing');\r\n          }\r\n          returned = true;\r\n          resolve(expect);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * waits for a provided string to appear in stdout and then resolves\r\n   *\r\n   * @param childProc\r\n   * @param target\r\n   * @param t\r\n   * @param startsWith\r\n   * @param logger\r\n   */\r\n  static waitFor(childProc: ChildProcess, target: string, t: GenericTestContext<Context<any>>, startsWith:boolean = false, logger:Logger = null): Promise<Array<string>> {\r\n    return new Promise((resolve, reject) => {\r\n      let returned = false;\r\n      childProc.stdout.on('data', (data) => {\r\n        let lines: string[] = IOUtil.parseDataBuffer(data);\r\n        lines.forEach((l) => {\r\n          if (logger) {\r\n            logger.debug(l);\r\n          }\r\n          if (startsWith) {\r\n            if (l.startsWith(target)) {\r\n              resolve();\r\n            }\r\n          } else {\r\n            if (l === target) {\r\n              resolve();\r\n            }\r\n          }\r\n\r\n        })\r\n      });\r\n\r\n      childProc.stderr.on('data', (data) => {\r\n        if (!returned) {\r\n          let msg = data.toString();\r\n          if (logger) {\r\n            logger.debug(msg);\r\n          }\r\n          returned = true;\r\n          t.fail(msg);\r\n          childProc.kill('SIGHUP');\r\n          reject(msg);\r\n        }\r\n      });\r\n\r\n      childProc.on('close', () => {\r\n        if (!returned) {\r\n          if (logger) {\r\n            logger.debug('child process closing');\r\n          }\r\n          returned = true;\r\n          resolve();\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n"]}