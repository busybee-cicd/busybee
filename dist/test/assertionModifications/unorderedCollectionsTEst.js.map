{"version":3,"file":"unorderedCollectionsTest.js","sourceRoot":"","sources":["../../../test/assertionModifications/unorderedCollectionsTest.ts"],"names":[],"mappings":"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","sourcesContent":["import test from 'ava';\nimport {UnorderedCollections} from \"../../src/lib/assertionModifications/UnorderedCollections\";\n\n\ntest((t) => {\n    // '.' will only check the top-level collection and does not apply to any unordered subCollections\n    let expected = [\n        {\n            subCollection: [\n                1,2,3,4\n            ]\n        },\n        {\n            \"key\": \"value\",\n            subCollection: [\n                5,6,7,8\n            ]\n        }\n    ];\n\n    let actual = [\n        {\n            \"key\": \"value\",\n            subCollection: [\n                8,6,7,5\n            ]\n        },\n        {\n            subCollection: [\n                4,3,2,1\n            ]\n        },\n    ];\n    UnorderedCollections.process(['*'], expected, actual);\n    t.notDeepEqual(expected, actual);\n});\n\ntest((t) => {\n    // this passes because the user has specified both the unordered top-level and the unordered subCollection\n    let expected = [\n        {\n            subCollection: [\n                1,2,3,4\n            ]\n        },\n        {\n            \"key\": \"value\",\n            subCollection: [\n                5,6,7,8\n            ]\n        }\n    ];\n\n    let actual = [\n        {\n            \"key\": \"value\",\n            subCollection: [\n                8,6,7,5\n            ]\n        },\n        {\n            subCollection: [\n                4,3,2,1\n            ]\n        },\n    ];\n    UnorderedCollections.process(['*', '*.subCollection'], expected, actual);\n    t.deepEqual(expected, actual);\n});\n\n\ntest((t) => {\n    //  an ordered top-level collection can contain un-ordered child collection\n    let expected = [\n        {\n            subCollection: [\n                1,2,3,4\n            ]\n        },\n        {\n            \"key\": \"value\",\n            subCollection: [\n                5,6,7,8\n            ]\n        }\n    ];\n\n    let actual = [\n        {\n            subCollection: [\n                4,3,2,1\n            ]\n        },\n        {\n            \"key\": \"value\",\n            subCollection: [\n                8,6,7,5\n            ]\n        }\n    ];\n\n    UnorderedCollections.process(['*.subCollection'], expected, actual);\n    t.deepEqual(expected, actual);\n});\n\ntest((t) => {\n    //  it catches when collections are ambiguous and there is know way to know if the order is correct\n    let expected = [\n        {\n            subCollection: [\n                1,2,3,4\n            ]\n        },\n        {\n            subCollection: [\n                5,6,7,8\n            ]\n        }\n    ];\n\n    let actual = [\n        {\n            subCollection: [\n                8,6,7,5\n            ]\n        },\n        {\n            subCollection: [\n                4,3,2,1\n            ]\n        }\n    ];\n\n    UnorderedCollections.process(['*.subCollection'], expected, actual);\n    t.deepEqual(expected, actual);\n});\n\ntest((t) => {\n    //  it catches when collections are ambiguous and there is know way to know if the order is correct\n    let expected = [\n        {\n            subCollection: [\n               [1,2,3]\n            ]\n        }\n    ];\n\n    let actual = [\n        {\n            subCollection: [\n                [3,2,1]\n            ]\n        }\n    ];\n\n    UnorderedCollections.process(['*.subCollection'], expected, actual);\n    t.deepEqual(expected, actual);\n});"]}