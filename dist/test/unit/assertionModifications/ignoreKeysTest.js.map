{"version":3,"file":"ignoreKeysTest.js","sourceRoot":"","sources":["../../../../test/unit/assertionModifications/ignoreKeysTest.ts"],"names":[],"mappings":"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","sourcesContent":["import test from 'ava';\r\nimport { IgnoreKeys } from \"../../../src/lib/assertionModifications/IgnoreKeys\";\r\n\r\ntest(`keys are successfully removed from a basic object`, (t) => {\r\n  let actual = {\r\n    hello: 1,\r\n    world: 2\r\n  };\r\n\r\n  let expected = {\r\n    hello: 1,\r\n    world: 3\r\n  };\r\n\r\n  IgnoreKeys.process(['world'], actual, expected);\r\n  t.deepEqual(actual, expected);\r\n});\r\n\r\ntest(`keys are successfully removed from a collection of objects`, (t) => {\r\n  let actual = [\r\n    {\r\n      hello: 1,\r\n      world: 3\r\n    },\r\n    {\r\n      hello: 1,\r\n      world: 3\r\n    }\r\n  ];\r\n\r\n  let expected = [\r\n    {\r\n      hello: 1,\r\n      world: 3\r\n    },\r\n    {\r\n      hello: 1,\r\n      world: 3\r\n    }\r\n  ];\r\n\r\n  IgnoreKeys.process(['*.world'], actual, expected);\r\n  t.deepEqual(actual, expected);\r\n});\r\n\r\ntest(`keys are successfully removed from an object nested in a collection of objects`, (t) => {\r\n  let actual = [\r\n    {\r\n      hello: 1,\r\n      world: {\r\n        a: 'b',\r\n        c: 'd'\r\n      }\r\n    },\r\n    {\r\n      hello: 1,\r\n      world: {\r\n        a: 'b',\r\n        c: 'd'\r\n      }\r\n    }\r\n  ];\r\n\r\n  let expected = [\r\n    {\r\n      hello: 1,\r\n      world: {\r\n        a: 'wrong',\r\n        c: 'd'\r\n      }\r\n    },\r\n    {\r\n      hello: 1,\r\n      world: {\r\n        a: 'wrong',\r\n        c: 'd'\r\n      }\r\n    }\r\n  ];\r\n\r\n  IgnoreKeys.process(['*.world.a'], actual, expected);\r\n  t.deepEqual(actual, expected);\r\n});\r\n\r\ntest(`keys are successfully removed from an object using object syntax`, (t) => {\r\n  let actual = {\r\n    hello: 1,\r\n    world: {\r\n      a: 'b',\r\n      c: 'd'\r\n    }\r\n  };\r\n\r\n  let expected = {\r\n    hello: 1,\r\n    world: {\r\n      a: 'wrong',\r\n      c: 'd'\r\n    }\r\n  };\r\n\r\n  IgnoreKeys.process(\r\n    [\r\n      {\r\n        'world': 'a'\r\n      }\r\n    ],\r\n    actual,\r\n    expected\r\n  );\r\n  t.deepEqual(actual, expected);\r\n});\r\n\r\ntest(`keys are successfully removed from a collection of objects using object syntax`, (t) => {\r\n  let actual = [\r\n    {\r\n      hello: 1,\r\n      world: {\r\n        a: 'b',\r\n        c: 'd'\r\n      }\r\n    },\r\n    {\r\n      hello: 1,\r\n      world: {\r\n        a: 'b',\r\n        c: 'd'\r\n      }\r\n    }\r\n  ];\r\n\r\n  let expected = [\r\n    {\r\n      hello: 1,\r\n      world: {\r\n        a: 'wrong',\r\n        c: 'd'\r\n      }\r\n    },\r\n    {\r\n      hello: 1,\r\n      world: {\r\n        a: 'wrong',\r\n        c: 'd'\r\n      }\r\n    }\r\n  ];\r\n\r\n  IgnoreKeys.process(\r\n    [\r\n      {\r\n        '*': 'world.a'\r\n      }\r\n    ],\r\n    actual,\r\n    expected\r\n  );\r\n  t.deepEqual(actual, expected);\r\n});\r\n"]}