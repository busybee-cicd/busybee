{"version":3,"file":"SuiteEnvInfo.js","sourceRoot":"","sources":["../../../src/lib/SuiteEnvInfo.ts"],"names":[],"mappings":";;AAOA;IAmBE,sBAAY,SAA0B,EAAE,UAAkB,EAAE,YAAoB,EAAE,QAAgB;QAChG,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC;QACjC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC;QAC7C,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC;QAC3C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC;QACzC,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC;QAC7C,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;QACnC,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC,kBAAkB,CAAC;QACvD,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC;QAC5D,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC;QAC9D,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC;IAC9D,CAAC;IAED,+CAAwB,GAAxB,UAAyB,IAAY;QACnC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;IACpC,CAAC;IAED,+CAAwB,GAAxB;QACE,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC;IACpC,CAAC;IAED,8CAAuB,GAAvB,UAAwB,IAAY;QAClC,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;IACnC,CAAC;IAED,8CAAuB,GAAvB;QACE,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC;IACnC,CAAC;IACH,mBAAC;AAAD,CAAC,AAnDD,IAmDC;AAnDY,oCAAY","sourcesContent":["/*\r\nModels a specific instance of an Environment of a TestSuite.\r\n*/\r\nimport {ParsedTestSuite} from \"../models/config/parsed/ParsedTestSuiteConfig\";\r\nimport {ParsedTestSetConfig} from \"../models/config/parsed/ParsedTestSetConfig\";\r\nimport {RequestOptsConfig} from \"../models/config/common/RequestOptsConfig\";\r\nimport {TypedMap} from \"./TypedMap\";\r\nexport class SuiteEnvInfo {\r\n  startScript: string;\r\n  private startScriptReturnData: string;\r\n  private startScriptErrorData: string;\r\n  stopScript: string;\r\n  runScript: string;\r\n  healthcheck: any;\r\n  protocol: string;\r\n  defaultRequestOpts: RequestOptsConfig;\r\n  root: string;\r\n  suiteID: string;\r\n  suiteEnvID: string;\r\n  resourceCost: number;\r\n  hostName: string;\r\n  testSets: TypedMap<ParsedTestSetConfig>;\r\n  ports: number[];\r\n  startData: any;\r\n  stopData: any;\r\n\r\n  constructor(suiteConf: ParsedTestSuite, suiteEnvID: string, resourceCost: number, hostName: string) {\r\n    this.suiteID = suiteConf.suiteID;\r\n    this.suiteEnvID = suiteEnvID;\r\n    this.resourceCost = resourceCost;\r\n    this.hostName = hostName;\r\n    this.startScript = suiteConf.env.startScript;\r\n    this.stopScript = suiteConf.env.stopScript;\r\n    this.runScript = suiteConf.env.runScript;\r\n    this.healthcheck = suiteConf.env.healthcheck;\r\n    this.protocol = suiteConf.protocol;\r\n    this.defaultRequestOpts = suiteConf.defaultRequestOpts;\r\n    this.root = suiteConf.root;\r\n    this.testSets = suiteConf.testEnvs.get(suiteEnvID).testSets;\r\n    this.startData = suiteConf.testEnvs.get(suiteEnvID).startData;\r\n    this.stopData = suiteConf.testEnvs.get(suiteEnvID).stopData;\r\n  }\r\n\r\n  setStartScriptReturnData(data: string) {\r\n    this.startScriptReturnData = data;\r\n  }\r\n\r\n  getStartScriptReturnData(): string {\r\n    return this.startScriptReturnData;\r\n  }\r\n\r\n  setStartScriptErrorData(data: string) {\r\n    this.startScriptErrorData = data;\r\n  }\r\n\r\n  getStartScriptErrorData(): string {\r\n    return this.startScriptErrorData;\r\n  }\r\n}\r\n"]}