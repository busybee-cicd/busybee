{"version":3,"file":"RESTClient.js","sourceRoot":"","sources":["../../../src/lib/RESTClient.ts"],"names":[],"mappings":"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","sourcesContent":["import * as request from 'request';\r\nimport * as _ from 'lodash';\r\nimport {Logger} from './Logger';\r\nimport {RequestOptsConfig} from \"../models/config/common/RequestOptsConfig\";\r\nimport {IncomingMessage} from \"http\";\r\nimport {TestSetConfig} from \"../models/config/user/TestSetConfig\";\r\n\r\nexport class RESTClient {\r\n\r\n  conf: any;\r\n  suiteEnvConf: any;\r\n  apiRequest: any;\r\n  private logger: any;\r\n  private defaultRequestOpts: any;\r\n\r\n  constructor(conf: any, suiteEnvConf: any) {\r\n    this.conf = conf;\r\n    this.suiteEnvConf = Object.assign({}, suiteEnvConf);\r\n    this.logger = new Logger(conf, this);\r\n    const standardRequestOpts = {\"json\": true};\r\n    this.defaultRequestOpts = Object.assign({}, standardRequestOpts, this.suiteEnvConf.defaultRequestOpts);\r\n    this.apiRequest = request.defaults(this.defaultRequestOpts);\r\n\r\n    if (conf.debug) {\r\n      this.apiRequest.debug = true;\r\n    }\r\n  }\r\n\r\n  getDefaultRequestOpts() {\r\n    return Object.assign({}, this.defaultRequestOpts);\r\n  }\r\n\r\n  buildBaseUrl(requestConf, port) {\r\n    this.logger.trace('buildBaseUrl');\r\n    let protocol = this.suiteEnvConf.protocol;\r\n    let hostName = this.suiteEnvConf.hostName;\r\n\r\n    let url = `${protocol}://${hostName}`;\r\n    if (port) {\r\n      url += `:${port}`;\r\n    }\r\n\r\n    if (!_.isUndefined(requestConf.root)) {\r\n      // allow override of root from requestConf\r\n      if (requestConf.root != null) {\r\n        url += requestConf.root;\r\n      }\r\n    }\r\n    else if (this.suiteEnvConf.root) {\r\n      // else use root from resApi conf\r\n      url += this.suiteEnvConf.root;\r\n    }\r\n\r\n    return url;\r\n  }\r\n\r\n  buildRequest(requestConf: RequestOptsConfig, port: number) {\r\n    this.logger.trace(`buildRequestUrl <requestConf> ${port}`);\r\n    this.logger.trace(requestConf);\r\n\r\n    let url = this.buildBaseUrl(requestConf, port);\r\n    if (requestConf.endpoint) {\r\n      if (requestConf.endpoint.startsWith(\"/\")) {\r\n        url += requestConf.endpoint;\r\n      } else {\r\n        url += `/${requestConf.endpoint}`;\r\n      }\r\n    }\r\n\r\n    let req = {\r\n      method: requestConf.method || 'GET',\r\n      url: url,\r\n      timeout: requestConf.timeout || 30000 // default 30 seconds\r\n    };\r\n\r\n    if (requestConf.query) { req['qs'] = requestConf.query; }\r\n    if (requestConf.headers) { req['headers'] = requestConf.headers; }\r\n    if (requestConf.body) { req['body'] = requestConf.body; }\r\n\r\n    return req;\r\n  }\r\n\r\n\r\n  makeRequest(opts, cb: (err: Error, res: IncomingMessage, body: any) => void ) {\r\n    // run the test\r\n    this.logger.trace('Request opts');\r\n    this.logger.trace(opts);\r\n    this.apiRequest(opts, cb);\r\n  }\r\n}\r\n"]}