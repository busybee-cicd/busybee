{"version":3,"file":"RESTClient.js","sourceRoot":"","sources":["../../../src/lib/RESTClient.ts"],"names":[],"mappings":"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","sourcesContent":["import * as request from 'request-promise';\r\nimport * as _ from 'lodash';\r\nimport { Logger, LoggerConf } from 'busybee-util';\r\nimport { RequestOptsConfig } from '../models/config/common/RequestOptsConfig';\r\nimport { BusybeeParsedConfig } from '../models/config/BusybeeParsedConfig';\r\n\r\nexport class RESTClient {\r\n  conf: BusybeeParsedConfig;\r\n  suiteEnvConf: any;\r\n  apiRequest: any;\r\n  private logger: any;\r\n  private defaultRequestOpts: any;\r\n\r\n  constructor(conf: BusybeeParsedConfig, suiteEnvConf) {\r\n    this.conf = _.cloneDeep(conf);\r\n    this.suiteEnvConf = _.cloneDeep(suiteEnvConf);\r\n    const loggerConf = new LoggerConf(this, conf.logLevel, null);\r\n    this.logger = new Logger(loggerConf);\r\n    const standardRequestOpts = {\r\n      json: true,\r\n      resolveWithFullResponse: true, // don't resolve just the body (request-promise option)\r\n      simple: false // only reject() if the request fails for technical reasons (not status code other than 200, request-promise option).\r\n    };\r\n    this.defaultRequestOpts = Object.assign(\r\n      {},\r\n      standardRequestOpts,\r\n      this.suiteEnvConf.defaultRequestOpts\r\n    );\r\n    this.apiRequest = request.defaults(this.defaultRequestOpts);\r\n\r\n    // if (conf.debug) {\r\n    //   this.apiRequest.debug = true;\r\n    // }\r\n  }\r\n\r\n  getDefaultRequestOpts() {\r\n    return Object.assign({}, this.defaultRequestOpts);\r\n  }\r\n\r\n  buildBaseUrl(requestConf, port) {\r\n    this.logger.trace('buildBaseUrl');\r\n    let protocol = this.suiteEnvConf.protocol;\r\n    let hostName = this.suiteEnvConf.hostName;\r\n\r\n    let url = `${protocol}://${hostName}`;\r\n    if (port) {\r\n      url += `:${port}`;\r\n    }\r\n\r\n    if (!_.isUndefined(requestConf.root)) {\r\n      // allow override of root from requestConf\r\n      if (requestConf.root != null) {\r\n        url += requestConf.root;\r\n      }\r\n    } else if (this.suiteEnvConf.root) {\r\n      // else use root from resApi conf\r\n      url += this.suiteEnvConf.root;\r\n    }\r\n\r\n    return url;\r\n  }\r\n\r\n  buildRequest(requestConf: RequestOptsConfig, port: number) {\r\n    this.logger.trace(`buildRequestUrl <requestConf> ${port}`);\r\n    this.logger.trace(requestConf);\r\n\r\n    let url = this.buildBaseUrl(requestConf, port);\r\n    if (requestConf.path) {\r\n      if (requestConf.path.startsWith('/')) {\r\n        url += requestConf.path;\r\n      } else {\r\n        url += `/${requestConf.path}`;\r\n      }\r\n    }\r\n\r\n    let req = {\r\n      method: requestConf.method || 'GET',\r\n      url: url,\r\n      timeout: requestConf.timeout || 30000 // default 30 seconds\r\n    };\r\n\r\n    if (requestConf.query) {\r\n      req['qs'] = requestConf.query;\r\n    }\r\n    if (requestConf.headers) {\r\n      req['headers'] = requestConf.headers;\r\n    }\r\n    if (requestConf.body) {\r\n      req['body'] = requestConf.body;\r\n    }\r\n\r\n    return req;\r\n  }\r\n\r\n  makeRequest(opts) {\r\n    // run the test\r\n    this.logger.trace('Request opts');\r\n    this.logger.trace(opts);\r\n    return this.apiRequest(opts);\r\n  }\r\n}\r\n"]}