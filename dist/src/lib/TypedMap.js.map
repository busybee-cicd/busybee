{"version":3,"file":"TypedMap.js","sourceRoot":"","sources":["../../../src/lib/TypedMap.ts"],"names":[],"mappings":";;AAAA;IAKE;QACE,IAAI,CAAC,KAAK,GAAc,EAAE,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAS,EAAE,CAAC;IAC1B,CAAC;IAED,sBAAG,GAAH,UAAI,GAAW,EAAE,KAAQ;QACvB,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACpC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;YACxC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACvB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;QAC9B,CAAC;IACH,CAAC;IAED,sBAAG,GAAH,UAAI,GAAW;QACb,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACpC,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED,uBAAI,GAAJ;QACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,yBAAM,GAAN;QACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,yBAAM,GAAN,UAAO,GAAG;QACR,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACpC,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC;QACT,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC5B,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAChC,CAAC;IAED,yBAAM,GAAN;QAAA,iBAOC;QANC,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC;YACtB,GAAG,CAAC,CAAC,CAAC,GAAG,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;IAED,0BAAO,GAAP,UAAQ,EAAE;QAAV,iBAIC;QAHC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC;YACtB,EAAE,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;IACL,CAAC;IAEH,eAAC;AAAD,CAAC,AA7DD,IA6DC;AA7DY,4BAAQ","sourcesContent":["export class TypedMap<T> {\r\n\r\n  private _keys: string[];\r\n  private _values: T[];\r\n\r\n  constructor() {\r\n    this._keys = <string[]> [];\r\n    this._values = <T[]> [];\r\n  }\r\n\r\n  set(key: string, value: T): void {\r\n    let index = this._keys.indexOf(key);\r\n    if (index == -1) {\r\n      this._values[this._keys.length] = value;\r\n      this._keys.push(key);\r\n    } else {\r\n      this._values[index] = value;\r\n    }\r\n  }\r\n\r\n  get(key: string): T {\r\n    let index = this._keys.indexOf(key);\r\n    if (index === -1) {\r\n      return null;\r\n    }\r\n    return this._values[index];\r\n  }\r\n\r\n  keys(): string[] {\r\n    return this._keys;\r\n  }\r\n\r\n  values(): T[] {\r\n    return this._values;\r\n  }\r\n\r\n  remove(key): void {\r\n    let index = this._keys.indexOf(key);\r\n    if (index === -1) {\r\n      return;\r\n    }\r\n\r\n    this._keys.splice(index, 1);\r\n    this._values.splice(index, 1);\r\n  }\r\n\r\n  toJSON() {\r\n    let ret = {};\r\n    this._keys.forEach((k, i) => {\r\n      ret[k] = this._values[i];\r\n    });\r\n\r\n    return ret;\r\n  }\r\n\r\n  forEach(fn) {\r\n    this._keys.forEach((k, i) => {\r\n      fn(this._values[i], k);\r\n    });\r\n  }\r\n\r\n}\r\n"]}