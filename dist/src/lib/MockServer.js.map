{"version":3,"file":"MockServer.js","sourceRoot":"","sources":["../../../src/lib/MockServer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from 'express';\r\nconst server = express();\r\nimport * as bodyParser from 'body-parser';\r\nimport * as _ from 'lodash';\r\nimport * as hash from 'object-hash';\r\nimport * as httpProxy from 'http-proxy';\r\nlet restream = require('./restream');\r\nimport * as qs from 'querystring';\r\nimport {Logger} from './Logger';\r\nimport {ParsedTestSuite} from \"../models/config/parsed/ParsedTestSuiteConfig\";\r\nimport {BusybeeParsedConfig} from \"../models/config/BusybeeParsedConfig\";\r\nimport {MockServerConfig} from \"../models/config/common/MockServerConfig\";\r\nimport {ParsedTestEnvConfig} from \"../models/config/parsed/ParsedTestEnvConfig\";\r\nimport {ParsedTestSetConfig} from \"../models/config/parsed/ParsedTestSetConfig\";\r\nimport {RESTTest} from \"../models/RESTTest\";\r\n\r\nexport class MockServer {\r\n\r\n  private conf: BusybeeParsedConfig;\r\n  private testSuiteConf: ParsedTestSuite;\r\n  private logger: Logger;\r\n  private routeMap: any;\r\n  private proxy: any;\r\n\r\n  constructor(testSuiteConf: ParsedTestSuite, conf: BusybeeParsedConfig) {\r\n    this.conf = conf;\r\n    this.testSuiteConf = testSuiteConf;\r\n    this.logger = new Logger(conf, this);\r\n    this.logger.info('Initializing Mock Server');\r\n    this.routeMap = {}; // store the routes and all of the known request combos for each route\r\n\r\n    let serverConf: MockServerConfig = this.testSuiteConf.mockServer;\r\n    if (serverConf && serverConf.proxy && !conf.noProxy) {\r\n      this.logger.info(`Proxy config detected`);\r\n      if (!serverConf.proxy.protocol || !serverConf.proxy.host || !serverConf.proxy.port) {\r\n        this.logger.warn(`WARNING: mockServer proxy configuration does not contain required properties 'protocol', 'host' and 'port' \\n Requests will not be proxied`);\r\n      } else {\r\n        let proto = serverConf.proxy.protocol;\r\n        let host = serverConf.proxy.host;\r\n        let port = serverConf.proxy.port;\r\n        this.logger.info(`Creating proxy: ${proto}://${host}:${port}`);\r\n        this.proxy = new httpProxy.createProxyServer({\r\n          target: {\r\n            host: serverConf.proxy.host,\r\n            port: serverConf.proxy.port\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    server.set('etag', false);\r\n    server.use(bodyParser.json()); // for parsing application/json\r\n    server.use(restream(null));\r\n    server.use(bodyParser.urlencoded({extended: true})); // for parsing application/x-www-form-urlencoded\r\n    if (this.corsActive()) {\r\n      server.use((req, res, next) => {\r\n        res.append('Access-Control-Allow-Origin', req.header('origin'));\r\n        res.append('Access-Control-Allow-Credentials', 'true');\r\n        next();\r\n      });\r\n    }\r\n    this.buildRoutes();\r\n\r\n    let port = this.getServerPort();\r\n    server.listen(port, () => {\r\n      this.logger.info(`Mock Server listening on ${port}`)\r\n    });\r\n  }\r\n\r\n  getServerPort() {\r\n    let conf = this.testSuiteConf;\r\n    let port = conf.ports[0];\r\n    if (conf.mockServer && conf.mockServer.port) {\r\n      port = conf.mockServer.port;\r\n    }\r\n\r\n    return port;\r\n  }\r\n\r\n  corsActive() {\r\n    return this.testSuiteConf.mockServer.cors !== false\r\n  }\r\n\r\n  buildRoutes() {\r\n    // setup cors by default\r\n    if (this.corsActive()) {\r\n      this.logger.debug('CORS active');\r\n\r\n      server.options('*', (req, res, next) => {\r\n        let headers = {\r\n          'busybee-mock': true,\r\n          'Access-Control-Allow-Methods': 'GET,POST,DELETE,PUT,OPTIONS',\r\n          'Access-Control-Allow-Headers': req.header('Access-Control-Request-Headers'),\r\n          'Access-Control-Max-Age': 86400\r\n        }\r\n\r\n        _.forEach(headers, (v: string, k) => {\r\n          res.append(k, v);\r\n        });\r\n\r\n        return res.status(200).end();\r\n      });\r\n    }\r\n\r\n    // build the routeMap\r\n    this.logger.trace('testSuiteConf');\r\n    this.logger.trace(this.testSuiteConf.testEnvs, true);\r\n    this.testSuiteConf.testEnvs.forEach((testEnv: ParsedTestEnvConfig, envId: string) => {\r\n      testEnv.testSets.forEach((testSet: ParsedTestSetConfig, testSetName: string) => {\r\n        testSet.tests.forEach((test: RESTTest) => {\r\n          let pass = false;\r\n          if (test.expect && test.expect.status && !_.isFunction(test.expect.body)) {\r\n            pass = true;\r\n          } else if (test.mock\r\n            && test.mock.response\r\n            && test.mock.response.status\r\n            && test.mock.response.body) {\r\n              pass = true;\r\n          }\r\n\r\n          if (pass) {\r\n            this.updateRouteMap(test);\r\n          }\r\n        });\r\n      });\r\n    })\r\n\r\n    // iterate the routeMap and register each route to the server\r\n    _.each(this.routeMap, (reqMethodMap, path) => {\r\n      this.addRoute(path, reqMethodMap);\r\n    });\r\n\r\n    // add a special catchall route for the proxy if necessary\r\n    if (this.proxy) {\r\n      server.all('*', (req, res, next) => {\r\n        this.logger.info('No Mock found, proxying request');\r\n        this.logger.info(`${req.method} ${req.originalUrl}`);\r\n        // if a call makes it here then it just needs to be proxied\r\n        req = this.injectRequestOpts(req);\r\n        this.proxy.web(req, res);\r\n      });\r\n    }\r\n  }\r\n\r\n  // build an path that accounts for the root context\r\n  getEndpoint(mock: RESTTest) {\r\n    this.logger.trace(`getEndpoint`);\r\n    this.logger.trace(mock, true);\r\n\r\n    let path = mock.request.path;\r\n    if (!_.isUndefined(mock.request.root)) {\r\n      if (mock.request.root) { // allow users to set request.root to override mockServer.root && testSuiteConf.root when mocking\r\n        path = `${mock.request.root}${path}`;\r\n      } // else they passed null or false and we should not prepend a root (effectively overwriting mockServer.root or testSuiteConf.root\r\n    } else if (!_.isUndefined(this.testSuiteConf.mockServer.root)) {\r\n      if (this.testSuiteConf.mockServer.root != null) { // allow users to set mockServer.root to false to override testSuiteConf.root when mocking\r\n        path = `${this.testSuiteConf.mockServer.root}${path}`;\r\n      }\r\n    } else if (this.testSuiteConf.root) {\r\n      path = `${this.testSuiteConf.root}${path}`;\r\n    }\r\n\r\n    this.logger.trace(path);\r\n    return path;\r\n  }\r\n\r\n  updateRouteMap(mock: RESTTest) {\r\n    // // update the mockResponse with the globally applied headers according to the conf. (if any)\r\n    // if (this.testSuiteConf.mockServer.injectedRequestOpts) {\r\n    //   delete this.testSuiteConf.mockServer.injectedRequestOpts['description'];\r\n    //   mockResponse.request = Object.assign({}, this.testSuiteConf.mockServer.injectedRequestOpts, mockResponse.request);\r\n    // }\r\n\r\n    // build an path that accounts for the root context\r\n    let path = this.getEndpoint(mock);\r\n    if (!this.routeMap[path]) {\r\n      this.routeMap[path] = {\r\n        get: {200: []},\r\n        post: {200: []},\r\n        put: {200: []},\r\n        delete: {200: []},\r\n        head: {200: []},\r\n        options: {200: []}\r\n      };\r\n    }\r\n    // 1. see if this req has already been recorded (could be in multiple sets)\r\n    let request = mock.request;\r\n    let requestOpts = this.buildReqOpts(request);\r\n    // query params come into the controller as strings ALWAYS. so make sure our mockResponse query params are string\r\n    if (requestOpts.query) {\r\n      requestOpts.query = this.convertObjValuesToStrings(requestOpts.query);\r\n    }\r\n\r\n    let hashedReq = hash(requestOpts);\r\n    // 1a. search the this.routeMap[test.request.path] for it using the hash\r\n    let method = request.method.toLocaleLowerCase();\r\n    let resStatus = (mock.mock && mock.mock.response) ? mock.mock.response.status : mock.expect.status; // default to mockResponse\r\n\r\n    if (this.routeMap[path][method]) {\r\n      if (this.routeMap[path][method][resStatus]) {\r\n        if (_.find(this.routeMap[path][method], (reqInfo) => {\r\n            return reqInfo.hash === hashedReq\r\n          })) {\r\n          // skip this one it exists\r\n          return\r\n        }\r\n      } else {\r\n        this.routeMap[path][method][resStatus] = []\r\n      }\r\n    } else {\r\n      this.logger.info(`The method ${method} is not currently support for mocks`);\r\n      return\r\n    }\r\n\r\n    // 2. register the request info for this route\r\n    this.routeMap[path][method][resStatus].push(Object.assign({}, mock, {hash: hashedReq}, {matcherOpts: requestOpts}));\r\n  }\r\n\r\n  addRoute(path, reqMethodMap) {\r\n    this.logger.debug(`addRoute ${path}, ${JSON.stringify(reqMethodMap)}`);\r\n\r\n    _.forEach(reqMethodMap, (statusMap, methodName) => {\r\n      // 1. build a controller\r\n      let ctrl = async(req, res) => {\r\n        this.logger.trace(req.path);\r\n        // First we check to see if the requester wants a mockResponse with a specific status. If not, we default to 200\r\n        let requestedStatus = 200;\r\n        if (req.header('busybee-mock-status')) {\r\n          requestedStatus = parseInt(req.header('busybee-mock-status'));\r\n          if (!_.isInteger(requestedStatus)) {\r\n            return res.status(404).send(`busybee-mock-status must be an Integer, was '${req.header('busybee-mock-status')}'`)\r\n          }\r\n        }\r\n\r\n        // get the mocks for this statusCode\r\n        let mocks = statusMap[requestedStatus];\r\n        let reqOpts = this.buildReqOpts(req);\r\n        this.logger.trace('INCOMING REQ OPTS');\r\n        this.logger.trace(reqOpts, true);\r\n        let hashedReq = hash(reqOpts);\r\n\r\n        // find all mocks for this route and method that have the same hash of query/body params\r\n        let matchingMocks = _.filter(mocks, (m) => {\r\n          this.logger.trace('TESTING AGAINST');\r\n          this.logger.trace(m.matcherOpts, true);\r\n          this.logger.trace(`${m.hash} == ${hashedReq}`);\r\n          return m.hash === hashedReq;\r\n        });\r\n\r\n        if (!matchingMocks || matchingMocks.length === 0) {\r\n          if (this.proxy) {\r\n            this.proxy.web(req, res);\r\n          } else {\r\n            res.status(404).end();\r\n          }\r\n          return;\r\n        }\r\n\r\n        /*\r\n         now we need to inspect the headers. our mockResponse may only care about 1 or 2 headers\r\n         but a request can have many more and therfore we can't just hash the whole thing\r\n         and use that to compare on. we need to look for just the ones\r\n         mentioned in the mockResponse.\r\n         */\r\n        let mocksWithoutHeaders = [];\r\n        let mocksWithHeaders = new Array<RESTTest>();\r\n        matchingMocks.forEach((m) => {\r\n          this.logger.trace('checking mock');\r\n          // mocks that don't have headers defined don't need to match. IF this array only has 1 item\r\n          // and we don't have any addition matchingMocks with header needs, it will get returned as a default.\r\n          if (!m.request.headers) {\r\n            // mockResponse doesn't require any headers, it passes\r\n            this.logger.trace(`mock doesn't require any headers`);\r\n            return mocksWithoutHeaders.push(m);\r\n          }\r\n\r\n          // inject any request opts\r\n          req = this.injectRequestOpts(req);\r\n          let reqHeaders = req.headers;\r\n\r\n          // to remove comparison errors, convert numbers to strings in both header objs\r\n          reqHeaders = this.convertObjValuesToStrings(reqHeaders); // convert any numbers to strings\r\n          let mockHeaders = this.convertObjValuesToStrings(m.request.headers);  // convert any numbers to strings\r\n          this.logger.trace('mockHeaders');\r\n          this.logger.trace(mockHeaders, true);\r\n          let headersPass = true;\r\n          _.forEach(mockHeaders, (value, headerName) => {\r\n            if (value == null) {\r\n              // if the header is null then that implies that we don't want to check for this header\r\n              this.logger.trace(`mock headerName ${headerName} set to null, skipping match attempt`);\r\n              return;\r\n            }\r\n            if (reqHeaders[headerName] !== value) {\r\n              this.logger.trace(`${headerName} - ${reqHeaders[headerName]} !== ${value}`);\r\n              headersPass = false;\r\n            }\r\n          });\r\n          if (headersPass) {\r\n            this.logger.trace(`Mock Passes - ${m.id}`);\r\n            mocksWithHeaders.push(m);\r\n          }\r\n        });\r\n\r\n\r\n        let mockToReturn;\r\n        this.logger.trace(\"mocksWithoutHeaders\");\r\n        this.logger.trace(mocksWithoutHeaders, true);\r\n        this.logger.trace(\"mocksWithHeaders\");\r\n        this.logger.trace(mocksWithHeaders, true);\r\n        if (mocksWithHeaders.length == 1) {\r\n          // mocksWithHeaders matched more deeply with the request (query+body+headers)\r\n          // we should prioritize these if we have an exact match\r\n          mockToReturn = mocksWithHeaders[0];\r\n        }\r\n        else if (mocksWithoutHeaders.length == 1) {\r\n          // see if we have a single mockResponse without headers\r\n          mockToReturn = mocksWithoutHeaders[0];\r\n        } else {\r\n          if (this.proxy) {\r\n            this.logger.info(\"No mock matches request but proxy available. Proxying request\");\r\n            return this.proxy.web(req, res);\r\n          } else {\r\n            if (mocksWithoutHeaders.length == 0 && mocksWithHeaders.length == 0) {\r\n              let message = \"This request did not match any mocks and no proxy is available.\";\r\n              return res.status(404).json({err: message});\r\n            } else {\r\n              let message = \"This request is ambiguous due to multiple mocks sharing the name header requirements.\";\r\n              return res.status(404).json({\r\n                err: message,\r\n                mocksInQuestion: mocksWithoutHeaders.concat(mocksWithHeaders)\r\n              });\r\n            }\r\n          }\r\n        }\r\n\r\n        // set headers\r\n        res.append('busybee-mock', true);\r\n        let resHeaders;\r\n        let mockResponse = (mockToReturn.mock && mockToReturn.mock.response) // default to test.mock.response and then attempt 'expect'\r\n          ? mockToReturn.mock.response\r\n          : mockToReturn.expect;\r\n        if (mockResponse) {\r\n          resHeaders = Object.assign({}, resHeaders, mockResponse);\r\n        }\r\n        if (mockResponse) {\r\n          _.forEach(resHeaders, (v, k) => {\r\n            if (v == null) {\r\n              return;\r\n            }\r\n            res.append(k, v);\r\n          });\r\n        }\r\n\r\n        // check for a delay\r\n        if (mockToReturn.mock && mockToReturn.mock.lag) {\r\n          await this.sleep(mockToReturn.mock.lag);\r\n        }\r\n\r\n        let bodyToReturn = mockResponse.body;\r\n        return res.status(mockResponse.status).json(bodyToReturn);\r\n      } // end ctrl\r\n\r\n      // 2. register the route/method and ctrl\r\n      this.logger.info(`Registering path ${path} : ${methodName}`);\r\n      server[methodName](path, ctrl);\r\n    });\r\n  }\r\n\r\n  buildReqOpts(req): any {\r\n    let opts = <any>{};\r\n\r\n    if (!_.isEmpty(req.query)) {\r\n      opts.query = req.query\r\n    }\r\n\r\n    if (!_.isEmpty(req.body)) {\r\n      opts.body = req.body\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  convertObjValuesToStrings(obj) {\r\n    let newObj = {}\r\n    _.forEach(obj, (value, key) => {\r\n      if (_.isObject(value)) {\r\n        newObj[key] = this.convertObjValuesToStrings(value);\r\n      } else {\r\n        if (!_.isNil(value)) {\r\n          newObj[key] = value.toString();\r\n          if (newObj[key]) {\r\n            newObj[key] = qs.unescape(newObj[key])\r\n          }\r\n        } else {\r\n          newObj[key] = value;\r\n        }\r\n      }\r\n    });\r\n\r\n    return newObj;\r\n  }\r\n\r\n  injectRequestOpts(req) {\r\n    let mockServerConf = this.testSuiteConf.mockServer;\r\n\r\n    if (mockServerConf.injectedRequestOpts) {\r\n      ['headers', 'query', 'body'].forEach((target) => {\r\n        if (mockServerConf.injectedRequestOpts[target]) {\r\n          this.logger.trace(`injectedRequestOpts.${target} detected. Injecting ${target}`);\r\n          req[target] = Object.assign({}, mockServerConf.injectedRequestOpts[target], req[target]);\r\n          this.logger.trace(`${target} injected`);\r\n          this.logger.trace(req[target], true);\r\n        }\r\n      });\r\n    }\r\n\r\n    return req;\r\n  }\r\n\r\n  sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n}\r\n"]}