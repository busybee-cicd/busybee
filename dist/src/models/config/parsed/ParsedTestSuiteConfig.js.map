{"version":3,"file":"ParsedTestSuiteConfig.js","sourceRoot":"","sources":["../../../../../src/models/config/parsed/ParsedTestSuiteConfig.ts"],"names":[],"mappings":";;AAGA,6DAA0D;AAC1D,kDAA+C;AAE/C,6DAA0D;AAC1D,+DAA4D;AAC5D,uDAAoD;AACpD,8CAA2C;AAC3C,0BAA4B;AAE5B;IAeE,yBAAY,KAAsB,EAAE,IAAY,EAAE,cAAuC,EAAE,gBAAkC;QAC3H,IAAI,CAAC,MAAM,GAAG,IAAI,eAAM,CAAC,EAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,EAAC,EAAE,IAAI,CAAC,CAAC;QAC7E,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC,kBAAkB,CAAC;QACnD,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;QACnC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;QAC/B,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,EAAE,CAAC;QACxB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC;QACjC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;QAEnC,IAAI,CAAC,QAAQ,GAAG,IAAI,mBAAQ,EAAuB,CAAC;QACpD,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,EAAE,cAAc,EAAE,gBAAgB,CAAC,CAAC;IACjE,CAAC;IAED,oCAAU,GAAV,UAAW,SAA0B,EAAE,IAAY,EAAE,cAAuC,EAAE,gBAAkC;QAAhI,iBAiEC;QA/DC,oFAAoF;QACpF,2CAA2C;QAC3C,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,IAAI,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC;YACnF,IAAI,oBAAoB,GAAG,IAAI,yCAAmB,CAAC,IAAI,CAAC,CAAC;YACzD,IAAI,GAAG,GAAG,IAAI,6BAAa,EAAE,CAAC;YAC9B,GAAG,CAAC,EAAE,GAAG,SAAS,CAAC;YACnB,IAAI,oBAAoB,GAAG,IAAI,yCAAmB,CAAC,GAAG,CAAC,CAAC;YACxD,oBAAoB,CAAC,EAAE,GAAG,SAAS,CAAC;YACpC,oBAAoB,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,oBAAoB,CAAC,CAAC;YAEnE,IAAI,kBAAkB,GAAG,IAAI,qCAAiB,EAAE,CAAC;YACjD,kBAAkB,CAAC,QAAQ,GAAG,EAAE,CAAC;YACjC,kBAAkB,CAAC,EAAE,GAAG,SAAS,CAAC;YAClC,IAAI,cAAc,GAAG,IAAI,6BAAa,EAAE,CAAC;YACzC,cAAc,CAAC,EAAE,GAAG,SAAS,CAAC;YAC9B,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACjD,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;gBAC5B,SAAS,CAAC,YAAY,GAAG,EAAE,CAAC;YAC9B,CAAC;YACD,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YAChD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,oBAAoB,CAAC,CAAC;QACrD,CAAC;QAED,mEAAmE;QACnE,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,WAA8B;YAC5D,qFAAqF;YACrF,2CAA2C;YAC3C,yBAAyB;YACzB,uCAAuC;YACvC,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YACjC,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;YAE/C,IAAI,mBAAmB,GAAG,IAAI,yCAAmB,CAAC,WAAW,CAAC,CAAC;YAC/D,gBAAgB,CAAC,GAAG,CAAC,mBAAmB,CAAC,UAAU,EAAE,KAAI,CAAC,OAAO,CAAC,CAAC;YAEnE,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACzB,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,WAA0B;oBACtD,IAAI,mBAAmB,GAAG,IAAI,yCAAmB,CAAC,WAAW,CAAC,CAAC;oBAE/D,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iBAAe,WAAW,CAAC,EAAI,CAAC,CAAC;oBACnD,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,yBAAuB,mBAAmB,CAAC,EAAI,CAAC,CAAC;oBACnE,yCAAyC;oBACzC,EAAE,CAAC,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;wBAC7D,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAY,WAAW,CAAC,EAAE,8BAA2B,CAAC,CAAC;wBACxE,MAAM,CAAC;oBACT,CAAC;oBAED,yCAAyC;oBACzC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC;oBAEtE,6BAA6B;oBAC7B,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC1D,cAAc,CAAC,GAAG,CAAC,mBAAmB,CAAC,EAAE,EAAE,IAAI,KAAK,EAAE,CAAC,CAAC;oBAC1D,CAAC;oBAED,cAAc,CAAC,GAAG,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;gBAClF,CAAC,CAAC,CAAC;YACL,CAAC;YAED,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,mBAAmB,CAAC,UAAU,EAAE,mBAAmB,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAC5C,CAAC;IAEH,sBAAC;AAAD,CAAC,AApGD,IAoGC;AApGY,0CAAe","sourcesContent":["import {MockServerConfig} from \"../common/MockServerConfig\";\r\nimport {RequestOptsConfig} from \"../common/RequestOptsConfig\";\r\nimport {EnvConfig} from \"../common/EnvConfig\";\r\nimport {ParsedTestEnvConfig} from \"./ParsedTestEnvConfig\";\r\nimport {TypedMap} from \"../../../lib/TypedMap\";\r\nimport {TestSuiteConfig} from \"../user/TestSuiteConfig\";\r\nimport {ParsedTestSetConfig} from \"./ParsedTestSetConfig\";\r\nimport {EnvInstanceConfig} from \"../user/EnvInstanceConfig\";\r\nimport {TestSetConfig} from \"../user/TestSetConfig\";\r\nimport {Logger} from \"../../../lib/Logger\";\r\nimport * as _ from 'lodash';\r\n\r\nexport class ParsedTestSuite {\r\n  suiteID: string;\r\n  type: string;\r\n  skip: boolean;\r\n  protocol: string;\r\n  host: string;\r\n  ports: number[];\r\n  defaultRequestOpts: RequestOptsConfig;\r\n  mockServer: MockServerConfig;\r\n  env: EnvConfig;\r\n  testEnvs: TypedMap<ParsedTestEnvConfig>;\r\n  root: string;\r\n  testFolder: string;\r\n  private logger: Logger;\r\n\r\n  constructor(suite: TestSuiteConfig, mode: string, testSet2EnvMap: TypedMap<Array<string>>, env2TestSuiteMap: TypedMap<string>) {\r\n    this.logger = new Logger({logLevel: process.env['BUSYBEE_LOG_LEVEL']}, this);\r\n    this.defaultRequestOpts = suite.defaultRequestOpts;\r\n    this.env = suite.env;\r\n    this.mockServer = suite.mockServer;\r\n    this.ports = suite.ports;\r\n    this.protocol = suite.protocol;\r\n    this.host = suite.host;\r\n    this.suiteID = suite.id;\r\n    this.skip = suite.skip;\r\n    this.type = suite.type || 'REST';\r\n    this.root = suite.root;\r\n    this.testFolder = suite.testFolder;\r\n\r\n    this.testEnvs = new TypedMap<ParsedTestEnvConfig>();\r\n    this.parseSuite(suite, mode, testSet2EnvMap, env2TestSuiteMap);\r\n  }\r\n\r\n  parseSuite(testSuite: TestSuiteConfig, mode: string, testSet2EnvMap: TypedMap<Array<string>>, env2TestSuiteMap: TypedMap<string>) {\r\n\r\n    // assign a default env to this TestSuite IF this is a REST TestSuite to cover cases\r\n    // where the user doesn't specify a testEnv\r\n    if (!testSuite.type || (testSuite.type && testSuite.type.toUpperCase() === 'REST')) {\r\n      let defaultParsedTestEnv = new ParsedTestEnvConfig(null);\r\n      let tsc = new TestSetConfig();\r\n      tsc.id = 'default';\r\n      let defaultParsedTestSet = new ParsedTestSetConfig(tsc);\r\n      defaultParsedTestSet.id = 'default';\r\n      defaultParsedTestEnv.testSets.set('default', defaultParsedTestSet);\r\n\r\n      let defaultEnvInstance = new EnvInstanceConfig();\r\n      defaultEnvInstance.testSets = [];\r\n      defaultEnvInstance.id = 'default';\r\n      let defaultTestSet = new TestSetConfig();\r\n      defaultTestSet.id = 'default';\r\n      defaultEnvInstance.testSets.push(defaultTestSet);\r\n      if (!testSuite.envInstances) {\r\n        testSuite.envInstances = [];\r\n      }\r\n      testSuite.envInstances.push(defaultEnvInstance);\r\n      this.testEnvs.set('default', defaultParsedTestEnv);\r\n    }\r\n\r\n    // iterate each user userConfigFile env defined for this testSuite.\r\n    testSuite.envInstances.forEach((testEnvConf: EnvInstanceConfig) => {\r\n      // rename the env's id to suiteEnvID for clarity later 'id' gets thrown around a lot.\r\n      // testEnvConf.suiteEnvID = testEnvConf.id;\r\n      // delete testEnvConf.id;\r\n      // add this env to the env2TestSuiteMap\r\n      this.logger.trace('testEnvConf');\r\n      this.logger.trace(JSON.stringify(testEnvConf));\r\n\r\n      let parsedTestEnvConfig = new ParsedTestEnvConfig(testEnvConf);\r\n      env2TestSuiteMap.set(parsedTestEnvConfig.suiteEnvID, this.suiteID);\r\n\r\n      if (testEnvConf.testSets) {\r\n        testEnvConf.testSets.forEach((testSetConf: TestSetConfig) => {\r\n          let parsedTestSetConfig = new ParsedTestSetConfig(testSetConf);\r\n\r\n          this.logger.trace(`testSetConf ${testSetConf.id}`);\r\n          this.logger.trace(`parsedTestSetConfig ${parsedTestSetConfig.id}`);\r\n          // if this testSet already exists skip it\r\n          if (parsedTestEnvConfig.testSets.get(parsedTestSetConfig.id)) {\r\n            this.logger.info(`Test set ${testSetConf.id} already exists. Skipping`);\r\n            return;\r\n          }\r\n\r\n          // add the set to the parsedTestEnvConfig\r\n          parsedTestEnvConfig.testSets.set(testSetConf.id, parsedTestSetConfig);\r\n\r\n          // store env lookup for later\r\n          if (_.isEmpty(testSet2EnvMap.get(parsedTestSetConfig.id))) {\r\n            testSet2EnvMap.set(parsedTestSetConfig.id, new Array());\r\n          }\r\n\r\n          testSet2EnvMap.get(parsedTestSetConfig.id).push(parsedTestEnvConfig.suiteEnvID);\r\n        });\r\n      }\r\n\r\n      this.testEnvs.set(parsedTestEnvConfig.suiteEnvID, parsedTestEnvConfig);\r\n    });\r\n\r\n    this.logger.trace(('done parsing suite'));\r\n  }\r\n\r\n}\r\n"]}