{"version":3,"file":"BusybeeParsedConfig.js","sourceRoot":"","sources":["../../../../src/models/config/BusybeeParsedConfig.ts"],"names":[],"mappings":"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","sourcesContent":["import * as uuidv1 from 'uuid/v1';\r\nimport {TestSuiteConfig} from \"./user/TestSuiteConfig\";\r\nimport {BusybeeUserConfig} from \"./BusybeeUserConfig\";\r\nimport {Logger, LoggerConf} from 'busybee-util';\r\nimport * as glob from 'glob';\r\nimport * as fs from 'fs';\r\nimport * as _ from 'lodash';\r\nimport * as path from 'path';\r\nimport {EnvResourceConfig} from \"./common/EnvResourceConfig\";\r\nimport {ParsedTestSuite} from \"./parsed/ParsedTestSuiteConfig\";\r\nimport {FilePathsConfig} from \"./parsed/FilePathsConfig\";\r\nimport {TypedMap} from \"../../lib/TypedMap\";\r\nimport {RESTTest} from \"../RESTTest\";\r\nimport {ParsedTestEnvConfig} from \"./parsed/ParsedTestEnvConfig\";\r\nimport {ParsedTestSetConfig} from \"./parsed/ParsedTestSetConfig\";\r\n\r\nexport class BusybeeParsedConfig {\r\n  private logger: Logger;\r\n  private testSet2EnvMap = new TypedMap<Array<string>>();\r\n  private env2TestSuiteMap = new TypedMap<string>();\r\n  private testFiles: string[] = [];\r\n  private skipTestSuites: string[] = [];\r\n  private envInstancesToRun: string[] = [];\r\n  private skipEnvProvisioning: string[] = [];\r\n\r\n  filePaths: FilePathsConfig;\r\n  cmdOpts: any;\r\n  logLevel: string;\r\n  parsedTestSuites: TypedMap<ParsedTestSuite>;\r\n  envResources: EnvResourceConfig[];\r\n  onComplete: string;\r\n  reporters: Array<any>;\r\n  localMode: boolean = false;\r\n  noProxy: boolean = false;\r\n  webSocketPort: number;\r\n\r\n  constructor(userConfig: BusybeeUserConfig, cmdOpts: any, mode: string) {\r\n    this.cmdOpts = Object.assign({}, cmdOpts); // TODO make sure nothing references this directly from this point\r\n    this.logLevel = this.getLogLevel();\r\n    const loggerConf = new LoggerConf(this, this.logLevel, null);\r\n    this.logger = new Logger(loggerConf);\r\n    this.parseCmdOpts();\r\n    this.filePaths = new FilePathsConfig(this.cmdOpts);\r\n    this.onComplete = userConfig.onComplete;\r\n    this.parsedTestSuites = this.parseTestSuites(userConfig, mode);\r\n    this.envResources = userConfig.envResources;\r\n    this.reporters = userConfig.reporters;\r\n\r\n    if (this.localMode) {\r\n      this.logger.info(`LocalMode detected. Host Configuration will be ignored in favor of 'localhost'`);\r\n    }\r\n  }\r\n\r\n  parseCmdOpts() {\r\n    if (this.cmdOpts.skipTestSuite) {\r\n      this.skipTestSuites = this.cmdOpts.skipTestSuite.split(',');\r\n    }\r\n    if (this.cmdOpts.skipEnvProvisioning) {\r\n      this.skipEnvProvisioning = this.cmdOpts.skipEnvProvisioning.split(',');\r\n    }\r\n    if (this.cmdOpts.testFiles) {\r\n      this.testFiles = this.cmdOpts.testFiles.split(',');\r\n    }\r\n    if (this.cmdOpts.envInstances) {\r\n      this.envInstancesToRun = this.cmdOpts.envInstances.split(',');\r\n    }\r\n    if (this.cmdOpts.localMode) {\r\n      this.localMode = this.cmdOpts.localMode;\r\n    }\r\n    if (this.cmdOpts.onComplete) {\r\n      this.onComplete = this.cmdOpts.onComplete;\r\n    }\r\n    if (this.cmdOpts.noProxy) {\r\n      this.noProxy = true;\r\n    }\r\n    if (this.cmdOpts.wsserver) {\r\n      this.webSocketPort = this.cmdOpts.wsserver;\r\n    }\r\n  }\r\n\r\n  getEnvInstancesToRun(): string[] {\r\n    return this.envInstancesToRun;\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      parsedTestSuites: this.parsedTestSuites,\r\n      envResources: this.envResources,\r\n      logLevel: this.logLevel\r\n    }\r\n  }\r\n\r\n  getTestSet2EnvMap(): TypedMap<Array<string>> {\r\n    return this.testSet2EnvMap;\r\n  }\r\n\r\n  getEnv2TestSuiteMap(): TypedMap<string> {\r\n    return this.env2TestSuiteMap;\r\n  }\r\n\r\n  getSkipEnvProvisioning(): string[] {\r\n    return [...this.skipEnvProvisioning];\r\n  }\r\n\r\n  parseTestSuites(userConf: BusybeeUserConfig, mode: string): TypedMap<ParsedTestSuite> {\r\n    this.logger.trace(`parseTestSuites`);\r\n    let parsedTestSuites = new TypedMap<ParsedTestSuite>();\r\n    // see if the user specified to skip testSuites\r\n\r\n    // TODO: figure out why we can only pass 1 testSuite when in mock mode. in theory we should be able to parse all\r\n    // test suites regardless of mode. However, if we do...for some reason the test suite to be mocked does not include\r\n    // any tests.\r\n    if (mode === 'mock') {\r\n      let testSuite = _.find(userConf.testSuites, (suite) => {\r\n        return suite.id == this.cmdOpts.testSuite;\r\n      });\r\n      let parsedTestSuite = this.parseTestSuite(testSuite, mode);\r\n      parsedTestSuites.set(parsedTestSuite.suiteID, parsedTestSuite);\r\n    } else {\r\n      userConf.testSuites.forEach((testSuite) => {\r\n        let suiteID = testSuite.id || uuidv1();\r\n        this.logger.trace(`suiteID: ${suiteID}`);\r\n        this.logger.trace(`skipTestSuites: ${JSON.stringify(this.skipTestSuites)}`);\r\n        if (_.find(this.skipTestSuites, (sID) => {\r\n            return sID === suiteID;\r\n          })) {\r\n          this.logger.trace(`Skipping testSuite: ${suiteID}`);\r\n          return;\r\n        }\r\n\r\n        // parse this testSuite\r\n        let parsedTestSuite = this.parseTestSuite(testSuite, mode);\r\n        parsedTestSuites.set(parsedTestSuite.suiteID, parsedTestSuite);\r\n        this.logger.trace(parsedTestSuites);\r\n      });\r\n    }\r\n\r\n    return this.parseTestFiles(parsedTestSuites, mode);\r\n  }\r\n\r\n  parseTestSuite(testSuite: TestSuiteConfig, mode: string): ParsedTestSuite {\r\n    this.logger.trace(`parseTestSuite ${testSuite.id} ${mode}`);\r\n\r\n    // create an id for this testSuite\r\n    return new ParsedTestSuite(testSuite, mode, this.testSet2EnvMap, this.env2TestSuiteMap);\r\n  }\r\n\r\n  /*\r\n   Discovers any test files, parses them, and inserts them into the testSuites/envs that they belong\r\n   */\r\n  parseTestFiles(parsedTestSuites: TypedMap<ParsedTestSuite>, mode: string) {\r\n    this.logger.trace(`parseTestFiles`);\r\n    this.logger.trace(this.env2TestSuiteMap, true);\r\n    this.logger.trace(this.testSet2EnvMap, true);\r\n    // build up a list of testFolders\r\n    let testFolders = [];\r\n    parsedTestSuites.values().map(pst => {\r\n      if (pst.testFolder) {\r\n        testFolders.push(path.join(this.filePaths.busybeeDir, pst.testFolder, '/**/*.json'));\r\n        testFolders.push(path.join(this.filePaths.busybeeDir, pst.testFolder, '/**/*.js'));\r\n      }\r\n    });\r\n\r\n    let files = glob.sync(`{${testFolders.join(',')}}`, {ignore: `${this.filePaths.userConfigFile}`});\r\n\r\n    // parse json files, compile testSets and add them to the conf.\r\n    this.logger.info(\"parsing files...\");\r\n    files.forEach((file: string) => {\r\n      // support for running specific tests files\r\n      if (this.testFiles.length > 0 && !_.find(this.testFiles, (fileName) => {\r\n          return file.endsWith(fileName);\r\n        })) {\r\n        this.logger.info(`skipping ${file}`);\r\n        return;\r\n      } else {\r\n        this.logger.info(`parsing ${file}`);\r\n      }\r\n\r\n      // require all .js and .json files\r\n      let tests;\r\n      if (file.endsWith('.js')) {\r\n        tests = require(file);\r\n      } else {\r\n        tests = JSON.parse(fs.readFileSync(file, 'utf8').toString());\r\n      }\r\n\r\n      // ensure that all of our testFiles return arrays of tests and not just a single test object\r\n      if (!Array.isArray(tests)) {\r\n        tests = [tests];\r\n        this.logger.trace(\"is not array of tests\");\r\n      }\r\n\r\n      tests.forEach((test) => {\r\n        this.logger.trace(test);\r\n        test = new RESTTest(test);\r\n\r\n        // run through various business logic scenarios to determine if the current test should be parsed\r\n        if (test.skip) {\r\n          return;\r\n        }\r\n\r\n        if (mode === 'test') {\r\n          if (!test.expect || (!test.expect.status && !test.expect.body && !test.expect.headers)) {\r\n            this.logger.debug(`test.expect not defined for ${test.id}. Skipping`);\r\n            return;\r\n          }\r\n        }\r\n        if (mode === 'mock') {\r\n          test.testSet = {id: 'default'}\r\n          if (!test.expect && !test.mockResponse) {\r\n            this.logger.warn(`test.expect && test.mockResponse not defined for ${test.id}. Cannot mock!`);\r\n            return;\r\n          }\r\n        }\r\n\r\n        if (_.isUndefined(test.testSet)) {\r\n          this.logger.info(`test '${test.id}' does not contain required prop 'testSet'. Skipping`);\r\n          return;\r\n        }\r\n\r\n        // support multiple testSets\r\n        if (!Array.isArray(test.testSet)) {\r\n          test.testSet = [test.testSet];\r\n        }\r\n\r\n        // iterate each testSet entry for this test (1 test can run in multiple testSets)\r\n        test.testSet.forEach((testSetInfo) => {\r\n          this.logger.trace(`testSetInfo`);\r\n          this.logger.trace(testSetInfo, true);\r\n\r\n          // find any environment ids where this TestSet is present\r\n          let testEnvIds = this.testSet2EnvMap.get(testSetInfo.id); // a TestSet can appear in more than 1 env\r\n          if (!testEnvIds) {\r\n            this.logger.warn(`Unable to identify the Test Environment(s) containing the testSetId '${testSetInfo.id}'.`);\r\n            return;\r\n          }\r\n\r\n          // for every testEnv that this testSet exists, update it with this testSet\r\n          testEnvIds.forEach(testEnvId => {\r\n            this.logger.trace(`testEnvId`);\r\n            this.logger.trace(testEnvId);\r\n            let suiteID = this.env2TestSuiteMap.get(testEnvId);\r\n            if (_.isUndefined(testSetInfo.index)) {\r\n              // push it on the end\r\n              parsedTestSuites.get(suiteID).testEnvs.get(testEnvId).testSets.get(testSetInfo.id).testsUnordered.push(test);\r\n              // if (testSetInfo.id === 'asset management') {\r\n              //   this.logger.debug(parsedTestSuites.get(suiteID).testEnvs.get(testEnvId).testSets.get(testSetInfo.id), true);\r\n              // }\r\n            } else {\r\n              // insert it at the proper index, fill any empty spots along the way\r\n              let existingTests = parsedTestSuites.get(suiteID).testEnvs.get(testEnvId).testSets.get(testSetInfo.id).tests;\r\n              let newArrLength = testSetInfo.index + 1;\r\n              if (existingTests && existingTests.length > newArrLength) {\r\n                // we need to extend the length of the array to add this at the proper index.\r\n                newArrLength = existingTests.length;\r\n              }\r\n\r\n              // create an array of nulls of the current known maxLength and fill it back in.\r\n              Array(newArrLength).fill(null).forEach((d, i) => {\r\n                if (i == testSetInfo.index) {\r\n                  parsedTestSuites.get(suiteID).testEnvs.get(testEnvId).testSets.get(testSetInfo.id).tests[i] = test;\r\n                } else {\r\n                  if (!existingTests[i]) {\r\n                    parsedTestSuites.get(suiteID).testEnvs.get(testEnvId).testSets.get(testSetInfo.id).tests[i] = null;\r\n                  }\r\n                }\r\n              });\r\n            }\r\n\r\n            // this.logger.trace(`testSet updated`);\r\n            // this.logger.trace(parsedTestSuites.get(suiteID).testEnvs.get(testEnvId).testSets.get(testSetInfo.id));\r\n          });\r\n          })\r\n      });\r\n    });\r\n\r\n    // zip up any tests/unorderedTests\r\n    parsedTestSuites.forEach((pts: ParsedTestSuite, ptsId: string) => {\r\n      pts.testEnvs.forEach((te: ParsedTestEnvConfig, teId: string) => {\r\n        te.testSets.forEach((ts: ParsedTestSetConfig, tsId: string) => {\r\n          ts.tests = ts.tests.concat(ts.testsUnordered);\r\n        });\r\n      })\r\n    });\r\n\r\n    return parsedTestSuites;\r\n  }\r\n\r\n  getLogLevel() {\r\n    let logLevel;\r\n\r\n    if (process.env['BUSYBEE_DEBUG']) {\r\n      logLevel = Logger.DEBUG;\r\n    } else if (process.env['LOG_LEVEL']) {\r\n      if (Logger.isLogLevel(process.env['LOG_LEVEL'])) {\r\n        logLevel = process.env['LOG_LEVEL'];\r\n      }\r\n    } else if (this.cmdOpts) {\r\n      if (this.cmdOpts.debug) {\r\n        logLevel = Logger.DEBUG;\r\n      } else if (this.cmdOpts.logLevel) {\r\n        if (Logger.isLogLevel(this.cmdOpts.logLevel)) {\r\n          logLevel = this.cmdOpts.logLevel;\r\n        }\r\n      }\r\n    }\r\n\r\n    return logLevel;\r\n  }\r\n}\r\n"]}