{"version":3,"file":"MockServerConfig.js","sourceRoot":"","sources":["../../../../../src/models/config/common/MockServerConfig.ts"],"names":[],"mappings":";;AAEA;IAuBE;QACE,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC;QACpB,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;IACrB,CAAC;IACH,uBAAC;AAAD,CAAC,AA9BD,IA8BC;AA9BY,4CAAgB","sourcesContent":["import {ProxyConfig} from \"../user/ProxyConfig\";\r\nimport {RequestOptsConfig} from \"./RequestOptsConfig\";\r\nexport class MockServerConfig {\r\n  /**\r\n   * Port to run the mock server on. defaults to the port defined in the TestSuite being mocked\r\n   */\r\n  port: number;\r\n  /**\r\n   *  A root context that should be prepended to paths defined in a TestSuite and/or Test\r\n   */\r\n  root: string;\r\n  /**\r\n   * The location of a service to forward calls to in the event that a mock is not found for an incoming request\r\n   */\r\n  proxy: ProxyConfig;\r\n  /**\r\n   * @hidden\r\n   */\r\n  cors: boolean;\r\n  /**\r\n   * Allows UI developers to mimic an intermediate service which may decorate the request with additional headers, params, body, etc.\r\n   * Opts specified in this section will be merged into the request once it arrives at the Mock Server but before attempting to match a mocked test.\r\n   */\r\n  injectedRequestOpts: RequestOptsConfig;\r\n\r\n  constructor() {\r\n    this.port = void 0;\r\n    this.root = void 0;\r\n    this.proxy = void 0;\r\n    this.injectedRequestOpts = void 0;\r\n    this.cors = void 0;\r\n  }\r\n}\r\n"]}