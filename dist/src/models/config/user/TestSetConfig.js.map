{"version":3,"file":"TestSetConfig.js","sourceRoot":"","sources":["../../../../../src/models/config/user/TestSetConfig.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;GAaG;AACH;IA+BE;QACE,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,CAAC;QACjB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC;QAC1B,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC;QACtB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC;QAC1B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC;IAC1B,CAAC;IACH,oBAAC;AAAD,CAAC,AAvCD,IAuCC;AAvCY,sCAAa","sourcesContent":["/**\r\n * A TestSet is a logical grouping of tests. One or more TestSets can be assigned to an environment instance.\r\n * Tests can be run in a specific order with-in a TestSet (see RESTTest.testSet)\r\n * ```\r\n * {\r\n *   id: 'users',\r\n *   controlFlow: 'parallel',\r\n *   runData: {\r\n *     user: 'admin',\r\n *   },\r\n *   description: 'runs all User CRUD tests'\r\n * }\r\n * ```\r\n */\r\nexport class TestSetConfig {\r\n  /**\r\n   * **Example** `users`<br>\r\n   * <span style=\"color:red\">**Required**</span> <br>\r\n   * unique id (name) assigned to the TestSet\r\n   */\r\n  id: string;\r\n  /**\r\n   * **Allowed** `parallel` `series`\r\n   */\r\n  controlFlow: string;\r\n  /**\r\n   * *<span style=\"color:magenta\">**Allowed** if `TestSuiteConfig.type` == `USER_PROVIDED` is enabled</span>* <br>\r\n   * Data that will be passed to the runScript as `runData` when this environment instance is started\r\n   */\r\n  /**\r\n   * Applicable only when `controlFlow` == `parallel`. Sets the number of tests than can be run simultaneously for the TestSet\r\n   */\r\n  controlFlowLimit: number\r\n\r\n  runData: any;\r\n\r\n  description: string;\r\n  /**\r\n   *  *<span style=\"color:magenta\">**Allowed** if `TestSuiteConfig.type` == `USER_PROVIDED` is enabled</span>* <br>\r\n   * A custom function that can be provided for asserting that the data returned from your runScript\r\n   * is correct. This is aids in the BusybeeTestResult being reported correctly. Without this, your TestSet will be marked as\r\n   * `pass = true` provided the runScript.sh does not write to STDERR or return 'BUSYBEE_ERROR'.\r\n   */\r\n  assertion: (returnDataString: string) => boolean|void\r\n\r\n  constructor() {\r\n    this.id = void 0;\r\n    this.controlFlow = void 0;\r\n    this.controlFlowLimit = void 0;\r\n    this.runData = void 0;\r\n    this.description = void 0;\r\n    this.assertion = void 0;\r\n  }\r\n}\r\n"]}