{"version":3,"file":"TestSuiteConfig.js","sourceRoot":"","sources":["../../../../../src/models/config/user/TestSuiteConfig.ts"],"names":[],"mappings":";;AAKA;;;;;;;;;;;;;;;;GAgBG;AACH;IAoEE;QACE,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC;QACpB,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC,CAAC;QACjC,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC;QAClB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,CAAC;QACzB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;QACnB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,CAAC;IAC3B,CAAC;IACH,sBAAC;AAAD,CAAC,AAlFD,IAkFC;AAlFY,0CAAe","sourcesContent":["import {RequestOptsConfig} from \"../common/RequestOptsConfig\";\r\nimport {EnvConfig} from \"../common/EnvConfig\";\r\nimport {EnvInstanceConfig} from \"./EnvInstanceConfig\";\r\nimport {MockServerConfig} from \"../common/MockServerConfig\";\r\n\r\n/**\r\n * The top-level of a\r\n *\r\n * {<br>\r\n *   id: 'API test suite',<br>\r\n *   type: 'REST',<br>\r\n *   skip: false,<br>\r\n *   env: EnvConfig,<br>\r\n *   envInstances: EnvInstanceConfig[],<br>\r\n *   protocol: 'http',<br>\r\n *   ports: [8080],<br>\r\n *   root: '/v1'<br>\r\n *   testFolder: 'api-tests',<br>\r\n *   defaultRequestOpts: RequestOptsConfig,<br>\r\n *   mockServer: MockServerConfig<br>\r\n * }\r\n */\r\nexport class TestSuiteConfig {\r\n  /**\r\n   * <span style=\"color:red\">**Required**</span> <br>\r\n   * A unique id for this Test Suite <br>\r\n   * **Example** `user test suite`\r\n   */\r\n  id: string;\r\n  /**\r\n   * <span style=\"color:red\">**Required**</span> <br>\r\n   * **Defaut** `REST` <br>\r\n   * **Allowed** `REST` `USER_PROVIDED` <br>\r\n   * Dictates how the Test Suite is parsed. Busybee has it's own REST api testing implementation. For all other test suites choose 'USER_PROVIDED'\r\n   */\r\n  type: string;\r\n  /**\r\n   * <span style=\"color:red\">**Required**</span> <br>\r\n   * Whether or not to skip this Test Suite\r\n   */\r\n  skip: boolean;\r\n  /**\r\n   * Provides properties for describing how to provision an environment for this TestSuite\r\n   */\r\n  env: EnvConfig;\r\n  /**\r\n   * Configuration for creating instances of this TestSuite's Environment. Allows the user to provide\r\n   * env-specific parameters to modify how TestSet(s) are run.\r\n   */\r\n  envInstances: EnvInstanceConfig[];\r\n  /**\r\n   * *<span style=\"color:magenta\">**Required** if `TestSuiteConfig.type` == `REST`</span>* <br>\r\n   * **Allowed** `http` `https`\r\n   */\r\n  protocol: string;\r\n  /**\r\n   * *<span style=\"color:magenta\">**Required** if `--skipEnvProvisioning` is enabled</span>* <br>\r\n   * **Example** `myhost` <br>\r\n   * Provide a host when you plan to run tests against an already running environment.\r\n   */\r\n  host: string;\r\n  /**\r\n   * *<span style=\"color:magenta\">**Required** if `TestSuiteConfig.type` == `REST`</span>* <br>\r\n   * Ports required by this suite. By default the first port supplied will be used for your\r\n   * healthcheck port if not specific in the HealthCheck\r\n   */\r\n  ports: number[];\r\n  /**\r\n   * *<span style=\"color:magenta\">Available if `TestSuiteConfig.type` == `REST`</span>* <br>\r\n   * **Example** `/v1` <br>\r\n   * root context of all api calls\r\n   */\r\n  root: string;\r\n  /**\r\n   * *<span style=\"color:magenta\">Available if `TestSuiteConfig.type` == `REST`</span>* <br>\r\n   * **Example** `apiTests/` <br>\r\n   * The directory containing your REST .js/.json test definitions.\r\n   */\r\n  testFolder: string;\r\n  /**\r\n   * *<span style=\"color:magenta\">Available if `TestSuiteConfig.type` == `REST`</span>* <br>\r\n   * Request params to be sent by default on each api request. defaultRequestOpts can be overridden with-in individual tests.\r\n   */\r\n  defaultRequestOpts: RequestOptsConfig;\r\n  /**\r\n   * *<span style=\"color:magenta\">Available if `TestSuiteConfig.type` == `REST`</span>* <br>\r\n   * Provide a configuration for running your REST TestSuite in 'mock' mode\r\n   */\r\n  mockServer: MockServerConfig;\r\n\r\n  constructor() {\r\n    this.id = void 0;\r\n    this.type = void 0;\r\n    this.skip = void 0;\r\n    this.protocol = void 0;\r\n    this.host = void 0;\r\n    this.ports = void 0;\r\n    this.defaultRequestOpts = void 0;\r\n    this.env = void 0;\r\n    this.envInstances = void 0;\r\n    this.mockServer = void 0;\r\n    this.root = void 0;\r\n    this.testFolder = void 0;\r\n  }\r\n}\r\n"]}