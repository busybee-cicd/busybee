{"version":3,"file":"RESTTest.js","sourceRoot":"","sources":["../../../src/models/RESTTest.ts"],"names":[],"mappings":";;AAAA,uEAAoE;AACpE,iEAAmD;AACnD,mDAAgD;AAChD,6CAA0C;AAE1C,0BAA4B;AAC5B,uCAAsC;AAEtC;;;;;;;;;;;;;;;GAeG;AACH;IA0CE,kBAAY,IAAS;QACnB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QAClB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACpC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,UAAC,EAAE,IAAO,MAAM,CAAC,IAAI,yBAAW,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,yBAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACxI,CAAC;QACD,IAAI,CAAC,OAAO,GAAG,oCAAW,CAAC,qCAAiB,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5D,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,MAAM,GAAG,IAAI,+BAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAChD,CAAC;QACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAEtB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC1B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,IAAI,mBAAQ,CAAC,CAAC,CAAC,EAAf,CAAe,CAAC,CAAC;YACpD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,mBAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACvE,CAAC;QACH,CAAC;QAED,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;IACxC,CAAC;IACH,eAAC;AAAD,CAAC,AAhED,IAgEC;AAhEY,4BAAQ","sourcesContent":["import {RequestOptsConfig} from \"./config/common/RequestOptsConfig\";\r\nimport {deserialize} from 'json-typescript-mapper';\r\nimport {RESTTestExpect} from \"./RESTTestExpect\";\r\nimport {RESTTestSet} from './RESTTestSet';\r\n\r\nimport * as _ from 'lodash';\r\nimport { RESTMock } from \"./RESTMock\";\r\n\r\n/**\r\n * The definition of a REST Service Test. Also defines any additional mock behavior\r\n * for when Busybee is running in `mock` mode.\r\n *\r\n * ```\r\n * {\r\n *   id: 'My Test',\r\n *   description: 'This test is used to test something',\r\n *   testSet: RESTTestSet[],\r\n *   request : RequestOptsConfig,\r\n *   expect: RESTTestExpect,\r\n *   skip: false,\r\n *   mocks: RESTMock[]\r\n * }\r\n * ```\r\n */\r\nexport class RESTTest {\r\n  /**\r\n   * <span style=\"color:red\">**Required**</span> <br>\r\n   * Unique name of the test\r\n   */\r\n  id: string;\r\n  /**\r\n   * An optional description\r\n   */\r\n  description: string;\r\n  /**\r\n   * <span style=\"color:red\">**Required**</span> <br>\r\n   * The TestSet that this test should run with-in. A test can run in more than one TestSet if necessary\r\n   */\r\n  testSet: Array<RESTTestSet> | RESTTestSet;\r\n  /**\r\n   * Provided in milliseconds, will instruct Busybee to wait `n` milliseconds before making the request.\r\n   * Can be helpful when debugging potential race-conditions or simulating user-behavior\r\n   */\r\n  delayRequest: number;\r\n  /**\r\n   * <span style=\"color:red\">**Required**</span> <br>\r\n   * The Request that will be made to the REST Service\r\n   */\r\n  request: RequestOptsConfig;\r\n  /**\r\n   * The assertion of the response. If omitted the `mock` field must be provided for the file to have any value.\r\n   */\r\n  expect: RESTTestExpect;\r\n  /**\r\n   * If `true` this test will be skipped during parsing\r\n   */\r\n  skip: boolean;\r\n  /**\r\n   * Allows the user to provide a mock responses when busybee is running in `mock` mode. This field is required if\r\n   * the `expect` property contains Javascript Assertion Functions instead of Javascript Objects. In `mock` mode Busybee\r\n   * simply returns the `expect` objects as the mocked response. This will not work if you use functions and manually\r\n   * assert responses. When more than 1 mock is supplied the mock server will iterate through the responses as requests\r\n   * are made allowing the tester to simulate errors and inconsistent behavior.\r\n   */\r\n  mocks: RESTMock[];\r\n\r\n  constructor(data: any) {\r\n    this.id = data.id;\r\n    this.description = data.description;\r\n    if (data.testSet) {\r\n      this.testSet = _.isArray(data.testSet) ? _.map(data.testSet, (ts) => { return new RESTTestSet(ts); }) : new RESTTestSet(data.testSet);\r\n    }\r\n    this.request = deserialize(RequestOptsConfig, data.request);\r\n    if (data.expect) {\r\n      this.expect = new RESTTestExpect(data.expect);\r\n    }\r\n    this.skip = data.skip;\r\n\r\n    if (data.mocks) {\r\n      if (_.isArray(data.mocks)) {\r\n        this.mocks = data.mocks.map(m => new RESTMock(m));\r\n      } else {\r\n        this.mocks = _.isEmpty(data.mocks) ? [] : [new RESTMock(data.mocks)];\r\n      }\r\n    }\r\n\r\n    this.delayRequest = data.delayRequest;\r\n  }\r\n}\r\n"]}