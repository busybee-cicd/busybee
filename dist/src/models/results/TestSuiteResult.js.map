{"version":3,"file":"TestSuiteResult.js","sourceRoot":"","sources":["../../../../src/models/results/TestSuiteResult.ts"],"names":[],"mappings":";;AACA,mEAAkE;AAElE,0BAA4B;AAE5B;IAQE,yBAAY,EAAU,EAAE,IAAY,EAAE,QAA8B,EAAE,IAAa;QAJnF,aAAQ,GAAyB,EAAE,CAAC;QACpC,SAAI,GAAY,IAAI,CAAC;QACrB,YAAO,GAA2B,IAAI,+CAAsB,EAAE,CAAC;QAG7D,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAEhB,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAC7B,CAAC;IAED,sCAAY,GAAZ,UAAa,SAAoB;QAC/B,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC;IAED,qCAAW,GAAX,UAAY,WAAiC;QAC3C,2EAA2E;QAC3E,KAAqB,UAAW,EAAX,2BAAW,EAAX,yBAAW,EAAX,IAAW,EAAE;YAA7B,IAAI,QAAQ,oBAAA;YACf,IAAI,CAAC,OAAO,CAAC,gBAAgB,IAAI,CAAC,CAAC;YACnC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC7B,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;gBAClB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;aACnB;YAED,6DAA6D;YAC7D,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE;gBACxB,IAAI,CAAC,OAAO,CAAC,aAAa,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC;gBAEpD,IAAI,QAAQ,CAAC,IAAI,EAAE;oBACjB,+DAA+D;oBAC/D,IAAI,CAAC,OAAO,CAAC,mBAAmB,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC;iBAC3D;qBAAM;oBACL,IAAI,WAAW,GAAG,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAC,CAAC,IAAO,OAAO,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;oBAC9E,IAAI,CAAC,OAAO,CAAC,mBAAmB,IAAI,WAAW,CAAC,MAAM,CAAC;iBACxD;aACF;SACF;IACH,CAAC;IACH,sBAAC;AAAD,CAAC,AA3CD,IA2CC;AA3CY,0CAAe","sourcesContent":["import {TestSetResult} from \"./TestSetResult\";\r\nimport { TestSuiteResultSummary } from \"./TestSuiteResultSummary\";\r\nimport { EnvResult } from \"./EnvResult\";\r\nimport * as _ from 'lodash';\r\n\r\nexport class TestSuiteResult {\r\n\r\n  id: string;\r\n  type: string;\r\n  testSets: Array<TestSetResult> = [];\r\n  pass: boolean = true;\r\n  summary: TestSuiteResultSummary = new TestSuiteResultSummary();\r\n\r\n  constructor(id: string, type: string, testSets: Array<TestSetResult>, pass: boolean) {\r\n    this.id = id;\r\n    this.type = type;\r\n    this.pass = pass\r\n\r\n    this.addTestSets(testSets);\r\n  }\r\n\r\n  addEnvResult(envResult: EnvResult) {\r\n    this.addTestSets(envResult.testSets);\r\n  }\r\n\r\n  addTestSets(newTestSets: Array<TestSetResult>) {\r\n    // update the summary and add the testSetResults to the testSets collection\r\n    for (let tsResult of newTestSets) {\r\n      this.summary.numberOfTestSets += 1;\r\n      this.testSets.push(tsResult);\r\n      if (!tsResult.pass) {\r\n        this.pass = false;\r\n      }\r\n\r\n      // if type is REST then track individual test stats (for now)\r\n      if (this.type === \"REST\") {\r\n        this.summary.numberOfTests += tsResult.tests.length;\r\n\r\n        if (tsResult.pass) {\r\n          // if the ts is marked as pass then all of the tests passed too\r\n          this.summary.numberOfPassedTests += tsResult.tests.length;\r\n        } else {\r\n          let passedTests = _.filter(tsResult.tests, (t) => { return t.pass === true; })\r\n          this.summary.numberOfPassedTests += passedTests.length;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}