{"version":3,"file":"TestManager.js","sourceRoot":"","sources":["../../../src/managers/TestManager.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\r\nimport {Logger, LoggerConf} from 'busybee-util';\r\nimport {RESTSuiteManager} from './RESTSuiteManager';\r\nimport {GenericSuiteManager} from './GenericSuiteManager';\r\nimport {EnvManager} from \"./EnvManager\";\r\nimport {BusybeeParsedConfig} from \"../models/config/BusybeeParsedConfig\";\r\nimport {SuiteEnvInfo} from \"../lib/SuiteEnvInfo\";\r\nimport {EnvResult} from \"../models/results/EnvResult\";\r\nimport {ParsedTestSuite} from \"../models/config/parsed/ParsedTestSuiteConfig\";\r\nimport {ParsedTestEnvConfig} from \"../models/config/parsed/ParsedTestEnvConfig\";\r\nimport { TestWebSocketServer } from '../ws/TestWebSocketServer';\r\n\r\ninterface TestSuiteTasks {\r\n  [key: string]: TestSuiteTask;\r\n}\r\ninterface TestSuiteTask {\r\n  envResults: Promise<EnvResult>[]\r\n}\r\nexport class TestManager {\r\n\r\n  testSuiteTasks: TestSuiteTasks;\r\n  private conf: BusybeeParsedConfig;\r\n  private logger: Logger;\r\n  private envManager: EnvManager;\r\n  private wsServer: TestWebSocketServer;\r\n\r\n  constructor(conf: BusybeeParsedConfig, envManager: EnvManager) {\r\n    this.conf = _.cloneDeep(conf);\r\n    const loggerConf = new LoggerConf(this, conf.logLevel, null);\r\n    this.logger = new Logger(loggerConf);\r\n    this.envManager = envManager;\r\n    this.testSuiteTasks = {};\r\n    if (conf.webSocketPort) {\r\n      let wsConf = {\r\n        port: conf.webSocketPort,\r\n        logLevel: conf.logLevel\r\n      }\r\n      this.wsServer = new TestWebSocketServer(wsConf, this.envManager);\r\n    }\r\n  }\r\n\r\n  executeTestSuiteTasks() {\r\n    this.logger.trace('buildTestSuiteTasks');\r\n    let conf = this.conf;\r\n    conf.parsedTestSuites.forEach((testSuite: ParsedTestSuite, suiteID: string) => {\r\n      if (testSuite.skip) {\r\n        return;\r\n      }\r\n      // parse the envs of this TestSuite\r\n      this.testSuiteTasks[suiteID] = { envResults: [] };\r\n      this.logger.trace(suiteID);\r\n      this.logger.trace(testSuite);\r\n      this.logger.trace(`Processing ${suiteID} : type = ${testSuite.type}`);\r\n      testSuite.testEnvs.forEach((testEnv: ParsedTestEnvConfig, suiteEnvID: string) => {\r\n        this.logger.trace(`testEnv: ${testEnv}`);\r\n        this.logger.trace(`suiteEnvID: ${suiteEnvID}`);\r\n\r\n        // Check to see if a specific set of envId's has been passed. If so, only run those\r\n        if (this.conf.getEnvInstancesToRun().length > 0) {\r\n          if (this.conf.getEnvInstancesToRun().indexOf(suiteEnvID) === -1) {\r\n            this.logger.debug(`Skipping envInstance with id ${suiteEnvID}`);\r\n            return;\r\n          }\r\n        }\r\n\r\n        if (testSuite.type === 'USER_PROVIDED') {\r\n          this.testSuiteTasks[suiteID].envResults.push(this.executeTestEnvTask(suiteID, testEnv.suiteEnvID));\r\n        } else if (testSuite.type === 'REST' || _.isUndefined(testSuite.type)) {\r\n          // 1. make sure testSets exist for this testEnv\r\n          if (_.isEmpty(testEnv.testSets)) {\r\n            this.logger.trace(`testEnv ${testEnv.suiteEnvID} contains 0 testSets. skipping`);\r\n            return;\r\n          }\r\n          // 2. confirm the testSet contains tests\r\n          let hasTests = false;\r\n          testEnv.testSets.forEach((testSet) => {\r\n            if (testSet.tests && testSet.tests.length > 0) {\r\n              hasTests = true;\r\n              return false;\r\n            }\r\n          });\r\n          if (!hasTests) {\r\n            this.logger.trace(`testEnv ${testEnv.suiteEnvID} contains 0 tests. skipping`);\r\n            return;\r\n          }\r\n\r\n          this.testSuiteTasks[suiteID].envResults.push(this.executeRESTTestEnvTask(suiteID, testEnv.suiteEnvID));\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  async executeRESTTestEnvTask(suiteID: string, suiteEnvID: string): Promise<EnvResult>  {\r\n    this.logger.trace(`executeRESTTestEnvTask ${suiteID} ${suiteEnvID}`);\r\n\r\n    var generatedEnvID;\r\n\r\n    let currentEnv: SuiteEnvInfo;\r\n    let restManager: RESTSuiteManager;\r\n    let testSetResults;\r\n    let envResult = EnvResult.new('REST', suiteID, suiteEnvID);\r\n\r\n    let buildEnvFn = async () => {\r\n      generatedEnvID = this.envManager.generateId();\r\n\r\n      await this.envManager.start(generatedEnvID, suiteID, suiteEnvID);\r\n      currentEnv = this.envManager.getCurrentEnv(generatedEnvID);\r\n      // create a restmanager to handle these tests\r\n      restManager = new RESTSuiteManager(this.conf, currentEnv);\r\n      testSetResults = await restManager.runRESTApiTestSets(currentEnv); // returns an array of testSets\r\n      envResult.testSets = testSetResults;\r\n\r\n      return envResult;\r\n    };\r\n\r\n    try {\r\n      return await buildEnvFn();\r\n    } catch (e) {\r\n      this.logger.error(`buildRESTTestEnvTask: Error Encountered While Running Tests for ${generatedEnvID}`);\r\n      envResult.testSets = [];\r\n      envResult.error = e;\r\n      return envResult;\r\n    } finally {\r\n      try {\r\n        await this.envManager.stop(generatedEnvID);\r\n      } catch (e2) {\r\n        this.logger.error(`buildRESTTestEnvTask: Error Encountered While Stopping ${generatedEnvID}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /*\r\n   TODO: use the GenericSuiteManager to kick off tests\r\n   */\r\n  async executeTestEnvTask(suiteID, suiteEnvID): Promise<EnvResult>  {\r\n    this.logger.trace(`executeTestEnvTask ${suiteID} ${suiteEnvID}`);\r\n\r\n    let generatedEnvID = this.envManager.generateId();\r\n    let envResult = EnvResult.new('USER_PROVIDED', suiteID, suiteEnvID);\r\n\r\n    let buildEnvFn = async () => {\r\n      await this.envManager.start(generatedEnvID, suiteID, suiteEnvID);\r\n      let currentEnv: SuiteEnvInfo = this.envManager.getCurrentEnv(generatedEnvID);\r\n      // create a GenericSuiteManager to handle coordinating these tests\r\n      let suiteManager = new GenericSuiteManager(this.conf, currentEnv, this.envManager);\r\n      let testSetResults = await suiteManager.runTestSets(generatedEnvID);\r\n      \r\n      envResult.testSets = testSetResults;\r\n      return envResult;\r\n    }\r\n\r\n    try {\r\n      return await buildEnvFn();\r\n    } catch (e) {\r\n      this.logger.error(\"buildTestEnvTask: ERROR CAUGHT WHILE RUNNING TEST SETS\");\r\n      this.logger.error(e);\r\n      envResult.testSets = [];\r\n      envResult.error = e;\r\n\r\n      return envResult;\r\n    } finally {\r\n      try {\r\n        await this.envManager.stop(generatedEnvID);\r\n      } catch (e2) {\r\n        this.logger.error(`buildRESTTestEnvTask: Error Encountered While Stopping ${generatedEnvID}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  getTestWebSockerServer():TestWebSocketServer {\r\n    return this.wsServer;\r\n  }\r\n}\r\n"]}