{"version":3,"file":"TestManager.js","sourceRoot":"","sources":["../../../src/managers/TestManager.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\r\nimport {Logger} from \"../lib/Logger\";\r\nimport {RESTSuiteManager} from './RESTSuiteManager';\r\nimport {GenericSuiteManager} from './GenericSuiteManager';\r\nimport {EnvManager} from \"./EnvManager\";\r\nimport {BusybeeParsedConfig} from \"../models/config/BusybeeParsedConfig\";\r\nimport {SuiteEnvInfo} from \"../lib/SuiteEnvInfo\";\r\n\r\nexport class TestManager {\r\n\r\n  testSuiteTasks: any;\r\n  private conf: any;\r\n  private logger: Logger;\r\n  private envManager: EnvManager;\r\n\r\n  constructor(conf: BusybeeParsedConfig, envManager: EnvManager) {\r\n    this.conf = conf;\r\n    this.logger = new Logger(conf, this);\r\n    this.envManager = envManager;\r\n    this.testSuiteTasks = {};\r\n  }\r\n\r\n  buildTestSuiteTasks() {\r\n    this.logger.debug('buildTestSuiteTasks');\r\n    let conf = this.conf;\r\n    conf.parsedTestSuites.forEach((testSuite, suiteID) => {\r\n      if (testSuite.skip) { return; }\r\n      // parse the envs of this TestSuite\r\n      this.testSuiteTasks[suiteID] = { envTasks: [] };\r\n      //conf.parsedTestSuites[suiteID].envTasks = [];\r\n      this.logger.debug(suiteID);\r\n      this.logger.debug(testSuite);\r\n      this.logger.debug(`Processing ${suiteID} : type = ${testSuite.type}`);\r\n      testSuite.testEnvs.forEach((testEnv, suiteEnvID) => {\r\n        this.logger.debug(testEnv);\r\n\r\n        if (testSuite.type === 'USER_PROVIDED') {\r\n          this.testSuiteTasks[suiteID].envTasks.push(this.buildTestEnvTask(suiteID, testEnv.suiteEnvID));\r\n        } else if (testSuite.type === 'REST' || _.isUndefined(testSuite.type)) {\r\n          // 1. make sure testSets exist for this testEnv\r\n          if (_.isEmpty(testEnv.testSets)) {\r\n            this.logger.debug(`testEnv ${testEnv.suiteEnvID} contains 0 testSets. skipping`);\r\n            return;\r\n          }\r\n          // 2. confirm the testSet contains tests\r\n          let hasTests = false;\r\n          testEnv.testSets.forEach((testSet) => {\r\n            if (testSet.tests && testSet.tests.length > 0) {\r\n              hasTests = true;\r\n              return false;\r\n            }\r\n          });\r\n          if (!hasTests) {\r\n            this.logger.debug(`testEnv ${testEnv.suiteEnvID} contains 0 tests. skipping`);\r\n            return;\r\n          }\r\n\r\n          this.testSuiteTasks[suiteID].envTasks.push(this.buildRESTTestEnvTask(suiteID, testEnv.suiteEnvID));\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  buildRESTTestEnvTask(suiteID, suiteEnvID) {\r\n    this.logger.debug(`buildRESTTestEnvTask ${suiteID} ${suiteEnvID}`);\r\n\r\n    let generatedEnvID: string;\r\n    return (cb) => {\r\n      let currentEnv: SuiteEnvInfo;\r\n      let restManager: RESTSuiteManager;\r\n      let testSetResults;\r\n\r\n      let buildEnvFn = async () => {\r\n        generatedEnvID = this.envManager.generateId();\r\n        await this.envManager.start(generatedEnvID, suiteID, suiteEnvID);\r\n        currentEnv = this.envManager.getCurrentEnv(generatedEnvID);\r\n        // create a restmanager to handle these tests\r\n        restManager = new RESTSuiteManager(this.conf, currentEnv);\r\n        testSetResults = await restManager.runRESTApiTestSets(currentEnv); // returns an array of testSets\r\n\r\n        // decorate the results to build a better result object need to decorate this w/ testSuiteID\r\n        return {\r\n          suiteID: suiteID,\r\n          type: \"REST\",\r\n          env: suiteEnvID,\r\n          testSets: testSetResults\r\n        }\r\n      }\r\n\r\n      buildEnvFn()\r\n        .then((testSetResults) => {\r\n          this.envManager.stop(generatedEnvID)\r\n            .then(() => {\r\n              cb(null, testSetResults);\r\n            })\r\n            .catch((err) => {\r\n              cb(err);\r\n            });\r\n        })\r\n        .catch((err) => {\r\n          console.trace();\r\n          this.logger.error(\"buildRESTTestEnvTask: Error Encountered While Running Tests\");\r\n          this.logger.error(err);\r\n          this.envManager.stop(generatedEnvID)\r\n            .then(() => {\r\n              cb(err);\r\n            })\r\n            .catch((err2) => {\r\n              cb(err2)\r\n            });\r\n        });\r\n    };\r\n  }\r\n\r\n  /*\r\n    TODO: use the GenericSuiteManager to kick off tests\r\n  */\r\n  buildTestEnvTask(suiteID, suiteEnvID) {\r\n    this.logger.debug(`buildTestEnvTask ${suiteID} ${suiteEnvID}`);\r\n\r\n    let generatedEnvID = this.envManager.generateId();\r\n    return (cb) => {\r\n      let buildEnvFn = async () => {\r\n        await this.envManager.start(generatedEnvID, suiteID, suiteEnvID);\r\n        let currentEnv:SuiteEnvInfo = this.envManager.getCurrentEnv(generatedEnvID);\r\n        // create a restmanager to handle these tests\r\n        let suiteManager = new GenericSuiteManager(this.conf, currentEnv, this.envManager);\r\n        let testSetResults = await suiteManager.runTestSets(generatedEnvID);\r\n\r\n        return testSetResults;\r\n      }\r\n\r\n      buildEnvFn()\r\n        .then((testSetResults) => {\r\n          this.logger.debug(\"TEST SET SUCCESS\");\r\n          this.envManager.stop(generatedEnvID)\r\n            .then(() => { cb(null, testSetResults); })\r\n            .catch((err) => { cb(err); });\r\n        })\r\n        .catch((err) => {\r\n          this.logger.debug(\"buildTestEnvTask: ERROR CAUGHT WHILE RUNNING TEST SETS\");\r\n          this.logger.debug(err);\r\n          this.envManager.stop(generatedEnvID)\r\n            .then(() => { cb(err); })\r\n            .catch((err2) => cb(err2));\r\n        });\r\n    };\r\n  }\r\n}\r\n"]}