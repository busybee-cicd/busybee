{"version":3,"file":"GenericSuiteManager.js","sourceRoot":"","sources":["../../../src/managers/GenericSuiteManager.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\r\nimport * as path from 'path';\r\nimport {Logger} from '../lib/Logger';\r\nimport {EnvManager} from \"./EnvManager\";\r\nimport {ParsedTestSetConfig} from \"../models/config/parsed/ParsedTestSetConfig\";\r\nimport {SuiteEnvInfo} from \"../lib/SuiteEnvInfo\";\r\nimport {BusybeeParsedConfig} from \"../models/config/BusybeeParsedConfig\";\r\n\r\nexport class GenericSuiteManager {\r\n\r\n  private conf: BusybeeParsedConfig;\r\n  private suiteEnvConf: SuiteEnvInfo;\r\n  private envManager: EnvManager;\r\n  private logger: Logger;\r\n\r\n  constructor(conf: BusybeeParsedConfig, suiteEnvConf: SuiteEnvInfo, envManager: EnvManager) {\r\n    this.conf = _.cloneDeep(conf);\r\n    this.suiteEnvConf = suiteEnvConf;\r\n    this.envManager = envManager;\r\n    this.logger = new Logger(conf, this);\r\n  }\r\n\r\n  buildUrl(port) {\r\n    this.logger.trace(`buildUrl ${port}`);\r\n    let protocol = this.suiteEnvConf.protocol;\r\n    let hostName = this.suiteEnvConf.hostName;\r\n\r\n    let url = `${protocol}://${hostName}`;\r\n    if (port) {\r\n      url += `:${port}`;\r\n    }\r\n\r\n    return url;\r\n  }\r\n\r\n  runTestSets(generatedEnvID) {\r\n    // TODO: logic for running TestSets in order\r\n    return new Promise(async(resolve, reject) => {\r\n      this.logger.trace(`runTestSets ${this.suiteEnvConf.suiteID} ${this.suiteEnvConf.suiteEnvID}`);\r\n      this.logger.trace(this.suiteEnvConf, true);\r\n      let testSetPromises = this.suiteEnvConf.testSets.values().map((testSet) => {\r\n        return this.runTestSet(testSet, generatedEnvID);\r\n      });\r\n\r\n      let testSetResults;\r\n      let testSetErr;\r\n      try {\r\n        testSetResults = await Promise.all(testSetPromises);\r\n      } catch (e) {\r\n        testSetErr = e;\r\n      }\r\n\r\n      if (testSetErr) {\r\n        this.logger.trace(`runTestSets ERROR encountered while running testSetPromises`);\r\n        reject(testSetErr);\r\n      } else {\r\n        resolve(testSetResults);\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  async runTestSet(testSet: ParsedTestSetConfig, generatedEnvID: string) {\r\n    this.logger.trace(`runTestSet | ${this.suiteEnvConf.suiteID} | ${this.suiteEnvConf.suiteEnvID} | ${testSet.id}`);\r\n    this.logger.trace(testSet, true);\r\n    // run the script via envManager\r\n    let busybeeDir = this.conf.filePaths.busybeeDir;\r\n    let scriptPath = path.join(busybeeDir, this.suiteEnvConf.runScript);\r\n\r\n    let args = {\r\n      generatedEnvID: generatedEnvID,\r\n      protocol: this.suiteEnvConf.protocol,\r\n      hostName: this.suiteEnvConf.hostName,\r\n      ports: this.suiteEnvConf.ports,\r\n      busybeeDir: busybeeDir,\r\n      runData: testSet.runData\r\n    };\r\n\r\n    return this.envManager.runScript(scriptPath, [JSON.stringify(args)]);\r\n  }\r\n\r\n}\r\n"]}