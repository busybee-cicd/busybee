{"version":3,"file":"GenericSuiteManager.js","sourceRoot":"","sources":["../../../src/managers/GenericSuiteManager.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\r\nimport * as path from 'path';\r\nimport {Logger, LoggerConf} from 'busybee-util';\r\nimport {EnvManager} from \"./EnvManager\";\r\nimport {ParsedTestSetConfig} from \"../models/config/parsed/ParsedTestSetConfig\";\r\nimport {SuiteEnvInfo} from \"../lib/SuiteEnvInfo\";\r\nimport {BusybeeParsedConfig} from \"../models/config/BusybeeParsedConfig\";\r\nimport { TestSetResult } from '../models/results/TestSetResult';\r\n\r\nexport class GenericSuiteManager {\r\n\r\n  private conf: BusybeeParsedConfig;\r\n  private suiteEnvConf: SuiteEnvInfo;\r\n  private envManager: EnvManager;\r\n  private logger: Logger;\r\n\r\n  constructor(conf: BusybeeParsedConfig, suiteEnvConf: SuiteEnvInfo, envManager: EnvManager) {\r\n    this.conf = _.cloneDeep(conf);\r\n    this.suiteEnvConf = suiteEnvConf;\r\n    this.envManager = envManager;\r\n    const loggerConf = new LoggerConf(this, conf.logLevel, null);\r\n    this.logger = new Logger(loggerConf);\r\n  }\r\n\r\n  buildUrl(port) {\r\n    this.logger.trace(`buildUrl ${port}`);\r\n    let protocol = this.suiteEnvConf.protocol;\r\n    let hostName = this.suiteEnvConf.hostName;\r\n\r\n    let url = `${protocol}://${hostName}`;\r\n    if (port) {\r\n      url += `:${port}`;\r\n    }\r\n\r\n    return url;\r\n  }\r\n\r\n  runTestSets(generatedEnvID): Promise<Array<TestSetResult>> {\r\n    // TODO: logic for running TestSets in order\r\n    return new Promise(async(resolve, reject) => {\r\n      this.logger.trace(`runTestSets ${this.suiteEnvConf.suiteID} ${this.suiteEnvConf.suiteEnvID}`);\r\n      this.logger.trace(this.suiteEnvConf, true);\r\n      let testSetPromises = this.suiteEnvConf.testSets.values().map((testSet) => {\r\n        return this.runTestSet(testSet, generatedEnvID);\r\n      });\r\n\r\n      let testSetResults;\r\n      let testSetErr;\r\n      try {\r\n        testSetResults = await Promise.all(testSetPromises);\r\n      } catch (e) {\r\n        testSetErr = e;\r\n      }\r\n\r\n      if (testSetErr) {\r\n        this.logger.trace(`runTestSets ERROR encountered while running testSetPromises`);\r\n        reject(testSetErr);\r\n      } else {\r\n        resolve(testSetResults);\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  async runTestSet(testSet: ParsedTestSetConfig, generatedEnvID: string): Promise<TestSetResult> {\r\n    this.logger.trace(`runTestSet | ${this.suiteEnvConf.suiteID} | ${this.suiteEnvConf.suiteEnvID} | ${testSet.id}`);\r\n    this.logger.trace(testSet, true);\r\n    \r\n    let testSetResult = new TestSetResult();\r\n    testSetResult.id = testSet.id;\r\n    testSetResult.pass = true;\r\n    try {\r\n      // run the script via envManager. A script that writes to STDERR will be considered a TestSet failure.\r\n      let busybeeDir = this.conf.filePaths.busybeeDir;\r\n      let scriptPath = path.join(busybeeDir, this.suiteEnvConf.runScript);\r\n\r\n      let args = {\r\n        generatedEnvID: generatedEnvID,\r\n        protocol: this.suiteEnvConf.protocol,\r\n        hostName: this.suiteEnvConf.hostName,\r\n        ports: this.suiteEnvConf.ports,\r\n        busybeeDir: busybeeDir,\r\n        runData: testSet.runData\r\n      };\r\n\r\n      let returnData = await this.envManager.runScript(scriptPath, [JSON.stringify(args)]);\r\n      if (testSet.assertion) {\r\n        try {\r\n          // assertion() must explicity return false OR throw an Error to be considered failed\r\n          let assertionResult = testSet.assertion(returnData);\r\n          if (assertionResult === false) {\r\n            testSetResult.pass = false;\r\n          }\r\n        } catch (e) {\r\n          testSetResult.pass = false;\r\n          testSetResult.error = e;\r\n        }\r\n      }\r\n    } catch (e) {\r\n      testSetResult.pass = false\r\n      testSetResult.error = e;\r\n    }\r\n    \r\n    return testSetResult;\r\n  }\r\n\r\n}\r\n"]}