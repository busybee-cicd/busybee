{"version":3,"file":"RESTSuiteManager.js","sourceRoot":"","sources":["../../../src/managers/RESTSuiteManager.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _async from 'async';\r\nimport * as _ from 'lodash';\r\nimport {Logger} from '../lib/Logger';\r\nimport {RESTClient} from '../lib/RESTClient';\r\nimport {SuiteEnvInfo} from \"../lib/SuiteEnvInfo\";\r\nimport {ParsedTestSetConfig} from \"../models/config/parsed/ParsedTestSetConfig\";\r\nimport {RESTTest} from \"../models/RESTTest\";\r\nimport {IncomingMessage} from \"http\";\r\nimport {TestSetResult} from \"../models/results/TestSetResult\";\r\nimport {IgnoreKeys} from \"../lib/assertionModifications/IgnoreKeys\";\r\nimport {UnorderedCollections} from \"../lib/assertionModifications/UnorderedCollections\";\r\n\r\n// support JSON.stringify on Error objects\r\nif (!('toJSON' in Error.prototype))\r\n    Object.defineProperty(Error.prototype, 'toJSON', {\r\n        value: function () {\r\n            var alt = {};\r\n\r\n            Object.getOwnPropertyNames(this).forEach(function (key) {\r\n                alt[key] = this[key];\r\n            }, this);\r\n\r\n            return alt;\r\n        },\r\n        configurable: true,\r\n        writable: true\r\n    });\r\n\r\nexport class RESTSuiteManager {\r\n\r\n    private conf: any;\r\n    private logger: Logger;\r\n    private restClient: any;\r\n\r\n    constructor(conf, suiteEnvConf) {\r\n        this.conf = conf;\r\n        this.logger = new Logger(conf, this);\r\n        this.restClient = new RESTClient(conf, suiteEnvConf);\r\n    }\r\n\r\n    ///////// TestRunning\r\n\r\n\r\n    runRESTApiTestSets(currentEnv: SuiteEnvInfo): Promise<Array<TestSetResult>> {\r\n        // TODO: logic for running TestSets in order\r\n        return new Promise<Array<TestSetResult>>(async(resolve, reject) => {\r\n            this.logger.trace(`runRESTApiTestSets ${currentEnv.suiteID} ${currentEnv.suiteEnvID}`);\r\n            let testSetPromises = _.map(currentEnv.testSets.values(), (testSet: ParsedTestSetConfig) => {\r\n                return this.runRESTApiTestSet(currentEnv, testSet);\r\n            });\r\n\r\n            try {\r\n                let testSetResults: Array<TestSetResult> = await Promise.all(testSetPromises);\r\n                resolve(testSetResults);\r\n            } catch (e) {\r\n                this.logger.trace(`runRESTApiTestSets ERROR encountered while running testSetPromises`);\r\n                return reject(e);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    async runRESTApiTestSet(currentEnv: SuiteEnvInfo, testSet: ParsedTestSetConfig): Promise<TestSetResult> {\r\n        this.logger.trace(`runRESTApiTestSet ${currentEnv.ports} ${testSet.id}`);\r\n\r\n        return new Promise<TestSetResult>((resolve, reject) => {\r\n            // build api test functions\r\n            if (!testSet.tests) {\r\n                reject(`testSet ${testSet.id} has no tests`);\r\n                return;\r\n            }\r\n\r\n            let testFns = this.buildTestTasks(currentEnv, testSet);\r\n\r\n            // run api test functions\r\n            this.logger.info(`Running Test Set: ${testSet.id}`);\r\n            if (testSet.id == 'asset management') {\r\n                this.logger.debug(testSet.tests, true);\r\n            }\r\n\r\n            if (testSet.description) {\r\n                this.logger.info(`${testSet.description}`);\r\n            }\r\n\r\n            _async.series(testFns, (err2, testResults) => {\r\n                // see if any tests failed and mark the set according\r\n                let pass = _.find(testResults, (tr: any) => {\r\n                    return tr.pass === false\r\n                }) ? false : true;\r\n\r\n                let testSetResult = new TestSetResult();\r\n                testSetResult.pass = pass;\r\n                testSetResult.id = testSet.id;\r\n                testSetResult.tests = testResults;\r\n\r\n                if (err2) {\r\n                    this.logger.trace('runRESTApiTestSet ERROR while running tests');\r\n                    this.logger.trace(err2);\r\n                    reject(err2);\r\n                } else {\r\n                    resolve(testSetResult);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    buildTestTasks(currentEnv: SuiteEnvInfo, testSet: ParsedTestSetConfig) {\r\n        this.logger.trace(`RESTSuiteManager:buildTestTasks <testSet> ${currentEnv.ports}`);\r\n        this.logger.trace(testSet);\r\n        // filter out any tests that do no contain a request object (usually the case if a\r\n        \r\n        if (testSet.testsUnordered.length > 0) {\r\n            // ADD ORDERED AND UNORDERED ARRAYS TOGETHER\r\n            testSet.tests = testSet.tests.concat(testSet.testsUnordered);\r\n        }\r\n\r\n        let testsWithARequest = _.reject(testSet.tests, (test: RESTTest) => {\r\n            return test === null;\r\n        });\r\n        return _.map(testsWithARequest, (test: RESTTest) => {\r\n\r\n            return (cb) => {\r\n                // build request\r\n                let port = currentEnv.ports[0]; // the REST api port should be passed first in the userConfigFile.\r\n                let opts = this.restClient.buildRequest(test.request, port);\r\n                this.logger.trace(opts);\r\n\r\n                // figure out if this test is running at a specific index. (just nice for consoling)\r\n                let testIndex;\r\n                if (_.isUndefined(test.testSet)) {\r\n                    testIndex = '#';\r\n                } else {\r\n                    // we have more than one testSet configuration for this test. find the one\r\n                    // matching the current testSet\r\n                    let testSetConf = test.testSet;\r\n                    if (Array.isArray(testSetConf)) {\r\n                        testSetConf = _.find(testSetConf, (c) => {\r\n                            return c.id == testSet.id;\r\n                        });\r\n                    }\r\n\r\n                    if (_.isUndefined(testSetConf.index)) {\r\n                        testIndex = '#';\r\n                    } else {\r\n                        testIndex = testSetConf.index;\r\n                    }\r\n                    ;\r\n\r\n                }\r\n\r\n                this.logger.info(`${testSet.id}: ${testIndex}: ${test.id}`)\r\n                this.restClient.makeRequest(opts, (err: Error, res: IncomingMessage, body: any) => {\r\n                    if (err) {\r\n                        return cb(err);\r\n                    }\r\n\r\n                    this.validateTestResult(test, Object.assign({}, this.restClient.getDefaultRequestOpts(), opts), res, body, cb)\r\n                });\r\n            };\r\n        });\r\n    }\r\n\r\n\r\n    validateTestResult(test: RESTTest, reqOpts: any, res: IncomingMessage, body: any, cb: Function) {\r\n        this.logger.trace(`validateTestResult`)\r\n        // validate results\r\n        let testResult = <any>{\r\n            id: test.id,\r\n            index: test.testIndex,\r\n            pass: true\r\n        };\r\n\r\n\r\n        if (test.expect.headers) {\r\n            testResult.headers = []\r\n\r\n            _.forEach(test.expect.headers, (v, headerName) => {\r\n                if (res.headers[headerName] != v) {\r\n                    testResult.pass = false;\r\n                    testResult.headers.push({\r\n                        pass: false,\r\n                        headerName: headerName,\r\n                        actual: res.headers[headerName],\r\n                        expected: v\r\n                    });\r\n                    testResult.headers[headerName] = `Expected ${v} was ${res.headers[headerName]}`;\r\n                } else {\r\n                    testResult.headers.push({\r\n                        pass: true,\r\n                        headerName: headerName\r\n                    })\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n        if (test.expect.status) {\r\n            testResult.status = {\r\n                pass: true\r\n            }\r\n\r\n            let statusPass = res.statusCode == test.expect.status;\r\n            if (!statusPass) {\r\n                testResult.pass = false;\r\n                testResult.status.pass = false;\r\n                testResult.status.actual = res.statusCode;\r\n                testResult.status.expected = test.expect.status;\r\n            }\r\n        }\r\n\r\n        if (test.expect.body) {\r\n            testResult.body = {\r\n                pass: true\r\n            }\r\n\r\n            let bodyPass = true;\r\n            let customFnErr = null;\r\n\r\n\r\n            ///////////////////////////\r\n            //  Run Assertions\r\n            ///////////////////////////\r\n            try {\r\n                //  Assertion Modifications\r\n                /*\r\n                 there are some assertion modifications that should alter the actual/expect prior to running an\r\n                 assertion function or doing a direct pojo comparision. run those here\r\n                 */\r\n                let expected;\r\n                let actual = _.isArray(body) ? body.slice() : Object.assign({}, body);\r\n                if (_.isFunction(test.expect.body)) {\r\n                    /*\r\n                     In the event that 'expect.body' is a custom fn, we'll make 'expected' == 'actual'\r\n                     This will allow the assertionModification fn's to run without blowing up since they mutate both\r\n                     'expected and 'actual'. Ultimately, when the assertions are run the 'expected' object set here will not\r\n                     be used and instead 'test.expect.body(actual)' will be evaluated.\r\n                     */\r\n                    expected =  _.isArray(actual) ? actual.slice() : Object.assign({}, actual);\r\n                } else {\r\n                    expected = _.isArray(test.expect.body) ? test.expect.body.slice() : Object.assign({}, test.expect.body);\r\n                }\r\n\r\n                if (test.expect.assertionModifications) {\r\n                    testResult.assertionModifications = test.expect.assertionModifications;\r\n\r\n                    if (test.expect.assertionModifications.ignoreKeys) {\r\n                        IgnoreKeys.process(test.expect.assertionModifications.ignoreKeys, expected, actual);\r\n                    }\r\n\r\n                    if (test.expect.assertionModifications.unorderedCollections) {\r\n                        this.logger.debug(`Processing UnorderedCollections`);\r\n                        UnorderedCollections.process(test.expect.assertionModifications.unorderedCollections, expected, actual)\r\n                    }\r\n                }\r\n                // /End Assertion Modifications\r\n\r\n                // Run Custom Function Assertion OR basic Pojo comparision\r\n                if (_.isFunction(test.expect.body)) {\r\n                    // if the test has a custom function for assertion, run it.\r\n                    let bodyResult = test.expect.body(actual);\r\n                    if (bodyResult === false) {\r\n                        bodyPass = false;\r\n                    } // else we pass it. ie) it doesn't return anything we assume it passed.\r\n                } else {\r\n                    // assert the body against the provided pojo body\r\n                    bodyPass = _.isEqual(expected, actual);\r\n                }\r\n            } catch (e) {\r\n                bodyPass = false;\r\n                customFnErr = {\r\n                    type: 'custom validation function',\r\n                    error: e\r\n                };\r\n\r\n                this.logger.error(customFnErr);\r\n            }\r\n\r\n            // if (_.isFunction(test.expect.body)) {\r\n            //     // if the test has a custom function for assertion, run it.\r\n            //     try {\r\n            //         let bodyResult = test.expect.body(actual);\r\n            //         if (bodyResult === false) {\r\n            //             bodyPass = false;\r\n            //         } // else we pass it. ie) it doesn't return anything we assume it passed.\r\n            //     } catch (e) {\r\n            //         bodyPass = false;\r\n            //         customFnErr = {\r\n            //             type: 'custom validation function',\r\n            //             error: e\r\n            //         };\r\n            //\r\n            //         this.logger.error(customFnErr);\r\n            //     }\r\n            // } else {\r\n            //     // assert the body against the provided pojo body\r\n            //     bodyPass = _.isEqual(expected, actual);\r\n            // }\r\n\r\n            if (!bodyPass) {\r\n                testResult.pass = false;\r\n                testResult.body.pass = false;\r\n                testResult.body.actual = body;\r\n                testResult.body.expected = _.isFunction(test.expect.body) ? customFnErr : test.expect.body;\r\n            }\r\n        }\r\n\r\n        // attach the request info if the test itself failed\r\n        if (!testResult.pass) {\r\n            testResult.request = reqOpts;\r\n        }\r\n\r\n        cb(null, testResult);\r\n    }\r\n}\r\n"]}