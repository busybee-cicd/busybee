{"version":3,"file":"RESTSuiteManager.js","sourceRoot":"","sources":["../../../src/managers/RESTSuiteManager.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _async from 'async';\r\nimport * as _ from 'lodash';\r\nimport {Logger, LoggerConf} from 'busybee-util';\r\nimport {RESTClient} from '../lib/RESTClient';\r\nimport {SuiteEnvInfo} from \"../lib/SuiteEnvInfo\";\r\nimport {ParsedTestSetConfig} from \"../models/config/parsed/ParsedTestSetConfig\";\r\nimport {RESTTest} from \"../models/RESTTest\";\r\nimport {IncomingMessage} from \"http\";\r\nimport {TestSetResult} from \"../models/results/TestSetResult\";\r\nimport {IgnoreKeys} from \"../lib/assertionModifications/IgnoreKeys\";\r\nimport {UnorderedCollections} from \"../lib/assertionModifications/UnorderedCollections\";\r\nimport {RESTTestPartResult} from \"../models/results/RESTTestPartResult\";\r\nimport {RESTTestHeaderResult} from \"../models/results/RESTTestHeaderResult\";\r\nimport {RESTTestResult} from \"../models/results/RESTTestResult\";\r\nimport {TestSetConfig} from \"../models/config/user/TestSetConfig\";\r\nimport {DeleteCollections} from \"../lib/assertionModifications/DeleteCollections\";\r\nimport {BusybeeParsedConfig} from \"../models/config/BusybeeParsedConfig\";\r\nimport {ParsedTestEnvConfig} from \"../models/config/parsed/ParsedTestEnvConfig\";\r\n\r\n// support JSON.stringify on Error objects\r\nif (!('toJSON' in Error.prototype))\r\n  Object.defineProperty(Error.prototype, 'toJSON', {\r\n    value: function () {\r\n      var alt = {};\r\n\r\n      Object.getOwnPropertyNames(this).forEach(function (key) {\r\n        alt[key] = this[key];\r\n      }, this);\r\n\r\n      return alt;\r\n    },\r\n    configurable: true,\r\n    writable: true\r\n  });\r\n\r\nexport class RESTSuiteManager {\r\n\r\n  private conf: BusybeeParsedConfig;\r\n  private logger: Logger;\r\n  private restClient: RESTClient;\r\n\r\n  constructor(conf: BusybeeParsedConfig, suiteEnvConf: SuiteEnvInfo) {\r\n    this.conf = _.cloneDeep(conf);\r\n    const loggerConf = new LoggerConf(this, conf.logLevel, null);\r\n    this.logger = new Logger(loggerConf);\r\n    this.restClient = new RESTClient(conf, suiteEnvConf);\r\n  }\r\n\r\n  ///////// TestRunning\r\n\r\n\r\n  runRESTApiTestSets(currentEnv: SuiteEnvInfo): Promise<Array<TestSetResult>> {\r\n    // TODO: logic for running TestSets in order\r\n    return new Promise<Array<TestSetResult>>(async(resolve, reject) => {\r\n      this.logger.trace(`runRESTApiTestSets ${currentEnv.suiteID} ${currentEnv.suiteEnvID}`);\r\n      let testSetPromises = _.map(currentEnv.testSets.values(), (testSet: ParsedTestSetConfig) => {\r\n        return this.runRESTApiTestSet(currentEnv, testSet);\r\n      });\r\n\r\n      try {\r\n        let testSetResults: Array<TestSetResult> = await Promise.all(testSetPromises);\r\n        resolve(testSetResults);\r\n      } catch (e) {\r\n        this.logger.trace(`runRESTApiTestSets ERROR encountered while running testSetPromises`);\r\n        return reject(e);\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  async runRESTApiTestSet(currentEnv: SuiteEnvInfo, testSet: ParsedTestSetConfig): Promise<TestSetResult> {\r\n    this.logger.trace(`runRESTApiTestSet ${currentEnv.ports} ${testSet.id}`);\r\n\r\n    return new Promise<TestSetResult>((resolve, reject) => {\r\n      // build api test functions\r\n      if (!testSet.tests) {\r\n        reject(`testSet ${testSet.id} has no tests`);\r\n        return;\r\n      }\r\n\r\n      let testFns = this.buildTestTasks(currentEnv, testSet);\r\n\r\n      // run api test functions\r\n      this.logger.info(`Running Test Set: ${testSet.id}`);\r\n\r\n      if (testSet.description) {\r\n        this.logger.info(`${testSet.description}`);\r\n      }\r\n\r\n      let controlFlow = testSet.controlFlow || `series`;\r\n      this.logger.debug(`${testSet.id}: controlFlow = ${controlFlow}`);\r\n      _async[controlFlow](testFns, (err2: Error, testResults: Array<RESTTestResult>) => {\r\n        // see if any tests failed and mark the set according\r\n        let pass = _.find(testResults, (tr: any) => {\r\n          return tr.pass === false\r\n        }) ? false : true;\r\n\r\n        let testSetResult = new TestSetResult();\r\n        testSetResult.pass = pass;\r\n        testSetResult.id = testSet.id;\r\n        testSetResult.tests = testResults;\r\n\r\n        if (err2) {\r\n          this.logger.trace('runRESTApiTestSet ERROR while running tests');\r\n          this.logger.trace(err2);\r\n          reject(err2);\r\n        } else {\r\n          resolve(testSetResult);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  buildTestTasks(currentEnv: SuiteEnvInfo, testSet: ParsedTestSetConfig) {\r\n    this.logger.trace(`RESTSuiteManager:buildTestTasks <testSet> ${currentEnv.ports}`);\r\n    this.logger.trace(testSet);\r\n\r\n    // filter out tests that do not contain .request object (shouldnt be required anymore) TODO: remove?\r\n    let testsWithARequest = _.reject(testSet.tests, (test: RESTTest) => {\r\n      if (_.isNil(test)) {\r\n        this.logger.trace(\"TestSet with NULL test detected\");\r\n      }\r\n      return _.isNil(test);\r\n    });\r\n    return _.map(testsWithARequest, (test: RESTTest) => {\r\n\r\n      return async (cb) => {\r\n        // build request\r\n        let port = currentEnv.ports[0]; // the REST api port should be passed first in the userConfigFile.\r\n        let opts = this.restClient.buildRequest(test.request, port);\r\n        // filter everything in the request opts for variables that should be set via variableExports\r\n        this.logger.trace('opts before processRequestOptsForVariableDeclarations');\r\n        this.logger.trace(opts);\r\n        opts = this.processRequestOptsForVariableDeclarations(opts, testSet.variableExports);\r\n        this.logger.trace('opts after processRequestOptsForVariableDeclarations');\r\n        this.logger.trace(opts);\r\n\r\n        // figure out if this test is running at a specific index. (just nice for consoling)\r\n        let testIndex;\r\n        if (_.isUndefined(test.testSet)) {\r\n          testIndex = '#';\r\n        } else {\r\n          // we have more than one testSet configuration for this test. find the one\r\n          // matching the current testSet\r\n          let testSetConf = test.testSet;\r\n          if (Array.isArray(testSetConf)) {\r\n            testSetConf = _.find(testSetConf, (c) => {\r\n              return c.id == testSet.id;\r\n            });\r\n          }\r\n\r\n          if (_.isUndefined(testSetConf.index)) {\r\n            testIndex = '#';\r\n          } else {\r\n            testIndex = testSetConf.index;\r\n          }\r\n        }\r\n\r\n\r\n        this.logger.info(`${testSet.id}: ${testIndex}: ${test.id}`);\r\n        if (test.delayRequest) {\r\n          this.logger.info(`Delaying request for ${test.delayRequest / 1000} seconds.`);\r\n          await this.wait(test.delayRequest);\r\n        }\r\n\r\n        try {\r\n          let response = await this.makeRequestWithRetries(opts, 0, 3);\r\n          this.validateTestResult(testSet, test, Object.assign({}, this.restClient.getDefaultRequestOpts(), opts), response, cb);\r\n        } catch (err) {\r\n          this.logger.error(err, true);\r\n          // TODO: refactor a lot of this testResult building logic for re-use w/ the validation section\r\n          let testResult = new RESTTestResult(test.id);\r\n          testResult.pass = false;\r\n          if (test.expect.status) {\r\n            testResult.status = new RESTTestPartResult();\r\n            testResult.status.pass = false;\r\n            testResult.status.expected = test.expect.status;\r\n          }\r\n          if (test.expect.headers) {\r\n            testResult.headers = new RESTTestHeaderResult();\r\n            testResult.headers.pass = false;\r\n            _.forEach(test.expect.headers, (v, headerName) => {\r\n              let expected = {};\r\n              expected[headerName] = v;\r\n              testResult.headers.expected.push(expected);\r\n            });\r\n          }\r\n          if (test.expect.body) {\r\n            testResult.body = new RESTTestPartResult();\r\n            testResult.body.pass = false;\r\n            testResult.body.expected = test.expect.body;\r\n            testResult.body.error = {\r\n              type: 'error during request',\r\n              error: err.message,\r\n              stack: err.stack\r\n            }\r\n          }\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  async makeRequestWithRetries(opts, retries, retryMax) {\r\n    try {\r\n      return await this.restClient.makeRequest(opts);\r\n    } catch (err) {\r\n      if (retries > retryMax) {\r\n        throw err;\r\n      } else {\r\n        retries += 1;\r\n        this.logger.warn(`REST request failed unexpectedly, retry attempt ${retries}`);\r\n        return await this.makeRequestWithRetries(opts, retries, retryMax);\r\n      }\r\n    }\r\n  }\r\n\r\n  wait(milliseconds) {\r\n    return new Promise((resolve, reject) => setTimeout(resolve, milliseconds))\r\n  }\r\n\r\n  /*\r\n   Iterates through the request opts and relaces all instances of #{myVar}\r\n   with properties of the same name on variableExports\r\n   */\r\n  processRequestOptsForVariableDeclarations(opts: any, variableExports: any): any {\r\n    // check url\r\n    opts.url = this.replaceVars(opts.url, variableExports);\r\n    let objBasedPropsToCheck = ['qs', 'headers', 'body'];\r\n    objBasedPropsToCheck.forEach(prop => {\r\n      if (opts[prop]) {\r\n        opts[prop] = this.replaceVarsInObject(opts[prop], variableExports);\r\n      }\r\n    })\r\n\r\n    return opts;\r\n  }\r\n\r\n  replaceVarsInObject(obj: any, variableExports: any) {\r\n    if (_.isString(obj)) {\r\n      return this.replaceVars(obj, variableExports);\r\n    }\r\n\r\n    _.forEach(obj, (value, propName) => {\r\n      if (_.isObject(value) && !_.isArray(value)) {\r\n        obj[propName] = this.replaceVarsInObject(value, variableExports);\r\n      } else if (_.isArray(value)) {\r\n        obj[propName] = value.map(v => {\r\n          return this.replaceVarsInObject(v, variableExports);\r\n        });\r\n      } else if (_.isString(value)) {\r\n        obj[propName] = this.replaceVars(value, variableExports);\r\n      }\r\n    });\r\n\r\n    return obj;\r\n  }\r\n\r\n  /*\r\n   Parses strings formatted as \"#{myVar}\"\r\n   */\r\n  replaceVars(str: string, variableExports: any) {\r\n    this.logger.trace('replaceVars: current variableExports ->')\r\n    this.logger.trace(variableExports, true);\r\n    // When the string startsWith #{ and endswith }\r\n    // we assume its a literal substitution. ie) no coercion, not an object, not interpolated\r\n    if (str.startsWith(`#{`) && str.endsWith(`}`)) {\r\n      let varName = str.substr(2).slice(0, -1);\r\n      this.logger.trace\r\n      this.logger.trace(`Setting literal ${variableExports[varName]} for '${varName}'`);\r\n      return variableExports[varName];\r\n    }\r\n\r\n    let replaced = str.replace(/#{\\w+}/g, (match) => {\r\n      match = match.substr(2).slice(0, -1); // remove #{}\r\n      this.logger.trace(`Setting ${match} for '${str}'`);\r\n      this.logger.trace(variableExports, true);\r\n      if (_.isObject(variableExports[match])) {\r\n        // if the matched variable's value is an object\r\n        // we return a special instruction\r\n        return `OBJECT-${match}`;\r\n      }\r\n      return variableExports[match];\r\n    });\r\n\r\n    if (replaced.startsWith(\"OBJECT\")) {\r\n      // set the key's value equal to an object stored in variableExports\r\n      let key = replaced.substr(7);\r\n      replaced = variableExports[key];\r\n    }\r\n\r\n    return replaced;\r\n  }\r\n\r\n\r\n  validateTestResult(testSet: ParsedTestSetConfig, test: RESTTest, reqOpts: any, res, cb: (Error, RESTTestResult?) => {}) {\r\n    this.logger.trace(`validateTestResult`);\r\n\r\n    // validate results\r\n    let testResult = new RESTTestResult(test.id);\r\n\r\n    if (test.expect.status) {\r\n      testResult.status = new RESTTestPartResult();\r\n      let statusPass = res.statusCode == test.expect.status;\r\n      testResult.status.actual = res.statusCode;\r\n\r\n      if (!statusPass) {\r\n        testResult.pass = false;\r\n        testResult.status.pass = false;\r\n        testResult.status.expected = test.expect.status;\r\n      }\r\n    }\r\n    // else {\r\n    //   // return the actual status by default\r\n    //   testResult.status.actual = res.statusCode;\r\n    // }\r\n\r\n    if (test.expect.headers) {\r\n      testResult.headers = new RESTTestHeaderResult();\r\n      _.forEach(test.expect.headers, (v, headerName) => {\r\n        if (res.headers[headerName] != v) {\r\n          testResult.pass = false;\r\n          testResult.headers.pass = false;\r\n        }\r\n\r\n        let actual = {};\r\n        actual[headerName] = res.headers[headerName];\r\n        testResult.headers.actual.push(actual);\r\n        let expected = {};\r\n        expected[headerName] = v;\r\n        testResult.headers.expected.push(expected);\r\n      });\r\n    }\r\n    // else {\r\n    //   // return the actual headers by default\r\n    //   _.forEach(res.headers, (v, headerName) => {\r\n    //     let actual = {};\r\n    //     actual[headerName] = v;\r\n    //     testResult.headers.actual.push(actual);\r\n    //   });\r\n    // }\r\n\r\n    if (test.expect.body) {\r\n      testResult.body = new RESTTestPartResult();\r\n      let bodyPass = true;\r\n      let customFnErr = null;\r\n\r\n\r\n      ///////////////////////////\r\n      //  Run Assertions\r\n      ///////////////////////////\r\n\r\n      let actual = _.cloneDeep(res.body);\r\n      let expected;\r\n      try {\r\n        //  Assertion Modifications\r\n\r\n        /*\r\n         there are some assertion modifications that should alter the actual/expect prior to running an\r\n         assertion function or doing a direct pojo comparision. run those here\r\n         */\r\n        if (_.isFunction(test.expect.body)) {\r\n          /*\r\n           In the event that 'expect.body' is a custom fn, we'll make 'expected' == 'actual'\r\n           assertionModification logic relies on 'expected' and 'actual' to both be objects.\r\n           Ultimately, when the assertions are run the 'expected' object set here will not\r\n           be used and instead 'test.expect.body(actual)' will be evaluated.\r\n           */\r\n          expected = _.cloneDeep(actual);\r\n        } else {\r\n          expected = _.cloneDeep(test.expect.body);\r\n        }\r\n\r\n        if (test.expect.assertionModifications) {\r\n          testResult.assertionModifications = test.expect.assertionModifications;\r\n\r\n          if (test.expect.assertionModifications.ignoreKeys) {\r\n            IgnoreKeys.process(test.expect.assertionModifications.ignoreKeys, expected, actual, this.logger);\r\n          }\r\n\r\n          if (test.expect.assertionModifications.unorderedCollections) {\r\n            this.logger.debug(`Processing UnorderedCollections`);\r\n            /*\r\n             Due to the scenario where unorderedCollections may contain unorderedCollections ie)\r\n             [\r\n             {\r\n             subCollection: [1,2,3,4]\r\n             },\r\n             {\r\n             subCollection: [5,6,7,8]\r\n             }\r\n             ]\r\n\r\n             We must do a first pass where we work from the outside -> in. We just check for equality while ignoring nested collections.\r\n             On a second pass we remove the collections so that they don't appear in the body-assertion steps below\r\n             */\r\n            UnorderedCollections.process(test.expect.assertionModifications.unorderedCollections, expected, actual);\r\n          }\r\n        }\r\n        // /End Assertion Modifications\r\n\r\n        // IMPORTANT: the 'expected' and 'actual' at this point have been modified to remove anything that we should ignore.\r\n        // that is so that keys that don't matter aren't passed to the assertionFn or the _.isEqual\r\n\r\n        // Run Custom Function Assertion OR basic Pojo comparision\r\n        if (_.isFunction(test.expect.body)) {\r\n          // if the test has a custom function for assertion, run it.\r\n          let bodyResult = test.expect.body(actual, testSet.variableExports);\r\n          if (bodyResult === false) {\r\n            bodyPass = false;\r\n          } // else we pass it. ie) it doesn't return anything we assume it passed.\r\n        } else {\r\n          // substitue any exported variable referenced from previous tests\r\n          if (!_.isEmpty(testSet.variableExports)) {\r\n            this.replaceVarsInObject(expected, testSet.variableExports);\r\n          }\r\n          // assert the body against the provided pojo body\r\n          bodyPass = _.isEqual(expected, actual);\r\n        }\r\n      } catch (e) {\r\n        bodyPass = false;\r\n        customFnErr = {\r\n          type: 'custom validation function',\r\n          error: e.message,\r\n          stack: e.stack\r\n        };\r\n      }\r\n\r\n      testResult.body.actual = actual;\r\n      if (!bodyPass) {\r\n        testResult.pass = false;\r\n        testResult.body.pass = false;\r\n        if (!_.isFunction(test.expect.body)) {\r\n          testResult.body.expected = expected;\r\n        }\r\n        if (customFnErr) {\r\n          testResult.body.error = customFnErr;\r\n        }\r\n      }\r\n    }\r\n    // else {\r\n    //   // just return the body that was returned and consider it a pass\r\n    //   testResult.body.actual = _.cloneDeep(res.body);\r\n    // }\r\n\r\n    // attach the request info for reporting purposes\r\n    testResult.request = reqOpts;\r\n\r\n    cb(null, testResult);\r\n  }\r\n\r\n}\r\n"]}