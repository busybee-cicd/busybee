{"version":3,"file":"RESTSuiteManager.js","sourceRoot":"","sources":["../../../src/managers/RESTSuiteManager.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _async from 'async';\r\nimport * as _ from 'lodash';\r\nimport {Logger} from '../lib/Logger';\r\nimport {RESTClient} from '../lib/RESTClient';\r\nimport {SuiteEnvInfo} from \"../lib/SuiteEnvInfo\";\r\nimport {ParsedTestSetConfig} from \"../config/parsed/ParsedTestSetConfig\";\r\nimport {RESTTest} from \"../config/test/RESTTest\";\r\nimport {IncomingMessage} from \"http\";\r\n\r\nexport class RESTSuiteManager {\r\n\r\n  private conf: any;\r\n  private logger: Logger;\r\n  private restClient: any;\r\n\r\n  constructor(conf, suiteEnvConf) {\r\n    this.conf = conf;\r\n    this.logger = new Logger(conf, this);\r\n    this.restClient = new RESTClient(conf, suiteEnvConf);\r\n  }\r\n\r\n  ///////// TestRunning\r\n\r\n\r\n  runRESTApiTestSets(currentEnv: SuiteEnvInfo) {\r\n    // TODO: logic for running TestSets in order\r\n    return new Promise(async (resolve, reject) => {\r\n      this.logger.debug(`runRESTApiTestSets ${currentEnv.suiteID} ${currentEnv.suiteEnvID}`);\r\n      let testSetPromises = _.map(currentEnv.testSets.values(), (testSet: ParsedTestSetConfig) => {\r\n        return this.runRESTApiTestSet(currentEnv, testSet);\r\n      });\r\n\r\n      let testSetResults;\r\n      let testSetErr;\r\n      try {\r\n        testSetResults = await Promise.all(testSetPromises);\r\n      } catch (e) {\r\n        testSetErr = e;\r\n      }\r\n\r\n      if (testSetErr) {\r\n        this.logger.debug(`runRESTApiTestSets ERROR encountered while running testSetPromises`);\r\n        reject(testSetErr);\r\n      } else {\r\n        resolve(testSetResults);\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  async runRESTApiTestSet(currentEnv: SuiteEnvInfo, testSet: ParsedTestSetConfig) {\r\n    this.logger.debug(`runRESTApiTestSet ${currentEnv.ports} ${testSet.id}`);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      // build api test functions\r\n      if (!testSet.tests) {\r\n        reject(`testSet ${testSet.id} has no tests`);\r\n      }\r\n\r\n      let testFns = this.buildTestTasks(currentEnv, testSet);\r\n\r\n      // run api test functions\r\n      this.logger.info(`Running Test Set: ${testSet.id}`);\r\n      if (testSet.description) {\r\n        this.logger.info(`${testSet.description}`);\r\n      }\r\n\r\n      let flow = this.conf.controlFlow || 'parallel';\r\n      _async[flow](testFns, (err2, testResults) => {\r\n        // pass test results\r\n        let testSetResults = {\r\n          name: testSet.id,\r\n          results: testResults\r\n        };\r\n\r\n        if (err2) {\r\n          this.logger.debug('runRESTApiTestSet ERROR while running tests');\r\n          this.logger.debug(err2);\r\n          reject(err2);\r\n        } else {\r\n          resolve(testSetResults);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  buildTestTasks(currentEnv: SuiteEnvInfo, testSet: ParsedTestSetConfig) {\r\n    this.logger.debug(`RESTSuiteManager:buildTestTasks <testSet> ${currentEnv.ports}`);\r\n    this.logger.debug(testSet);\r\n    return testSet.tests.map((test: RESTTest, i) => {\r\n\r\n      return (cb) => {\r\n        if (!test.request) {\r\n          this.logger.info(`testSet ${testSet.id}:${test.name} contains no request information. Probably a placeholder due to indexing.`);\r\n          return cb(null);\r\n        }\r\n        if (test.skip || test.mock) {\r\n          return cb(null);\r\n        }\r\n\r\n        // build request\r\n        let port = currentEnv.ports[0]; // the REST api port should be passed first in the userConfigFile.\r\n        let opts = this.restClient.buildRequest(test.request, port);\r\n        this.logger.debug(opts);\r\n\r\n        // figure out if this test is running at a specific index. (just nice for consoling)\r\n        let testIndex;\r\n        if (_.isUndefined(test.testSet)) {\r\n          testIndex = '#';\r\n        } else {\r\n          // we have more than one testSet configuration for this test. find the one\r\n          // matching the current testSet\r\n          let testSetConf = test.testSet;\r\n          if (Array.isArray(testSetConf)) {\r\n            testSetConf = _.find(testSetConf, (c) => {\r\n              return c.id == testSet.id;\r\n            });\r\n          }\r\n\r\n          if (_.isUndefined(testSetConf.index)) {\r\n            testIndex = '#';\r\n          } else {\r\n            testIndex = testSetConf.index;\r\n          };\r\n\r\n        }\r\n        this.logger.info(`${testSet.id}: ${testIndex}: ${test.name}`)\r\n\r\n        this.restClient.makeRequest(opts, (err: Error, res: IncomingMessage, body: any) => {\r\n          if (err) { return cb(err); }\r\n\r\n          this.validateTestResult(test, res, body, cb)\r\n        });\r\n      };\r\n    });\r\n  }\r\n\r\n  validateTestResult(test: RESTTest, res: IncomingMessage, body: any, cb: Function) {\r\n    // validate results\r\n    let testResult = <any>{name: test.name, index: test.testIndex};\r\n    if (test.expect.headers) {\r\n      testResult.headers = {};\r\n    }\r\n\r\n    if (test.expect.status) {\r\n      testResult.status = res.statusCode == test.expect.status\r\n          ? true\r\n          : `Expected ${test.expect.status} was ${res.statusCode}`\r\n    }\r\n\r\n    if (test.expect.body) {\r\n\r\n      if (_.isFunction(test.expect.body)) {\r\n        // if the test has a custom function for assertion, run it.\r\n        let result;\r\n        try {\r\n          result = test.expect.body(body);\r\n        } catch (e) {\r\n          result = false;\r\n        }\r\n\r\n        if (!result) {\r\n          testResult.body = `Expected ${JSON.stringify(test.expect.body)} was ${JSON.stringify(body)}`\r\n        } else {\r\n          testResult.body = true;\r\n        }\r\n      } else {\r\n        // assert the body against the provided pojo body\r\n        testResult.body = _.isEqual(body, test.expect.body)\r\n            ? true\r\n            : `Expected ${JSON.stringify(test.expect.body)} was ${JSON.stringify(body)}`\r\n      }\r\n\r\n    }\r\n\r\n    if (test.expect.headers) {\r\n      _.forEach(test.expect.headers, (v, headerName) => {\r\n        if (res.headers[headerName] != v) {\r\n          testResult.headers[headerName] = `Expected ${v} was ${res.headers[headerName]}`;\r\n        } else {\r\n          testResult.headers[headerName] = true;\r\n        }\r\n      });\r\n    }\r\n\r\n    cb(null, testResult);\r\n  }\r\n}\r\n"]}