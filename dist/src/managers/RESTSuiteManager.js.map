{"version":3,"file":"RESTSuiteManager.js","sourceRoot":"","sources":["../../../src/managers/RESTSuiteManager.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _async from 'async';\nimport * as _ from 'lodash';\nimport {Logger} from '../lib/Logger';\nimport {RESTClient} from '../lib/RESTClient';\nimport {SuiteEnvInfo} from \"../lib/SuiteEnvInfo\";\nimport {ParsedTestSetConfig} from \"../models/config/parsed/ParsedTestSetConfig\";\nimport {RESTTest} from \"../models/RESTTest\";\nimport {IncomingMessage} from \"http\";\n\nexport class RESTSuiteManager {\n\n  private conf: any;\n  private logger: Logger;\n  private restClient: any;\n\n  constructor(conf, suiteEnvConf) {\n    this.conf = conf;\n    this.logger = new Logger(conf, this);\n    this.restClient = new RESTClient(conf, suiteEnvConf);\n  }\n\n  ///////// TestRunning\n\n\n  runRESTApiTestSets(currentEnv: SuiteEnvInfo) {\n    // TODO: logic for running TestSets in order\n    return new Promise(async (resolve, reject) => {\n      this.logger.debug(`runRESTApiTestSets ${currentEnv.suiteID} ${currentEnv.suiteEnvID}`);\n      let testSetPromises = _.map(currentEnv.testSets.values(), (testSet: ParsedTestSetConfig) => {\n        return this.runRESTApiTestSet(currentEnv, testSet);\n      });\n\n      let testSetResults;\n      let testSetErr;\n      try {\n        testSetResults = await Promise.all(testSetPromises);\n      } catch (e) {\n        testSetErr = e;\n      }\n\n      if (testSetErr) {\n        this.logger.debug(`runRESTApiTestSets ERROR encountered while running testSetPromises`);\n        reject(testSetErr);\n      } else {\n        resolve(testSetResults);\n      }\n    });\n\n  }\n\n  async runRESTApiTestSet(currentEnv: SuiteEnvInfo, testSet: ParsedTestSetConfig) {\n    this.logger.debug(`runRESTApiTestSet ${currentEnv.ports} ${testSet.id}`);\n\n    return new Promise((resolve, reject) => {\n      // build api test functions\n      if (!testSet.tests) {\n        reject(`testSet ${testSet.id} has no tests`);\n      }\n\n      let testFns = this.buildTestTasks(currentEnv, testSet);\n\n      // run api test functions\n      this.logger.info(`Running Test Set: ${testSet.id}`);\n      if (testSet.description) {\n        this.logger.info(`${testSet.description}`);\n      }\n\n      _async.series(testFns, (err2, testResults) => {\n        // see if any tests failed and mark the set according\n        let pass = _.find(testResults, tr => { return tr.pass === false }) ? false : true;\n        let testSetResults = {\n          pass: pass,\n          id: testSet.id,\n          tests: testResults\n        };\n\n        if (err2) {\n          this.logger.debug('runRESTApiTestSet ERROR while running tests');\n          this.logger.debug(err2);\n          reject(err2);\n        } else {\n          resolve(testSetResults);\n        }\n      });\n    });\n  }\n\n  buildTestTasks(currentEnv: SuiteEnvInfo, testSet: ParsedTestSetConfig) {\n    this.logger.debug(`RESTSuiteManager:buildTestTasks <testSet> ${currentEnv.ports}`);\n    this.logger.debug(testSet);\n    return testSet.tests.map((test: RESTTest, i) => {\n\n      return (cb) => {\n        if (!test.request) {\n          this.logger.info(`testSet ${testSet.id}:${test.id} contains no request information. Probably a placeholder due to indexing.`);\n          return cb();\n        }\n\n        // build request\n        let port = currentEnv.ports[0]; // the REST api port should be passed first in the userConfigFile.\n        let opts = this.restClient.buildRequest(test.request, port);\n        this.logger.debug(opts);\n\n        // figure out if this test is running at a specific index. (just nice for consoling)\n        let testIndex;\n        if (_.isUndefined(test.testSet)) {\n          testIndex = '#';\n        } else {\n          // we have more than one testSet configuration for this test. find the one\n          // matching the current testSet\n          let testSetConf = test.testSet;\n          if (Array.isArray(testSetConf)) {\n            testSetConf = _.find(testSetConf, (c) => {\n              return c.id == testSet.id;\n            });\n          }\n\n          if (_.isUndefined(testSetConf.index)) {\n            testIndex = '#';\n          } else {\n            testIndex = testSetConf.index;\n          };\n\n        }\n        this.logger.info(`${testSet.id}: ${testIndex}: ${test.id}`)\n\n        this.restClient.makeRequest(opts, (err: Error, res: IncomingMessage, body: any) => {\n          if (err) { return cb(err); }\n\n          this.validateTestResult(test, opts, res, body, cb)\n        });\n      };\n    });\n  }\n\n\n  validateTestResult(test: RESTTest, reqOpts: any, res: IncomingMessage, body: any, cb: Function) {\n    this.logger.debug(`validateTestResult`)\n    // validate results\n    let testResult = <any>{\n      id: test.id,\n      index: test.testIndex,\n      pass: true\n    };\n\n\n    if (test.expect.headers) {\n      testResult.headers = []\n\n      _.forEach(test.expect.headers, (v, headerName) => {\n        if (res.headers[headerName] != v) {\n          testResult.pass = false;\n          testResult.headers.push({\n            pass: false,\n            headerName: headerName,\n            actual: res.headers[headerName],\n            expected: v\n          });\n          testResult.headers[headerName] = `Expected ${v} was ${res.headers[headerName]}`;\n        } else {\n          testResult.headers.push({\n            pass: true,\n            headerName: headerName\n          })\n        }\n      });\n    }\n\n\n    if (test.expect.status) {\n      testResult.status = {\n        pass: true\n      }\n\n      let statusPass = res.statusCode == test.expect.status;\n      if (!statusPass) {\n        testResult.pass = false;\n        testResult.status.pass = false;\n        testResult.status.actual = res.statusCode;\n        testResult.status.expected = test.expect.status;\n      }\n    }\n\n    if (test.expect.body) {\n      testResult.body = {\n        pass: true\n      }\n\n      let bodyPass = true;\n      if (_.isFunction(test.expect.body)) {\n        // if the test has a custom function for assertion, run it.\n        try {\n          bodyPass = test.expect.body(body);\n          if (!_.isBoolean(bodyPass)) { // confirm that the assertion returns a bool\n            bodyPass = false;\n          }\n        } catch (e) {\n          bodyPass = false;\n        }\n      } else {\n        // assert the body against the provided pojo body\n        bodyPass = _.isEqual(body, test.expect.body);\n      }\n\n      if (!bodyPass) {\n        testResult.pass = false;\n        testResult.body.pass = false;\n        testResult.body.actual = body;\n        testResult.body.expected = _.isFunction(body) ? 'custom assertion function' : test.expect.body;\n      }\n    }\n\n    // attach the request info if the test itself failed\n    if (!testResult.pass) {\n      testResult.request = reqOpts;\n    }\n\n    cb(null, testResult);\n  }\n}\n"]}