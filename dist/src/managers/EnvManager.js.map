{"version":3,"file":"EnvManager.js","sourceRoot":"","sources":["../../../src/managers/EnvManager.ts"],"names":[],"mappings":"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","sourcesContent":["import * as util from 'util';\nimport {spawn, execFile} from 'child_process';\nconst execFileCmd =  util.promisify(execFile);\nimport * as uuidv1 from 'uuid/v1';\nimport * as path from 'path';\nimport * as _ from 'lodash';\nimport * as _async from 'async';\nimport * as portscanner from 'portscanner';\nimport {Logger} from '../lib/Logger';\nimport {RESTClient} from '../lib/RESTClient';\nimport {BusybeeParsedConfig} from \"../models/config/BusybeeParsedConfig\";\nimport {EnvResourceConfig} from \"../models/config/common/EnvResourceConfig\";\nimport {HostConfig} from \"../models/config/user/HostConfig\";\nimport {RequestOptsConfig} from \"../models/config/common/RequestOptsConfig\";\nimport {TypedMap} from \"../lib/TypedMap\";\nimport {ParsedTestSuite} from \"../models/config/parsed/ParsedTestSuiteConfig\";\nimport {SuiteEnvInfo} from \"../lib/SuiteEnvInfo\";\n\n\n\nexport class EnvManager {\n  private conf: any;\n  private logger: Logger;\n  private skipEnvProvisioningList: string[];\n  private envsWaitingForProvision: string[];\n  private currentHosts: any;\n  private currentEnvs: TypedMap<SuiteEnvInfo>;\n\n  constructor(conf: BusybeeParsedConfig) {\n    this.conf = conf;\n    this.logger = new Logger(conf, this);\n    if (conf.cmdOpts.skipEnvProvisioning) {\n      this.skipEnvProvisioningList = conf.cmdOpts.skipEnvProvisioning.split(',');\n    }\n    this.currentHosts = this.buildHosts(conf);\n    this.currentEnvs = new TypedMap<SuiteEnvInfo>();\n\n    this.envsWaitingForProvision = [];\n  }\n\n  /*\n  envConf\n  {\n    hosts: ['host1', 'host2'],\n    testSuites: {\n      'test suite 1': {\n        'skip': false,\n        'protocol': 'http',\n        'ports': [8080],\n        'env': {\n          'parallel': true,\n          'resourceCost': 50,\n          'startScript': 'api/envStart.sh',\n          'stopScript': 'api/envStop.sh',\n          'healthcheck': {\n            'type': 'REST',\n            'retries': 30,\n            'request': {\n              'endpoint': '/healthcheck',\n              'timeout': 5000\n            }\n          }\n        }\n      }\n    }\n  }\n\n  currentHosts\n  {\n    'host1': {\n      'load': 0,\n      'envs': {\n        '111-111-111-111': {\n          ports: [8080],\n          portOffset: 0\n        }\n      }\n     },\n    'host2': {\n      'capacity': 0,\n      'envs': {\n        '222-222-222-222': {\n          ports: [8080],\n          portOffset: 0\n        }\n      }\n    }\n  }\n\n  currentEnvs\n  {\n    '111-111-111-111': {\n      'suiteId': 'test suite 1',\n      'suiteEnvID': ''\n      'hostName': 'host1',\n      'resourceCost': 100,\n      'startScript': '',\n      'stopScript': '',\n      'testSets': []\n    },\n    '222-222-222-222': {\n      'suiteId': 'test suite 1',\n      'suiteEnvID': ''\n      'hostName': 'host2',\n      'resourceCost': 100,\n      'startScript': '',\n      'stopScript': ''\n      'testSets': []\n    }\n  }\n  */\n  buildHosts(conf: BusybeeParsedConfig) {\n    this.logger.debug(`buildHostConfs`);\n    // TODO add back\n    // if (!conf.envResources.hosts) {\n    //   this.logger.info(\"No host information provided. Only generatedEnvID info will be passed to scripts\");\n    //   return;\n    // }\n\n    let hosts = {};\n    if (conf.cmdOpts.localMode) {\n      hosts['localhost'] = {\n        load: 0,\n        capacity: 100,\n        envs: {}\n      }\n    } else {\n      conf.envResources.forEach((envConfig: EnvResourceConfig) => {\n        envConfig.hosts.forEach((hostConfig: HostConfig) => {\n          hosts[hostConfig.name] = {\n            load: 0,\n            capacity: hostConfig.capacity || 100,\n            envs: {}\n          }\n        });\n      });\n    }\n\n    this.logger.debug(hosts, true);\n    return hosts;\n  }\n\n  async stop(generatedEnvID: string) {\n    this.logger.debug(`stop ${generatedEnvID}`);\n    return new Promise(async (resolve, reject) => {\n      let envInfo = Object.assign({}, this.currentEnvs.get(generatedEnvID));\n      // remove the env from currentEnvs\n      this.currentEnvs.remove(generatedEnvID);\n\n      if (_.isEmpty(envInfo)) { return Promise.resolve(); }\n      this.logger.info(`Stopping Environment: ${envInfo.suiteEnvID} ${generatedEnvID}`);\n\n      this.logger.debug('envInfo');\n      this.logger.debug(envInfo)\n      let ports = this.currentHosts[envInfo.hostName].envs[generatedEnvID].ports;\n      let busybeeDir = this.conf.filePaths.busybeeDir;\n      let args = {\n        generatedEnvID: generatedEnvID,\n        protocol: envInfo.protocol,\n        hostName: envInfo.hostName,\n        ports: ports,\n        busybeeDir: busybeeDir\n      };\n\n      let filePath = path.join(busybeeDir, envInfo.stopScript);\n      this.logger.debug(filePath);\n      this.logger.debug('scriptArgs');\n      this.logger.debug(args, true);\n\n      // 1. stop the env\n      try {\n\n        await this.runScript(filePath, [JSON.stringify(args)]);\n        // const { stdout, stderr } = await execFileCmd(filePath, [JSON.stringify(args)], null);\n        // if (stderr) {\n        //   reject(stderr);\n        //   return;\n        // }\n\n        this.currentHosts[envInfo.hostName].load -= envInfo.resourceCost;\n        // remove the env from the currentHosts\n        delete this.currentHosts[envInfo.hostName].envs[generatedEnvID];\n\n        this.logger.debug('this.currentHosts');\n        this.logger.debug(this.currentHosts, true);\n        resolve();\n      } catch (e) {\n        this.logger.info(e.message);\n        // failed, add it back\n        this.currentEnvs.set(generatedEnvID, envInfo);\n        reject(e);\n        return;\n      }\n    });\n\n  }\n\n  async stopAll() {\n    this.logger.debug('stopAll');\n\n    return new Promise(async (resolve, reject) => {\n      this.logger.debug('currentEnvs');\n      this.logger.debug(this.currentEnvs);\n      let stopFns = [];\n      this.currentEnvs.forEach((envConf: SuiteEnvInfo, generatedEnvID: string) => {\n        stopFns.push(this.stop.call(this, generatedEnvID));\n      });\n\n      try {\n        await Promise.all(stopFns);\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  runScript(path, args) {\n    return new Promise(async (resolve, reject) => {\n      this.logger.info(`runScript ${path} <args>`);\n      this.logger.info(args);\n      const completeMessage = `${path} completed`;\n      let returned = false;\n\n      const script = spawn('/bin/bash', [path, args]);\n\n      // listen for errors and reject\n      script.stderr.on('data', (data) => {\n        if (!data) { data = \"\"; }\n        let output = data.toString();\n        this.logger.debug(output);\n\n        returned = true;\n        this.logger.error(`stderr detected in ${path}`);\n        reject(output);\n      });\n\n      // listen for data and discern if an error has been thrown.\n      script.stdout.on('data', (data) => {\n        if (!data) { return; }\n        let origOutput = data.toString();\n        let upperOutput = origOutput.toUpperCase();\n        this.logger.debug(origOutput);\n\n        if (upperOutput.includes(\"BUSYBEE_SH_ERROR\")) {\n          returned = true;\n          this.logger.error(`BUSYBEE_SH_ERROR detected in ${path}`);\n          reject(origOutput);\n        } else if (upperOutput.includes(\"BUSYBEE_SH_FINISHED\")) {\n          returned = true;\n          resolve(completeMessage)\n        };\n      });\n\n      script.on('close', () => {\n        if (!returned) {\n          resolve(completeMessage);\n        }\n      });\n    });\n  }\n\n  async start(generatedEnvID, suiteID, suiteEnvID) {\n    this.envsWaitingForProvision.push(generatedEnvID);\n    try {\n      await this.waitForTurn(generatedEnvID);\n    } catch (e) {\n      throw new Error(`${generatedEnvID} failed to wait it's turn`);\n    }\n\n    try {\n      await this.provisionEnv(generatedEnvID, suiteID, suiteEnvID);\n    } catch (e) {\n      throw new Error(`${generatedEnvID} failed provision`);\n    }\n\n    this.envsWaitingForProvision.shift();\n    this.logger.debug(`envsWaitingForProvision updated to ${this.envsWaitingForProvision}`);\n    // should have some if logic here for the future when we support more than just api\n\n    try {\n      await this.confirmHealthcheck(generatedEnvID);\n    } catch (e) {\n      throw new Error(`${generatedEnvID} failed to confirm the healthcheck`);\n    }\n\n    return;\n  }\n\n  async waitForTurn(generatedEnvID) {\n    return new Promise((resolve) => {\n      let wait = (timeout, cb) => {\n        this.logger.debug(`this.envsWaitingForProvision ${this.envsWaitingForProvision}`);\n        if (this.envsWaitingForProvision[0] != generatedEnvID) {\n          this.logger.debug(`${generatedEnvID} waiting its turn`);\n          setTimeout(() => { wait(timeout, cb)}, timeout);\n        } else {\n          cb();\n        }\n      };\n\n      wait(3000, () => {\n        resolve();\n      });\n    })\n  }\n\n  provisionEnv(generatedEnvID, suiteID, suiteEnvID) {\n    return new Promise(async (resolve, reject) => {\n      this.logger.debug(`provisionEnv ${generatedEnvID} ${suiteID} ${suiteEnvID}`);\n      this.logger.debug('currentHosts');\n      this.logger.debug(this.currentHosts, true);\n      let skipEnvProvisioning = false;\n      if (this.skipEnvProvisioningList && (this.skipEnvProvisioningList.indexOf(suiteID) !== -1)) {\n        skipEnvProvisioning = true;\n        this.logger.info(`Skipping Environment provisioning for Test Suite '${suiteID}'`);\n      } else {\n        this.logger.info(`Starting Environment: ${suiteEnvID} - ${generatedEnvID}`);\n      }\n\n      try {\n        let testSuiteConf = this.conf.parsedTestSuites.get(suiteID);\n        // 1. identify the host that this env should deploy to\n        let hostName = await this.getAvailableHostName(suiteID, suiteEnvID, generatedEnvID);\n        let ports;\n        if (testSuiteConf.ports) {\n          // 2. identify the ports that this env should use on this host\n          ports = await this.getAvailablePorts(hostName, suiteID, generatedEnvID);\n        }\n\n        if (skipEnvProvisioning) {\n          resolve(generatedEnvID);\n          return;\n        }\n\n        let busybeeDir = this.conf.filePaths.busybeeDir;\n        let args = {\n          generatedEnvID: generatedEnvID,\n          protocol: testSuiteConf.protocol,\n          hostName: hostName,\n          ports: ports,\n          busybeeDir: busybeeDir\n        };\n\n        this.logger.debug('script args');\n        this.logger.debug(testSuiteConf.env.startScript);\n        this.logger.debug(args);\n        await this.runScript(path.join(busybeeDir, testSuiteConf.env.startScript), [JSON.stringify(args)]);\n        // const { stdout, stderr } = await execFileCmd(, [JSON.stringify(args)], null);\n        //\n        //\n        // if (stderr) {\n        //   return reject(stderr);\n        // }\n\n        this.logger.info(`${generatedEnvID} created.`);\n        resolve(generatedEnvID);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  generateId() {\n    return uuidv1();\n  }\n\n  shouldSkipProvisioning(suiteID: string) {\n    return this.skipEnvProvisioningList && (this.skipEnvProvisioningList.indexOf(suiteID) !== -1);\n  }\n\n  /*\n    Attempts to identify a host with enough capacity for an env of this suite type\n  */\n  async getAvailableHostName(suiteID, suiteEnvID, generatedEnvID) {\n    return new Promise((resolve, reject) => {\n      this.logger.debug(`getAvailableHostName ${suiteID} | ${suiteEnvID} | ${generatedEnvID}`);\n      this.logger.debug(this.conf.parsedTestSuites.get(suiteID));\n      let suiteConf: ParsedTestSuite = this.conf.parsedTestSuites.get(suiteID);\n      let cost = suiteConf.env.resourceCost || 0;\n\n      let identifyHost = (cb) => {\n        this.logger.debug(`identifyHost`);\n        if (this.shouldSkipProvisioning(suiteID)) {\n          if (suiteConf.host) {\n            return cb(suiteConf.host);\n          } else {\n            this.logger.warn(\"--skipEnvProvisioning is enabled without providing a specific host for this TestSuite. This can yield undesirable results if more than 1 host is available.\")\n          }\n        }\n        // 1. calculate the capacity remaining for each host\n        let capacityHosts = _.map(this.currentHosts, (hostInfo, hostName) => {\n          return {\n            name: hostName,\n            remainingCapacity: hostInfo.capacity - hostInfo.load\n          }\n        });\n        this.logger.debug('Hosts with capacity');\n        this.logger.debug(capacityHosts, true);\n        // 2. order hosts by remainingCapacity\n        let freestHost = _.orderBy(capacityHosts, ['remainingCapacity'], 'desc')[0];\n        this.logger.info(`${generatedEnvID} Host with most capacity is ${freestHost.name}`);\n\n        // 3. if the capacity of the host with the most left is greater than the suite env cost. return.\n        if (freestHost && freestHost.remainingCapacity >= cost) {\n          cb(freestHost.name);\n        } else {\n          this.logger.info(`${generatedEnvID} Host ${freestHost.name} remaining capacity is ${freestHost.remainingCapacity}. ${cost} is required. Retrying...`);\n          setTimeout(() => {identifyHost(cb)}, 3000);\n        }\n      };\n\n      identifyHost((hostName) => {\n        this.logger.debug('currentHosts');\n        this.logger.debug(this.currentHosts, true);\n        // 1. add the load to the host to reserve it;\n        this.currentHosts[hostName].load += cost;\n        // 2. add an entry for this env on this host (may get ports added in the next step)\n        this.currentHosts[hostName].envs[generatedEnvID] = {};\n        // 3. add this env to the currentEnvs object\n        let envInfo = new SuiteEnvInfo(suiteConf, suiteID, suiteEnvID, cost, hostName);\n        this.currentEnvs.set(generatedEnvID, envInfo);\n\n        this.logger.debug('currentHosts updated');\n        this.logger.debug(this.currentHosts, true);\n        resolve(hostName);\n      });\n    });\n  }\n\n  /*\n    Discover available ports for a given hostName and suite definition\n  */\n  getAvailablePorts(hostName, suiteID, generatedEnvID) {\n    return new Promise(async (resolve, reject) => {\n      this.logger.debug(`getAvailablePorts ${hostName} | ${suiteID} | ${generatedEnvID}`);\n      let hostConf = Object.assign({}, this.currentHosts[hostName]);\n      let suiteConf = this.conf.parsedTestSuites.get(suiteID);\n\n      if (this.shouldSkipProvisioning(suiteID)) {\n        let ports = suiteConf.ports;\n        // 3. update global host and env info\n        this.updateGlobalPortInfo(hostName, generatedEnvID, ports, 0);\n        return resolve(ports);\n      }\n\n      // 1. find the current ports in use for this host\n      try {\n        let portsInUse = await this.getReservedBusybeePorts(hostConf);\n        this.logger.debug('portsInUse');\n        this.logger.debug(portsInUse);\n        // 2. determine available ports\n        let parallelMode = false;\n        if (suiteConf.env && suiteConf.env.parallel) {\n          parallelMode = suiteConf.env.parallel;\n        }\n        let { ports, portOffset } =\n          await this.identifyPorts(generatedEnvID, hostName, portsInUse, suiteConf.ports, 0, parallelMode);\n        // 3. update global host and env info\n        this.updateGlobalPortInfo(hostName, generatedEnvID, ports, portOffset);\n\n        // 4. resolve :)\n        resolve(ports);\n      } catch (e) {\n        this.logger.error(`Error while getting available ports: ${e.message}`);\n        reject(e);\n      }\n    });\n  }\n\n  updateGlobalPortInfo(hostName: string, generatedEnvID: string, ports: number[], portOffset: number) {\n    this.currentHosts[hostName].envs[generatedEnvID].ports = ports;\n    this.currentHosts[hostName].envs[generatedEnvID].portOffset = portOffset;\n    this.currentEnvs.get(generatedEnvID).ports = ports;\n  }\n\n  getReservedBusybeePorts(hostConf) {\n      return new Promise((resolve, reject) => {\n        this.logger.debug(`getReservedBusybeePorts`);\n        this.logger.debug(hostConf);\n        let portsInUse = [];\n        _.forEach(hostConf.envs, (envInfo, generatedEnvID) => {\n          this.logger.debug(`envInfo`)\n          this.logger.debug(envInfo);\n          if (envInfo.ports) {\n            envInfo.ports.forEach((port) => {\n              this.logger.debug(`port in use ${port}`);\n              portsInUse.push(port);\n            });\n          }\n        });\n\n        resolve(portsInUse)\n      });\n  }\n\n  /*\n    Recursively check for available ports\n\n    IF (parallelMode)\n      IF (portsTaken)\n        increment ports and try again\n      ELSE\n        we've identified available ports, return\n    ELSE\n      IF (portsTaken)\n        do not increment ports, try again\n  */\n  async identifyPorts(generatedEnvID, hostName, portsInUse, nextPorts, portOffset, parallelMode) {\n    this.logger.debug(`identifyPorts: ${generatedEnvID} ${hostName}, ${portsInUse}, ${nextPorts}, ${portOffset}, ${parallelMode}`);\n    let portsInUseByBusybee = await this.arePortsInUseByBusybee(portsInUse, nextPorts);\n    this.logger.debug(`portsInUseByBusybee: ${portsInUseByBusybee}`);\n    this.logger.debug(`parallelMode: ${parallelMode}`);\n\n    if (parallelMode) {\n      if (portsInUseByBusybee) {\n        let oldPorts = nextPorts;\n        nextPorts = nextPorts.map((p) => { return p + 1 });\n        this.logger.info(`${generatedEnvID} Ports ${oldPorts} in use by Busybee, retrying with ${nextPorts}`);\n        return await this.identifyPorts(generatedEnvID, hostName, portsInUse, nextPorts, portOffset + 1, parallelMode);\n      } else {\n        // not in use by busybee. see if ports are in use by something else\n        let portsTaken = await this.arePortsTaken(hostName, nextPorts);\n        if (portsTaken) {\n          // shift ports and try again\n          let oldPorts = nextPorts;\n          nextPorts = nextPorts.map((p) => { return p + 1 });\n          this.logger.info(`${generatedEnvID} Ports ${oldPorts} in use by an unknown service, retrying with ${nextPorts}`);\n          return await this.identifyPorts(generatedEnvID, hostName, portsInUse, nextPorts, portOffset + 1, parallelMode);\n        }\n\n        // ports identified, resolve.\n        let ret = {\n          ports: nextPorts,\n          portOffset: portOffset\n        };\n\n        this.logger.debug(`ports identified: ${JSON.stringify(ret)}`);\n        return ret;\n      }\n    } else {\n      if (portsInUseByBusybee) {\n        this.logger.debug(`parallelMode:false. Ports in use by Busybee, retrying...`);\n        this.logger.info(`${generatedEnvID} Ports in use by Busybee, retrying ${nextPorts}`);\n        return await this.identifyPorts(generatedEnvID, hostName, portsInUse, nextPorts, portOffset, parallelMode);\n      } else {\n        // not in use by busybee. see if ports are in use by something else\n        let portsTaken = await this.arePortsTaken(hostName, nextPorts);\n        if (portsTaken) {\n          // DONT shift ports and try again\n          this.logger.info(`${generatedEnvID} Ports in use by an unknown service, retrying ${nextPorts}`);\n          return await this.identifyPorts(generatedEnvID, hostName, portsInUse, nextPorts, portOffset, parallelMode);\n        }\n\n        // ports identified, resolve.\n        let ret = {\n          ports: nextPorts,\n          portOffset: portOffset\n        };\n\n        this.logger.debug(`ports identified: ${JSON.stringify(ret)}`);\n        return ret;\n      }\n    }\n  }\n\n  /*\n    Helper method for quickly checking if ports are known to be in use by busybee.\n    Cheaper than checking the actual port via port scan.\n  */\n  async arePortsInUseByBusybee(portsInUse, ports) {\n    this.logger.debug(`arePortsInUseByBusybee ${portsInUse} | ${ports}`);\n    return _.difference(ports, portsInUse).length < ports.length;\n  }\n\n  /*\n    Checks if a list of [hostName:port] is in use\n  */\n  async arePortsTaken(hostName, ports) {\n    this.logger.debug(`arePortsTaken ${hostName} ${ports}`);\n    let takenPorts = [];\n    let portCheckPromises = ports.map((p) => {\n      return this.isPortTaken(hostName, p);\n    });\n\n    let results = await Promise.all(portCheckPromises);\n    return _.includes(results, true);\n  }\n\n  /*\n    Checks if a single hostName:port is in use\n  */\n  isPortTaken(hostName, port) {\n    return new Promise((resolve, reject) => {\n      this.logger.debug(`isPortTaken ${hostName} ${port}`);\n      portscanner.checkPortStatus(port, hostName, (err, status) => {\n        // Status is 'open' if currently in use or 'closed' if available\n        if (err) return reject(err);\n        if (status === 'open') {\n          this.logger.debug(`${port} is in use`);\n          resolve(true);\n        } else {\n          this.logger.debug(`${port} is available`);\n          resolve(false);\n        }\n      })\n    });\n  }\n\n  /*\n    TODO: support multiple healthcheck types\n  */\n  confirmHealthcheck(generatedEnvID) {\n    return new Promise((resolve, reject) => {\n      this.logger.debug(`confirmHealthcheck ${generatedEnvID}`);\n      let suiteEnvConf = this.currentEnvs.get(generatedEnvID); // current-env-specific conf\n      this.logger.debug(suiteEnvConf);\n      let healthcheckConf = suiteEnvConf.healthcheck;\n\n      if (!healthcheckConf) {\n        this.logger.info(\"No Healthcheck provided. Moving on.\");\n        return resolve();\n      }\n\n      if (!healthcheckConf.type) {\n        this.logger.info(\"Healthcheck 'type' not provided. Skipping Healthcheck\");\n        return resolve();\n      }\n\n      if (healthcheckConf.type.toUpperCase() === \"REST\") {\n        let restClient = new RESTClient(this.conf, suiteEnvConf);\n        let requestConf: RequestOptsConfig = healthcheckConf.request;\n\n        // 1. get the initial healthcheckport definition from the\n        let healthcheckPort;\n        if (requestConf.port) {\n          healthcheckPort = requestConf.port;\n        } else {\n          healthcheckPort = suiteEnvConf.ports[0]; // default to restapi endpoint\n        }\n        // 2. get the port offset, apply.\n        let portOffset = this.currentHosts[suiteEnvConf.hostName].envs[generatedEnvID].portOffset\n        healthcheckPort += portOffset;\n        let opts = restClient.buildRequest(requestConf, healthcheckPort);\n\n        // retries the healthcheck endpoint every 3 seconds up to 20 times\n        // when successful calls the cb passed to confirmHealthcheck()\n        _async.retry({times: healthcheckConf.retries || 50, interval: opts.timeout},\n          (asyncCb) => {\n            this.logger.info(`Attempting healthcheck for ${generatedEnvID} on port ${healthcheckPort}`);\n            restClient.makeRequest(opts, (err, res, body) => {\n              if (err) {\n                asyncCb(\"failed\");\n                return;\n              }\n\n              if (res && res.statusCode === 200) {\n                this.logger.info(`Healthcheck Confirmed for ${generatedEnvID}!`);\n                asyncCb(null, true);\n              } else {\n                this.logger.debug(`Healthcheck returned: ${res.statusCode}`);\n                asyncCb(`Healthcheck failed for ${generatedEnvID}`);\n              }\n            })\n          }\n          , (err, results) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(results);\n            }\n          });\n      } else {\n        this.logger.info(\"Healthcheck 'type' not recognized. Skipping Healthcheck\");\n        resolve();\n      }\n\n    });\n  }\n\n  getCurrentEnv(generatedEnvID): SuiteEnvInfo {\n    return this.currentEnvs.get(generatedEnvID);\n  }\n\n}\n"]}