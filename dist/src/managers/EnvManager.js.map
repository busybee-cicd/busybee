{"version":3,"file":"EnvManager.js","sourceRoot":"","sources":["../../../src/managers/EnvManager.ts"],"names":[],"mappings":"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","sourcesContent":["import {spawn} from 'child_process';\r\nimport * as uuid from 'uuid';\r\nimport * as path from 'path';\r\nimport * as _ from 'lodash';\r\nimport * as _async from 'async';\r\nimport * as portscanner from 'portscanner';\r\nimport {Logger, LoggerConf} from 'busybee-util';\r\nimport {RESTClient} from '../lib/RESTClient';\r\nimport {BusybeeParsedConfig} from \"../models/config/BusybeeParsedConfig\";\r\nimport {EnvResourceConfig} from \"../models/config/common/EnvResourceConfig\";\r\nimport {HostConfig} from \"../models/config/user/HostConfig\";\r\nimport {RequestOptsConfig} from \"../models/config/common/RequestOptsConfig\";\r\nimport {TypedMap} from \"../lib/TypedMap\";\r\nimport {ParsedTestSuite} from \"../models/config/parsed/ParsedTestSuiteConfig\";\r\nimport {SuiteEnvInfo} from \"../lib/SuiteEnvInfo\";\r\nimport { IOUtil } from \"busybee-util\";\r\n\r\nexport class EnvManager {\r\n  private conf: BusybeeParsedConfig;\r\n  private logger: Logger;\r\n  private skipEnvProvisioningList: string[];\r\n  private envsWaitingForProvision: string[];\r\n  private currentHosts: any;\r\n  private currentEnvs: TypedMap<SuiteEnvInfo>;\r\n  private static BUSYBEE_ERROR: string = 'BUSYBEE_ERROR';\r\n  private static BUSYBEE_RETURN: string = 'BUSYBEE_RETURN';\r\n\r\n  constructor(conf: BusybeeParsedConfig) {\r\n    this.conf = _.cloneDeep(conf);\r\n    const loggerConf = new LoggerConf(this, conf.logLevel, null);\r\n    this.logger = new Logger(loggerConf);\r\n    if (conf.getSkipEnvProvisioning().length > 0) {\r\n      this.skipEnvProvisioningList = conf.getSkipEnvProvisioning();\r\n    }\r\n    this.currentHosts = this.buildHosts(conf);\r\n    this.currentEnvs = new TypedMap<SuiteEnvInfo>();\r\n\r\n    this.envsWaitingForProvision = [];\r\n  }\r\n\r\n  /*\r\n   envConf\r\n   {\r\n   hosts: ['host1', 'host2'],\r\n   testSuites: {\r\n   'test suite 1': {\r\n   'skip': false,\r\n   'protocol': 'http',\r\n   'ports': [8080],\r\n   'env': {\r\n   'parallel': true,\r\n   'resourceCost': 50,\r\n   'startScript': 'api/envStart.sh',\r\n   'stopScript': 'api/envStop.sh',\r\n   'healthcheck': {\r\n   'type': 'REST',\r\n   'retries': 30,\r\n   'request': {\r\n   'path': '/healthcheck',\r\n   'timeout': 5000\r\n   }\r\n   }\r\n   }\r\n   }\r\n   }\r\n   }\r\n\r\n   currentHosts\r\n   {\r\n   'host1': {\r\n   'load': 0,\r\n   'envs': {\r\n   '111-111-111-111': {\r\n   ports: [8080],\r\n   portOffset: 0\r\n   }\r\n   }\r\n   },\r\n   'host2': {\r\n   'capacity': 0,\r\n   'envs': {\r\n   '222-222-222-222': {\r\n   ports: [8080],\r\n   portOffset: 0\r\n   }\r\n   }\r\n   }\r\n   }\r\n\r\n   currentEnvs\r\n   {\r\n   '111-111-111-111': {\r\n   'suiteId': 'test suite 1',\r\n   'suiteEnvID': ''\r\n   'hostName': 'host1',\r\n   'resourceCost': 100,\r\n   'startScript': '',\r\n   'stopScript': '',\r\n   'testSets': []\r\n   },\r\n   '222-222-222-222': {\r\n   'suiteId': 'test suite 1',\r\n   'suiteEnvID': ''\r\n   'hostName': 'host2',\r\n   'resourceCost': 100,\r\n   'startScript': '',\r\n   'stopScript': ''\r\n   'testSets': []\r\n   }\r\n   }\r\n   */\r\n  buildHosts(conf: BusybeeParsedConfig) {\r\n    this.logger.trace(`buildHostConfs`);\r\n    // TODO add back\r\n    // if (!conf.envResources.hosts) {\r\n    //   this.logger.info(\"No host information provided. Only generatedEnvID info will be passed to scripts\");\r\n    //   return;\r\n    // }\r\n    let hosts = {};\r\n    if (conf.localMode) {\r\n      hosts['localhost'] = {\r\n        load: 0,\r\n        capacity: 100,\r\n        envs: {}\r\n      }\r\n    } else {\r\n      conf.envResources.forEach((envConfig: EnvResourceConfig) => {\r\n        envConfig.hosts.forEach((hostConfig: HostConfig) => {\r\n          hosts[hostConfig.name] = {\r\n            load: 0,\r\n            capacity: hostConfig.capacity || 100,\r\n            envs: {}\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    this.logger.trace(hosts, true);\r\n    return hosts;\r\n  }\r\n\r\n  async stop(generatedEnvID: string) {\r\n    this.logger.trace(`stop ${generatedEnvID}`);\r\n    return new Promise(async(resolve, reject) => {\r\n      let envInfo = _.cloneDeep(this.currentEnvs.get(generatedEnvID));\r\n      // remove the env from currentEnvs\r\n      this.currentEnvs.remove(generatedEnvID);\r\n\r\n      if (_.isEmpty(envInfo)) {\r\n        return resolve();\r\n      }\r\n\r\n      if (this.shouldSkipProvisioning(envInfo.suiteID)) {\r\n        this.logger.info(`Skipping shutdown of '${envInfo.suiteID}'s environment. Suite's Environment was not provisioned by Busybee`);\r\n        return resolve();\r\n      }\r\n\r\n      this.logger.info(`Stopping Environment: ${envInfo.suiteEnvID} ${generatedEnvID}`);\r\n\r\n      this.logger.trace('envInfo');\r\n      this.logger.trace(envInfo)\r\n      let ports = this.currentHosts[envInfo.hostName].envs[generatedEnvID].ports;\r\n      let busybeeDir = this.conf.filePaths.busybeeDir;\r\n      let args = {\r\n        generatedEnvID: generatedEnvID,\r\n        protocol: envInfo.protocol,\r\n        hostName: envInfo.hostName,\r\n        ports: ports,\r\n        busybeeDir: busybeeDir,\r\n        startScriptReturnData: envInfo.getStartScriptReturnData(),\r\n        startScriptErrorData: envInfo.getStartScriptErrorData(),\r\n        stopData: envInfo.stopData\r\n      };\r\n\r\n      let filePath = path.join(busybeeDir, envInfo.stopScript);\r\n      this.logger.trace(filePath);\r\n      this.logger.trace('scriptArgs');\r\n      this.logger.trace(args, true);\r\n\r\n      // 1. stop the env\r\n      try {\r\n        await this.runScript(filePath, [JSON.stringify(args)]);\r\n\r\n        // remove env info from the host\r\n        this.removeEnvFromHost(envInfo.hostName, envInfo.resourceCost, generatedEnvID);\r\n\r\n        this.logger.trace(`this.currentHosts after removing ${generatedEnvID}`);\r\n        this.logger.trace(this.currentHosts, true);\r\n        resolve();\r\n      } catch (e) {\r\n        this.logger.debug(`Error caught while stopping ${generatedEnvID}`);\r\n        this.logger.info(e.message);\r\n        // failed, add it back\r\n        this.currentEnvs.set(generatedEnvID, envInfo);\r\n        reject(e);\r\n        return;\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  removeEnvFromHost(hostName: string, resourceCost: number, generatedEnvID: string) {\r\n    // remove the load from the host\r\n    this.currentHosts[hostName].load -= resourceCost;\r\n    // remove the env from the currentHosts\r\n    delete this.currentHosts[hostName].envs[generatedEnvID];\r\n  }\r\n\r\n  async stopAll() {\r\n    this.logger.trace('stopAll');\r\n\r\n    return new Promise(async(resolve, reject) => {\r\n      this.logger.trace('currentEnvs');\r\n      this.logger.trace(this.currentEnvs);\r\n      let stopFns = [];\r\n      this.currentEnvs.forEach((envConf: SuiteEnvInfo, generatedEnvID: string) => {\r\n        stopFns.push(this.stop.call(this, generatedEnvID));\r\n      });\r\n\r\n      try {\r\n        await Promise.all(stopFns);\r\n        resolve();\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async start(generatedEnvID, suiteID, suiteEnvID) {\r\n    this.envsWaitingForProvision.push(generatedEnvID);\r\n    try {\r\n      await this.waitForTurn(generatedEnvID);\r\n    } catch (e) {\r\n      throw new Error(`${generatedEnvID} failed to wait it's turn`);\r\n    }\r\n\r\n    try {\r\n      await this.provisionEnv(generatedEnvID, suiteID, suiteEnvID);\r\n      this.logger.trace(`${generatedEnvID} provisioned successfully`);\r\n      this.envsWaitingForProvision.shift();\r\n    } catch (e) {\r\n      this.envsWaitingForProvision.shift();\r\n      throw new Error(`${generatedEnvID} failed to provision`);\r\n    }\r\n\r\n    this.logger.trace(`envsWaitingForProvision updated to ${this.envsWaitingForProvision}`);\r\n\r\n    // should have some if logic here for the future when we support more than just api\r\n\r\n    try {\r\n      await this.confirmHealthcheck(generatedEnvID);\r\n    } catch (e) {\r\n      throw new Error(`${generatedEnvID} failed to confirm the healthcheck`);\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  async waitForTurn(generatedEnvID) {\r\n    return new Promise((resolve) => {\r\n      let wait = (timeout, cb) => {\r\n        this.logger.trace(`this.envsWaitingForProvision ${this.envsWaitingForProvision}`);\r\n        if (this.envsWaitingForProvision[0] != generatedEnvID) {\r\n          this.logger.trace(`${generatedEnvID} waiting its turn`);\r\n          setTimeout(() => {\r\n            wait(timeout, cb)\r\n          }, timeout);\r\n        } else {\r\n          cb();\r\n        }\r\n      };\r\n\r\n      wait(3000, () => {\r\n        resolve();\r\n      });\r\n    })\r\n  }\r\n\r\n  provisionEnv(generatedEnvID, suiteID, suiteEnvID) {\r\n    return new Promise(async(resolve, reject) => {\r\n      this.logger.trace(`provisionEnv ${generatedEnvID} ${suiteID} ${suiteEnvID}`);\r\n      this.logger.trace('currentHosts');\r\n      this.logger.trace(this.currentHosts, true);\r\n      if (this.shouldSkipProvisioning(suiteID)) {\r\n        this.logger.info(`Skipping Environment provisioning for Test Suite '${suiteID}'`);\r\n      } else {\r\n        this.logger.info(`Starting Environment: ${suiteEnvID} - ${generatedEnvID}`);\r\n      }\r\n\r\n      try {\r\n        let testSuiteConf = this.conf.parsedTestSuites.get(suiteID);\r\n        // 1. identify the host that this env should deploy to\r\n        let hostName = await this.getAvailableHostName(suiteID, suiteEnvID, generatedEnvID);\r\n        let ports;\r\n        if (testSuiteConf.ports) {\r\n          // 2. identify the ports that this env should use on this host\r\n          ports = await this.getAvailablePorts(hostName, suiteID, generatedEnvID);\r\n        }\r\n\r\n        if (this.shouldSkipProvisioning(suiteID)) {\r\n          resolve(generatedEnvID);\r\n          return;\r\n        }\r\n\r\n        let busybeeDir = this.conf.filePaths.busybeeDir;\r\n        let args = {\r\n          generatedEnvID: generatedEnvID,\r\n          protocol: testSuiteConf.protocol,\r\n          hostName: hostName,\r\n          ports: ports,\r\n          busybeeDir: busybeeDir,\r\n          startData: this.currentEnvs.get(generatedEnvID).startData\r\n        };\r\n\r\n        this.logger.trace('script args');\r\n        this.logger.trace(testSuiteConf.env.startScript);\r\n        this.logger.trace(args);\r\n        try {\r\n          let returnData = await this.runScript(path.join(busybeeDir, testSuiteConf.env.startScript), [JSON.stringify(args)]);\r\n\r\n          if (returnData) {\r\n            this.currentEnvs.get(generatedEnvID).setStartScriptReturnData(returnData);\r\n          }\r\n        } catch (err) {\r\n          /*\r\n          set the error information so that it can be used by the stopScript\r\n          if necessary but then re-throw the error so that it can be handled by\r\n          the orchestrating fns.\r\n          */\r\n          this.currentEnvs.get(generatedEnvID).setStartScriptErrorData(err);\r\n          throw new Error(err);\r\n        }\r\n\r\n        this.logger.info(`${generatedEnvID} created.`);\r\n        resolve(generatedEnvID);\r\n      } catch (err) {\r\n        reject(err);\r\n      }\r\n    });\r\n  }\r\n\r\n  runScript(path, args): Promise<string> {\r\n    return new Promise(async(resolve, reject) => {\r\n      this.logger.info(`runScript ${path} <args>`);\r\n      this.logger.debug(args);\r\n      const completeMessage = `${path} completed`;\r\n      let returned = false;\r\n      const script = spawn('/bin/bash', [path, args]);\r\n\r\n      // listen to stderr for errors and reject\r\n      script.stderr.on('data', (data) => {\r\n        if (returned) {\r\n          return;\r\n        }\r\n        if (!data) {\r\n          data = \"\";\r\n        }\r\n        let dataStr = data.toString();\r\n        this.logger.debug(dataStr);\r\n\r\n        if (dataStr.includes(EnvManager.BUSYBEE_ERROR)) {\r\n          returned = true;\r\n          reject(dataStr.replace(`${EnvManager.BUSYBEE_ERROR} `, ''));\r\n          script.kill();\r\n        }\r\n      });\r\n\r\n      // listen to stdout for data\r\n      script.stdout.on('data', (data) => {\r\n        if (returned || _.isEmpty(data)) {\r\n          return;\r\n        }\r\n\r\n        let lines = IOUtil.parseDataBuffer(data);\r\n        lines.forEach((l) => {\r\n          this.logger.debug(l);\r\n\r\n          if (l.includes(EnvManager.BUSYBEE_ERROR)) {\r\n            returned = true;\r\n            this.logger.error(`${EnvManager.BUSYBEE_ERROR} detected in ${path}`);\r\n            reject(l.replace(`${EnvManager.BUSYBEE_ERROR} `, ''));\r\n            script.kill();\r\n          } else if (l.includes(EnvManager.BUSYBEE_RETURN)) {\r\n            let returnedData = l.replace(`${EnvManager.BUSYBEE_RETURN} `, '');\r\n            this.logger.debug(`${path} Returned data:`);\r\n            this.logger.debug(returnedData);\r\n            returned = true;\r\n            resolve(returnedData);\r\n            script.kill();\r\n            this.logger.debug(completeMessage);\r\n          };\r\n        });\r\n      });\r\n\r\n      // default return via script exit 0. no return value\r\n      script.on('close', () => {\r\n        if (!returned) {\r\n          resolve();\r\n          this.logger.debug(completeMessage);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  generateId() {\r\n    return uuid.v1();\r\n  }\r\n\r\n  shouldSkipProvisioning(suiteID: string) {\r\n    return this.skipEnvProvisioningList && (this.skipEnvProvisioningList.indexOf(suiteID) !== -1);\r\n  }\r\n\r\n  /*\r\n   Attempts to identify a host with enough capacity for an env of this suite type\r\n   */\r\n  async getAvailableHostName(suiteID, suiteEnvID, generatedEnvID) {\r\n    return new Promise((resolve, reject) => {\r\n      this.logger.trace(`getAvailableHostName ${suiteID} | ${suiteEnvID} | ${generatedEnvID}`);\r\n      this.logger.trace(this.conf.parsedTestSuites.get(suiteID));\r\n      let suiteConf: ParsedTestSuite = this.conf.parsedTestSuites.get(suiteID);\r\n      let cost = suiteConf.env.resourceCost || 0;\r\n\r\n      let identifyHost = (cb) => {\r\n        this.logger.trace(`identifyHost`);\r\n        // see if we have a pre-determined host\r\n        if (suiteConf.host) {\r\n          return cb(suiteConf.host);\r\n        } else if (this.conf.localMode) {\r\n          return cb('localhost');\r\n        }\r\n        // 1. calculate the capacity remaining for each host\r\n        let capacityHosts = _.map(this.currentHosts, (hostInfo: any, hostName) => {\r\n          return {\r\n            name: hostName,\r\n            remainingCapacity: hostInfo.capacity - hostInfo.load\r\n          }\r\n        });\r\n        this.logger.trace('Hosts with capacity');\r\n        this.logger.trace(capacityHosts, true);\r\n        // 2. order hosts by remainingCapacity\r\n        let freestHost = _.orderBy(capacityHosts, ['remainingCapacity'], 'desc')[0];\r\n        this.logger.info(`${generatedEnvID} Host with most capacity is ${freestHost.name}`);\r\n\r\n        // 3. if the capacity of the host with the most left is greater than the suite env cost. return.\r\n        if (freestHost && freestHost.remainingCapacity >= cost) {\r\n          cb(freestHost.name);\r\n        } else {\r\n          this.logger.info(`${generatedEnvID} Host ${freestHost.name} remaining capacity is ${freestHost.remainingCapacity}. ${cost} is required. Retrying...`);\r\n          setTimeout(() => {\r\n            identifyHost(cb)\r\n          }, 3000);\r\n        }\r\n      };\r\n\r\n      identifyHost((hostName) => {\r\n        this.logger.trace('currentHosts');\r\n        this.logger.trace(this.currentHosts, true);\r\n        // 1. add the load to the host to reserve it;\r\n        this.currentHosts[hostName].load += cost;\r\n        // 2. add an entry for this env on this host (may get ports added in the next step)\r\n        this.currentHosts[hostName].envs[generatedEnvID] = {};\r\n        // 3. add this env to the currentEnvs object\r\n        let envInfo = new SuiteEnvInfo(suiteConf, suiteEnvID, cost, hostName);\r\n        this.currentEnvs.set(generatedEnvID, envInfo);\r\n\r\n        this.logger.trace('currentHosts updated');\r\n        this.logger.trace(this.currentHosts, true);\r\n        resolve(hostName);\r\n      });\r\n    });\r\n  }\r\n\r\n  /*\r\n   Discover available ports for a given hostName and suite definition\r\n   */\r\n  getAvailablePorts(hostName, suiteID, generatedEnvID) {\r\n    return new Promise(async(resolve, reject) => {\r\n      this.logger.trace(`getAvailablePorts ${hostName} | ${suiteID} | ${generatedEnvID}`);\r\n      let hostConf = Object.assign({}, this.currentHosts[hostName]);\r\n      let suiteConf = this.conf.parsedTestSuites.get(suiteID);\r\n\r\n      if (this.shouldSkipProvisioning(suiteID)) {\r\n        let ports = suiteConf.ports;\r\n        // 3. update global host and env info\r\n        this.updateGlobalPortInfo(hostName, generatedEnvID, ports, 0);\r\n        return resolve(ports);\r\n      }\r\n\r\n      // 1. find the current ports in use for this host\r\n      try {\r\n        let portsInUse = await this.getReservedBusybeePorts(hostConf);\r\n        this.logger.trace('portsInUse');\r\n        this.logger.trace(portsInUse);\r\n        // 2. determine available ports\r\n        let parallelMode = false;\r\n        if (suiteConf.env && suiteConf.env.parallel) {\r\n          parallelMode = suiteConf.env.parallel;\r\n        }\r\n        let {ports, portOffset} =\r\n          await this.identifyPorts(generatedEnvID, hostName, portsInUse, suiteConf.ports, 0, parallelMode);\r\n        // 3. update global host and env info\r\n        this.updateGlobalPortInfo(hostName, generatedEnvID, ports, portOffset);\r\n\r\n        // 4. resolve :)\r\n        resolve(ports);\r\n      } catch (e) {\r\n        this.logger.error(`Error while getting available ports: ${e.message}`);\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  updateGlobalPortInfo(hostName: string, generatedEnvID: string, ports: number[], portOffset: number) {\r\n    this.currentHosts[hostName].envs[generatedEnvID].ports = ports;\r\n    this.currentHosts[hostName].envs[generatedEnvID].portOffset = portOffset;\r\n    this.currentEnvs.get(generatedEnvID).ports = ports;\r\n  }\r\n\r\n  getReservedBusybeePorts(hostConf) {\r\n    return new Promise((resolve, reject) => {\r\n      this.logger.trace(`getReservedBusybeePorts`);\r\n      this.logger.trace(hostConf);\r\n      let portsInUse = [];\r\n      _.forEach(hostConf.envs, (envInfo, generatedEnvID) => {\r\n        this.logger.trace(`envInfo`)\r\n        this.logger.trace(envInfo);\r\n        if (envInfo.ports) {\r\n          envInfo.ports.forEach((port) => {\r\n            this.logger.trace(`port in use ${port}`);\r\n            portsInUse.push(port);\r\n          });\r\n        }\r\n      });\r\n\r\n      resolve(portsInUse)\r\n    });\r\n  }\r\n\r\n  /*\r\n   Recursively check for available ports\r\n\r\n   IF (parallelMode)\r\n    IF (portsTaken)\r\n      increment ports and try again\r\n    ELSE\r\n      we've identified available ports, return\r\n   ELSE\r\n    IF (portsTaken)\r\n      do not increment ports, try again\r\n   */\r\n  async identifyPorts(generatedEnvID, hostName, portsInUse, nextPorts, portOffset, parallelMode) {\r\n    this.logger.trace(`identifyPorts: ${generatedEnvID} ${hostName}, ${portsInUse}, ${nextPorts}, ${portOffset}, ${parallelMode}`);\r\n    let portsInUseByBusybee = await this.arePortsInUseByBusybee(portsInUse, nextPorts);\r\n    this.logger.trace(`portsInUseByBusybee: ${portsInUseByBusybee}`);\r\n    this.logger.trace(`parallelMode: ${parallelMode}`);\r\n\r\n    if (parallelMode) {\r\n      if (portsInUseByBusybee) {\r\n        let oldPorts = nextPorts;\r\n        nextPorts = nextPorts.map((p) => {\r\n          return p + 1\r\n        });\r\n        this.logger.info(`${generatedEnvID} Ports ${oldPorts} in use by Busybee, retrying with ${nextPorts}`);\r\n        return await this.identifyPorts(generatedEnvID, hostName, portsInUse, nextPorts, portOffset + 1, parallelMode);\r\n      } else {\r\n        // not in use by busybee. see if ports are in use by something else\r\n        let portsTaken = await this.arePortsTaken(hostName, nextPorts);\r\n        if (portsTaken) {\r\n          // shift ports and try again\r\n          let oldPorts = nextPorts;\r\n          nextPorts = nextPorts.map((p) => {\r\n            return p + 1\r\n          });\r\n          this.logger.info(`${generatedEnvID} Ports ${oldPorts} in use by an unknown service, retrying with ${nextPorts}`);\r\n          return await this.identifyPorts(generatedEnvID, hostName, portsInUse, nextPorts, portOffset + 1, parallelMode);\r\n        }\r\n\r\n        // ports identified, resolve.\r\n        let ret = {\r\n          ports: nextPorts,\r\n          portOffset: portOffset\r\n        };\r\n\r\n        this.logger.trace(`ports identified: ${JSON.stringify(ret)}`);\r\n        return ret;\r\n      }\r\n    } else {\r\n      if (portsInUseByBusybee) {\r\n        this.logger.trace(`parallelMode:false. Ports in use by Busybee, retrying...`);\r\n        this.logger.info(`${generatedEnvID} Ports in use by Busybee, retrying ${nextPorts}`);\r\n        return await this.identifyPorts(generatedEnvID, hostName, portsInUse, nextPorts, portOffset, parallelMode);\r\n      } else {\r\n        // not in use by busybee. see if ports are in use by something else\r\n        let portsTaken = await this.arePortsTaken(hostName, nextPorts);\r\n        if (portsTaken) {\r\n          // DONT shift ports and try again\r\n          this.logger.info(`${generatedEnvID} Ports in use by an unknown service, retrying ${nextPorts}`);\r\n          return await this.identifyPorts(generatedEnvID, hostName, portsInUse, nextPorts, portOffset, parallelMode);\r\n        }\r\n\r\n        // ports identified, resolve.\r\n        let ret = {\r\n          ports: nextPorts,\r\n          portOffset: portOffset\r\n        };\r\n\r\n        this.logger.trace(`ports identified: ${JSON.stringify(ret)}`);\r\n        return ret;\r\n      }\r\n    }\r\n  }\r\n\r\n  /*\r\n   Helper method for quickly checking if ports are known to be in use by busybee.\r\n   Cheaper than checking the actual port via port scan.\r\n   */\r\n  async arePortsInUseByBusybee(portsInUse, ports) {\r\n    this.logger.trace(`arePortsInUseByBusybee ${portsInUse} | ${ports}`);\r\n    return _.difference(ports, portsInUse).length < ports.length;\r\n  }\r\n\r\n  /*\r\n   Checks if a list of [hostName:port] is in use\r\n   */\r\n  async arePortsTaken(hostName, ports) {\r\n    this.logger.trace(`arePortsTaken ${hostName} ${ports}`);\r\n    let takenPorts = [];\r\n    let portCheckPromises = ports.map((p) => {\r\n      return this.isPortTaken(hostName, p);\r\n    });\r\n\r\n    let results = await Promise.all(portCheckPromises);\r\n    return _.includes(results, true);\r\n  }\r\n\r\n  /*\r\n   Checks if a single hostName:port is in use\r\n   */\r\n  isPortTaken(hostName, port) {\r\n    return new Promise((resolve, reject) => {\r\n      this.logger.trace(`isPortTaken ${hostName} ${port}`);\r\n      portscanner.checkPortStatus(port, hostName, (err, status) => {\r\n        // Status is 'open' if currently in use or 'closed' if available\r\n        if (err) return reject(err);\r\n        if (status === 'open') {\r\n          this.logger.trace(`${port} is in use`);\r\n          resolve(true);\r\n        } else {\r\n          this.logger.trace(`${port} is available`);\r\n          resolve(false);\r\n        }\r\n      })\r\n    });\r\n  }\r\n\r\n  /*\r\n   TODO: support multiple healthcheck types\r\n   */\r\n  confirmHealthcheck(generatedEnvID) {\r\n    return new Promise((resolve, reject) => {\r\n      this.logger.trace(`confirmHealthcheck ${generatedEnvID}`);\r\n      let suiteEnvConf = this.currentEnvs.get(generatedEnvID); // current-env-specific conf\r\n      this.logger.trace(suiteEnvConf);\r\n      let healthcheckConf = suiteEnvConf.healthcheck;\r\n\r\n      if (!healthcheckConf) {\r\n        this.logger.info(\"No Healthcheck provided. Moving on.\");\r\n        return resolve();\r\n      }\r\n\r\n      if (!healthcheckConf.type) {\r\n        this.logger.info(\"Healthcheck 'type' not provided. Skipping Healthcheck\");\r\n        return resolve();\r\n      }\r\n\r\n      if (healthcheckConf.type.toUpperCase() === \"REST\") {\r\n        let restClient = new RESTClient(this.conf, suiteEnvConf);\r\n        let requestConf: RequestOptsConfig = healthcheckConf.request;\r\n\r\n        // 1. get the initial healthcheckport definition from the\r\n        let healthcheckPort;\r\n        if (requestConf.port) {\r\n          healthcheckPort = requestConf.port;\r\n        } else {\r\n          healthcheckPort = suiteEnvConf.ports[0]; // default to restapi path\r\n        }\r\n        // 2. get the port offset, apply.\r\n        let portOffset = this.currentHosts[suiteEnvConf.hostName].envs[generatedEnvID].portOffset\r\n        healthcheckPort += portOffset;\r\n        let opts = restClient.buildRequest(requestConf, healthcheckPort);\r\n\r\n        // retries the healthcheck path every 3 seconds up to 20 times\r\n        // when successful calls the cb passed to confirmHealthcheck()\r\n        _async.retry({times: healthcheckConf.retries || 50, interval: opts.timeout},\r\n          (asyncCb) => {\r\n            this.logger.info(`Attempting healthcheck for ${generatedEnvID} on port ${healthcheckPort}`);\r\n            this.logger.debug(opts);\r\n            restClient.makeRequest(opts)\r\n              .then((response) => {\r\n                if (response.statusCode === 200) {\r\n                  this.logger.info(`Healthcheck Confirmed for ${generatedEnvID}!`);\r\n                  asyncCb(null, true);\r\n                } else {\r\n                  this.logger.debug(`Healthcheck returned: ${response.statusCode}`);\r\n                  this.logger.trace(response, true);\r\n                  asyncCb(`Healthcheck failed for ${generatedEnvID}`);\r\n                }\r\n              })\r\n              .catch((err) => {\r\n                asyncCb(\"failed\");\r\n              });\r\n          }\r\n          , (err, results) => {\r\n            if (err) {\r\n              reject(err);\r\n            } else {\r\n              resolve(results);\r\n            }\r\n          });\r\n      } else {\r\n        this.logger.info(\"Healthcheck 'type' not recognized. Skipping Healthcheck\");\r\n        resolve();\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  getCurrentEnv(generatedEnvID): SuiteEnvInfo {\r\n    return this.currentEnvs.get(generatedEnvID);\r\n  }\r\n\r\n  getCurrentEnvs(): TypedMap<SuiteEnvInfo> {\r\n    return this.currentEnvs;\r\n  }\r\n\r\n  getCurrentHosts(): any {\r\n    return this.currentHosts;\r\n  }\r\n\r\n  getRunTimestamp(): number {\r\n    return this.conf.runTimestamp;\r\n  }\r\n\r\n  getRunId(): string {\r\n    return this.conf.runId;\r\n  }\r\n}\r\n"]}