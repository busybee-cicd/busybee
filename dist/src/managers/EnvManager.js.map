{"version":3,"file":"EnvManager.js","sourceRoot":"","sources":["../../../src/managers/EnvManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { spawn } from 'child_process';\r\nimport * as uuid from 'uuid';\r\nimport * as path from 'path';\r\nimport * as _ from 'lodash';\r\nimport * as portscanner from 'portscanner';\r\nimport * as promiseTools from 'promise-tools';\r\nimport { Logger, LoggerConf } from 'busybee-util';\r\nimport { RESTClient } from '../lib/RESTClient';\r\nimport { BusybeeParsedConfig } from '../models/config/BusybeeParsedConfig';\r\nimport { EnvResourceConfig } from '../models/config/common/EnvResourceConfig';\r\nimport { HostConfig } from '../models/config/user/HostConfig';\r\nimport { RequestOptsConfig } from '../models/config/common/RequestOptsConfig';\r\nimport { TypedMap } from '../lib/TypedMap';\r\nimport { ParsedTestSuite } from '../models/config/parsed/ParsedTestSuiteConfig';\r\nimport { SuiteEnvInfo } from '../lib/SuiteEnvInfo';\r\nimport { IOUtil } from 'busybee-util';\r\n\r\nexport class EnvManager {\r\n  private conf: BusybeeParsedConfig;\r\n  private logger: Logger;\r\n  private skipEnvProvisioningList: string[];\r\n  private envsWaitingForProvision: string[];\r\n  private currentHosts: any;\r\n  private currentEnvs: TypedMap<SuiteEnvInfo>;\r\n  private static BUSYBEE_ERROR: string = 'BUSYBEE_ERROR';\r\n  private static BUSYBEE_RETURN: string = 'BUSYBEE_RETURN';\r\n\r\n  constructor(conf: BusybeeParsedConfig) {\r\n    this.conf = _.cloneDeep(conf);\r\n    const loggerConf = new LoggerConf(this, conf.logLevel, null);\r\n    this.logger = new Logger(loggerConf);\r\n    if (conf.getSkipEnvProvisioning().length > 0) {\r\n      this.skipEnvProvisioningList = conf.getSkipEnvProvisioning();\r\n    }\r\n    this.currentHosts = this.buildHosts(conf);\r\n    this.currentEnvs = new TypedMap<SuiteEnvInfo>();\r\n\r\n    this.envsWaitingForProvision = [];\r\n  }\r\n\r\n  /*\r\n   envConf\r\n   {\r\n   hosts: ['host1', 'host2'],\r\n   testSuites: {\r\n   'test suite 1': {\r\n   'skip': false,\r\n   'protocol': 'http',\r\n   'ports': [8080],\r\n   'env': {\r\n   'parallel': true,\r\n   'resourceCost': 50,\r\n   'startScript': 'api/envStart.sh',\r\n   'stopScript': 'api/envStop.sh',\r\n   'healthcheck': {\r\n   'type': 'REST',\r\n   'retries': 30,\r\n   'request': {\r\n   'path': '/healthcheck',\r\n   'timeout': 5000\r\n   }\r\n   }\r\n   }\r\n   }\r\n   }\r\n   }\r\n\r\n   currentHosts\r\n   {\r\n   'host1': {\r\n   'load': 0,\r\n   'envs': {\r\n   '111-111-111-111': {\r\n   ports: [8080],\r\n   portOffset: 0\r\n   }\r\n   }\r\n   },\r\n   'host2': {\r\n   'capacity': 0,\r\n   'envs': {\r\n   '222-222-222-222': {\r\n   ports: [8080],\r\n   portOffset: 0\r\n   }\r\n   }\r\n   }\r\n   }\r\n\r\n   currentEnvs\r\n   {\r\n   '111-111-111-111': {\r\n   'suiteId': 'test suite 1',\r\n   'suiteEnvID': ''\r\n   'hostName': 'host1',\r\n   'resourceCost': 100,\r\n   'startScript': '',\r\n   'stopScript': '',\r\n   'testSets': []\r\n   },\r\n   '222-222-222-222': {\r\n   'suiteId': 'test suite 1',\r\n   'suiteEnvID': ''\r\n   'hostName': 'host2',\r\n   'resourceCost': 100,\r\n   'startScript': '',\r\n   'stopScript': ''\r\n   'testSets': []\r\n   }\r\n   }\r\n   */\r\n  buildHosts(conf: BusybeeParsedConfig) {\r\n    this.logger.trace(`buildHostConfs`);\r\n    // TODO add back\r\n    // if (!conf.envResources.hosts) {\r\n    //   this.logger.info(\"No host information provided. Only generatedEnvID info will be passed to scripts\");\r\n    //   return;\r\n    // }\r\n    let hosts = {};\r\n    if (conf.localMode) {\r\n      hosts['localhost'] = {\r\n        load: 0,\r\n        capacity: 100,\r\n        envs: {}\r\n      };\r\n    } else {\r\n      conf.envResources.forEach((envConfig: EnvResourceConfig) => {\r\n        envConfig.hosts.forEach((hostConfig: HostConfig) => {\r\n          hosts[hostConfig.name] = {\r\n            load: 0,\r\n            capacity: hostConfig.capacity || 100,\r\n            envs: {}\r\n          };\r\n        });\r\n      });\r\n    }\r\n\r\n    this.logger.trace(hosts, true);\r\n    return hosts;\r\n  }\r\n\r\n  async stop(generatedEnvID: string) {\r\n    this.logger.trace(`stop ${generatedEnvID}`);\r\n\r\n    let envInfo = _.cloneDeep(this.currentEnvs.get(generatedEnvID));\r\n    // remove the env from currentEnvs\r\n    this.currentEnvs.remove(generatedEnvID);\r\n\r\n    if (_.isEmpty(envInfo)) {\r\n      return;\r\n    }\r\n\r\n    if (this.shouldSkipProvisioning(envInfo.suiteID)) {\r\n      this.logger.info(\r\n        `Skipping shutdown of '${\r\n          envInfo.suiteID\r\n        }'s environment. Suite's Environment was not provisioned by Busybee`\r\n      );\r\n      return;\r\n    }\r\n\r\n    this.logger.info(\r\n      `Stopping Environment: ${envInfo.suiteEnvID} ${generatedEnvID}`\r\n    );\r\n\r\n    this.logger.trace('envInfo');\r\n    this.logger.trace(envInfo);\r\n    let ports = this.currentHosts[envInfo.hostName].envs[generatedEnvID].ports;\r\n    let busybeeDir = this.conf.filePaths.busybeeDir;\r\n    let args = {\r\n      generatedEnvID: generatedEnvID,\r\n      protocol: envInfo.protocol,\r\n      hostName: envInfo.hostName,\r\n      ports: ports,\r\n      busybeeDir: busybeeDir,\r\n      startScriptReturnData: envInfo.getStartScriptReturnData(),\r\n      startScriptErrorData: envInfo.getStartScriptErrorData(),\r\n      stopData: envInfo.stopData\r\n    };\r\n\r\n    let filePath = path.join(busybeeDir, envInfo.stopScript);\r\n    this.logger.trace(filePath);\r\n    this.logger.trace('scriptArgs');\r\n    this.logger.trace(args, true);\r\n\r\n    // 1. stop the env\r\n    try {\r\n      await this.runScript(filePath, [JSON.stringify(args)]);\r\n\r\n      // remove env info from the host\r\n      this.removeEnvFromHost(\r\n        envInfo.hostName,\r\n        envInfo.resourceCost,\r\n        generatedEnvID\r\n      );\r\n\r\n      this.logger.trace(`this.currentHosts after removing ${generatedEnvID}`);\r\n      this.logger.trace(this.currentHosts, true);\r\n    } catch (e) {\r\n      this.logger.debug(`Error caught while stopping ${generatedEnvID}`);\r\n      this.logger.info(e.message);\r\n      // failed, add it back\r\n      this.currentEnvs.set(generatedEnvID, envInfo);\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  removeEnvFromHost(\r\n    hostName: string,\r\n    resourceCost: number,\r\n    generatedEnvID: string\r\n  ) {\r\n    // remove the load from the host\r\n    this.currentHosts[hostName].load -= resourceCost;\r\n    // remove the env from the currentHosts\r\n    delete this.currentHosts[hostName].envs[generatedEnvID];\r\n  }\r\n\r\n  async stopAll() {\r\n    this.logger.trace('stopAll');\r\n\r\n    this.logger.trace('currentEnvs');\r\n    this.logger.trace(this.currentEnvs);\r\n    let stopFns = [];\r\n    this.currentEnvs.forEach(\r\n      (envConf: SuiteEnvInfo, generatedEnvID: string) => {\r\n        stopFns.push(this.stop.call(this, generatedEnvID));\r\n      }\r\n    );\r\n\r\n    await Promise.all(stopFns);\r\n  }\r\n\r\n  async retryStart(\r\n    generatedEnvID: string,\r\n    suiteID: string,\r\n    suiteEnvID: string,\r\n    failMsg: string\r\n  ) {\r\n    this.logger.trace(`retryStart ${generatedEnvID}`);\r\n    await this.stop(generatedEnvID); // allow the user to do any potential background cleanup if necessary/possible and remove load from hosts\r\n    // in both cases we need to remove the load that was reserved from this env\r\n    if (\r\n      this.conf.parsedTestSuites.get(suiteID).testEnvs.get(suiteEnvID).retries <\r\n      3\r\n    ) {\r\n      this.conf.parsedTestSuites\r\n        .get(suiteID)\r\n        .testEnvs.get(suiteEnvID).retries += 1;\r\n      this.logger.info(\r\n        `Restart attempt number ${\r\n          this.conf.parsedTestSuites.get(suiteID).testEnvs.get(suiteEnvID)\r\n            .retries\r\n        } for ${generatedEnvID}`\r\n      );\r\n      await this.start(generatedEnvID, suiteID, suiteEnvID);\r\n    } else {\r\n      this.logger.trace(`retryStart attempts exceeded. failing`);\r\n      // push to the back of the line and call start again.\r\n      throw new Error(failMsg);\r\n    }\r\n  }\r\n\r\n  async start(generatedEnvID: string, suiteID: string, suiteEnvID: string) {\r\n    this.logger.trace(`start ${generatedEnvID}`);\r\n    this.envsWaitingForProvision.push(generatedEnvID);\r\n    try {\r\n      await this.waitForTurn(generatedEnvID);\r\n    } catch (e) {\r\n      throw new Error(`${generatedEnvID} failed to wait it's turn`);\r\n    }\r\n\r\n    try {\r\n      await this.provisionEnv(generatedEnvID, suiteID, suiteEnvID);\r\n      this.logger.trace(`${generatedEnvID} provisioned successfully`);\r\n      this.envsWaitingForProvision.shift();\r\n    } catch (e) {\r\n      this.envsWaitingForProvision.shift();\r\n      await this.retryStart(\r\n        generatedEnvID,\r\n        suiteID,\r\n        suiteEnvID,\r\n        `${generatedEnvID} failed to provision`\r\n      );\r\n    }\r\n\r\n    this.logger.trace(\r\n      `envsWaitingForProvision updated to ${this.envsWaitingForProvision}`\r\n    );\r\n\r\n    // should have some if logic here for the future when we support more than just api\r\n\r\n    try {\r\n      await this.confirmHealthcheck(generatedEnvID);\r\n    } catch (e) {\r\n      await this.retryStart(\r\n        generatedEnvID,\r\n        suiteID,\r\n        suiteEnvID,\r\n        `${generatedEnvID} failed to confirm the healthcheck`\r\n      );\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  async waitForTurn(generatedEnvID) {\r\n    let wait = async (timeout: number) => {\r\n      this.logger.trace(\r\n        `this.envsWaitingForProvision ${this.envsWaitingForProvision}`\r\n      );\r\n      if (this.envsWaitingForProvision[0] != generatedEnvID) {\r\n        this.logger.trace(`${generatedEnvID} waiting its turn`);\r\n        await promiseTools.delay(timeout);\r\n        return await wait(timeout);\r\n      }\r\n    };\r\n\r\n    await wait(3000);\r\n  }\r\n\r\n  async provisionEnv(generatedEnvID, suiteID, suiteEnvID) {\r\n    this.logger.trace(\r\n      `provisionEnv ${generatedEnvID} ${suiteID} ${suiteEnvID}`\r\n    );\r\n    this.logger.trace('currentHosts');\r\n    this.logger.trace(this.currentHosts, true);\r\n    if (this.shouldSkipProvisioning(suiteID)) {\r\n      this.logger.info(\r\n        `Skipping Environment provisioning for Test Suite '${suiteID}'`\r\n      );\r\n    } else {\r\n      this.logger.info(\r\n        `Will Provision Environment: ${suiteEnvID} - ${generatedEnvID}`\r\n      );\r\n    }\r\n\r\n    let testSuiteConf = this.conf.parsedTestSuites.get(suiteID);\r\n    // 1. identify the host that this env should deploy to\r\n    let hostName = await this.getAvailableHostName(\r\n      suiteID,\r\n      suiteEnvID,\r\n      generatedEnvID\r\n    );\r\n    let ports;\r\n    if (testSuiteConf.ports) {\r\n      // 2. identify the ports that this env should use on this host\r\n      ports = await this.getAvailablePorts(hostName, suiteID, generatedEnvID);\r\n    }\r\n\r\n    if (this.shouldSkipProvisioning(suiteID)) {\r\n      return generatedEnvID;\r\n    }\r\n\r\n    let busybeeDir = this.conf.filePaths.busybeeDir;\r\n    let args = {\r\n      generatedEnvID: generatedEnvID,\r\n      protocol: testSuiteConf.protocol,\r\n      hostName: hostName,\r\n      ports: ports,\r\n      busybeeDir: busybeeDir,\r\n      startData: this.currentEnvs.get(generatedEnvID).startData\r\n    };\r\n\r\n    this.logger.trace('script args');\r\n    this.logger.trace(testSuiteConf.env.startScript);\r\n    this.logger.trace(args);\r\n    try {\r\n      this.logger.info(\r\n        `Starting Environment: ${suiteEnvID} - ${generatedEnvID}`\r\n      );\r\n      let returnData = await this.runScript(\r\n        path.join(busybeeDir, testSuiteConf.env.startScript),\r\n        [JSON.stringify(args)]\r\n      );\r\n\r\n      if (returnData) {\r\n        this.currentEnvs\r\n          .get(generatedEnvID)\r\n          .setStartScriptReturnData(returnData);\r\n      }\r\n    } catch (err) {\r\n      /*\r\n      set the error information so that it can be used by the stopScript\r\n      if necessary but then re-throw the error so that it can be handled by\r\n      the orchestrating fns.\r\n      */\r\n      this.currentEnvs.get(generatedEnvID).setStartScriptErrorData(err);\r\n      throw new Error(err);\r\n    }\r\n\r\n    this.logger.info(`${generatedEnvID} created.`);\r\n    return generatedEnvID;\r\n  }\r\n\r\n  runScript(path, args): Promise<string> {\r\n    return new Promise(async (resolve, reject) => {\r\n      this.logger.info(`runScript ${path} <args>`);\r\n      this.logger.debug(args);\r\n      this.logger.trace('With process.env');\r\n      this.logger.trace(process.env);\r\n      const completeMessage = `${path} completed`;\r\n      let returned = false;\r\n      const script = spawn('/bin/bash', [path, args], { env: process.env });\r\n\r\n      // listen to stderr for errors and reject\r\n      script.stderr.on('data', data => {\r\n        if (returned) {\r\n          return;\r\n        }\r\n        if (!data) {\r\n          data = '';\r\n        }\r\n        let dataStr = data.toString();\r\n        this.logger.debug(dataStr);\r\n\r\n        if (dataStr.includes(EnvManager.BUSYBEE_ERROR)) {\r\n          returned = true;\r\n          reject(dataStr.replace(`${EnvManager.BUSYBEE_ERROR} `, ''));\r\n          script.kill();\r\n        }\r\n      });\r\n\r\n      // listen to stdout for data\r\n      script.stdout.on('data', data => {\r\n        if (returned || _.isEmpty(data)) {\r\n          return;\r\n        }\r\n\r\n        let lines = IOUtil.parseDataBuffer(data);\r\n        lines.forEach(l => {\r\n          this.logger.debug(l);\r\n\r\n          if (l.includes(EnvManager.BUSYBEE_ERROR)) {\r\n            returned = true;\r\n            this.logger.error(\r\n              `${EnvManager.BUSYBEE_ERROR} detected in ${path}`\r\n            );\r\n            reject(l.replace(`${EnvManager.BUSYBEE_ERROR} `, ''));\r\n            script.kill();\r\n          } else if (l.includes(EnvManager.BUSYBEE_RETURN)) {\r\n            let returnedData = l.replace(`${EnvManager.BUSYBEE_RETURN} `, '');\r\n            this.logger.debug(`${path} Returned data:`);\r\n            this.logger.debug(returnedData);\r\n            returned = true;\r\n            resolve(returnedData);\r\n            script.kill();\r\n            this.logger.debug(completeMessage);\r\n          }\r\n        });\r\n      });\r\n\r\n      // default return via script exit 0. no return value\r\n      script.on('close', () => {\r\n        if (!returned) {\r\n          resolve();\r\n          this.logger.debug(completeMessage);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  generateId() {\r\n    return uuid.v1();\r\n  }\r\n\r\n  shouldSkipProvisioning(suiteID: string) {\r\n    return (\r\n      this.skipEnvProvisioningList &&\r\n      this.skipEnvProvisioningList.indexOf(suiteID) !== -1\r\n    );\r\n  }\r\n\r\n  /*\r\n    Returns an available host give a suite\r\n  */\r\n  async getAvailableHostName(suiteID, suiteEnvID, generatedEnvID) {\r\n    this.logger.trace(\r\n      `getAvailableHostName ${suiteID} | ${suiteEnvID} | ${generatedEnvID}`\r\n    );\r\n    let suiteConf: ParsedTestSuite = this.conf.parsedTestSuites.get(suiteID);\r\n    let cost: number = suiteConf.env.resourceCost || 0;\r\n\r\n    let hostName = await this.identifyHost(suiteConf, cost, generatedEnvID);\r\n\r\n    this.logger.trace('currentHosts');\r\n    this.logger.trace(this.currentHosts, true);\r\n    // 1. add the load to the host to reserve it;\r\n    this.currentHosts[hostName].load += cost;\r\n    // 2. add an entry for this env on this host (may get ports added in the next step)\r\n    this.currentHosts[hostName].envs[generatedEnvID] = {};\r\n    // 3. add this env to the currentEnvs object\r\n    let envInfo = new SuiteEnvInfo(suiteConf, suiteEnvID, cost, hostName);\r\n    this.currentEnvs.set(generatedEnvID, envInfo);\r\n\r\n    this.logger.trace('currentHosts updated');\r\n    this.logger.trace(this.currentHosts, true);\r\n\r\n    return hostName;\r\n  }\r\n\r\n  /*\r\n    Attempts to identify a host with enough capacity for an env of this suite type\r\n  */\r\n  async identifyHost(\r\n    suiteConf: ParsedTestSuite,\r\n    cost: number,\r\n    generatedEnvID: string\r\n  ) {\r\n    this.logger.trace(`identifyHost`);\r\n    // see if we have a pre-determined host\r\n    if (suiteConf.host) {\r\n      return suiteConf.host;\r\n    } else if (this.conf.localMode) {\r\n      return 'localhost';\r\n    }\r\n    // 1. calculate the capacity remaining for each host\r\n    let capacityHosts = _.map(this.currentHosts, (hostInfo: any, hostName) => {\r\n      return {\r\n        name: hostName,\r\n        remainingCapacity: hostInfo.capacity - hostInfo.load\r\n      };\r\n    });\r\n    this.logger.trace('Hosts with capacity');\r\n    this.logger.trace(capacityHosts, true);\r\n    // 2. order hosts by remainingCapacity\r\n    let freestHost = _.orderBy(capacityHosts, ['remainingCapacity'], 'desc')[0];\r\n    this.logger.info(\r\n      `${generatedEnvID} Host with most capacity is ${freestHost.name}`\r\n    );\r\n\r\n    // 3. if the capacity of the host with the most left is greater than the suite env cost. return.\r\n    if (freestHost && freestHost.remainingCapacity >= cost) {\r\n      return freestHost.name;\r\n    } else {\r\n      this.logger.info(\r\n        `${generatedEnvID} Host ${freestHost.name} remaining capacity is ${\r\n          freestHost.remainingCapacity\r\n        }. ${cost} is required. Retrying...`\r\n      );\r\n\r\n      // loop\r\n      await promiseTools.delay(3000);\r\n      return await this.identifyHost(suiteConf, cost, generatedEnvID);\r\n    }\r\n  }\r\n\r\n  /*\r\n   Discover available ports for a given hostName and suite definition\r\n   */\r\n  async getAvailablePorts(hostName, suiteID, generatedEnvID) {\r\n    this.logger.trace(\r\n      `getAvailablePorts ${hostName} | ${suiteID} | ${generatedEnvID}`\r\n    );\r\n    let hostConf = Object.assign({}, this.currentHosts[hostName]);\r\n    let suiteConf = this.conf.parsedTestSuites.get(suiteID);\r\n\r\n    if (this.shouldSkipProvisioning(suiteID)) {\r\n      let ports = suiteConf.ports;\r\n      // 3. update global host and env info\r\n      this.updateGlobalPortInfo(hostName, generatedEnvID, ports, 0);\r\n      return ports;\r\n    }\r\n\r\n    // 1. find the current ports in use for this host\r\n    try {\r\n      let portsInUse = await this.getReservedBusybeePorts(hostConf);\r\n      // 2. determine available ports\r\n      let parallelMode = false;\r\n      if (suiteConf.env && suiteConf.env.parallel) {\r\n        parallelMode = suiteConf.env.parallel;\r\n      }\r\n      let { ports, portOffset } = await this.identifyPorts(\r\n        generatedEnvID,\r\n        hostName,\r\n        portsInUse,\r\n        suiteConf.ports,\r\n        0,\r\n        parallelMode\r\n      );\r\n\r\n      // 4. resolve :)\r\n      return ports;\r\n    } catch (e) {\r\n      this.logger.error(`Error while getting available ports: ${e.message}`);\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  updateGlobalPortInfo(\r\n    hostName: string,\r\n    generatedEnvID: string,\r\n    ports: number[],\r\n    portOffset: number\r\n  ) {\r\n    this.currentHosts[hostName].envs[generatedEnvID].ports = ports;\r\n    this.currentHosts[hostName].envs[generatedEnvID].portOffset = portOffset;\r\n    this.currentEnvs.get(generatedEnvID).ports = ports;\r\n  }\r\n\r\n  getReservedBusybeePorts(hostConf) {\r\n    this.logger.trace(`getReservedBusybeePorts`);\r\n    this.logger.trace(hostConf);\r\n    let portsInUse = [];\r\n    Object.keys(hostConf.envs).forEach(generatedEnvID => {\r\n      let envInfo = hostConf.envs[generatedEnvID];\r\n\r\n      this.logger.trace(`envInfo`);\r\n      this.logger.trace(envInfo);\r\n      if (envInfo.ports) {\r\n        envInfo.ports.forEach(port => {\r\n          this.logger.trace(`port in use ${port}`);\r\n          portsInUse.push(port);\r\n        });\r\n      }\r\n    });\r\n\r\n    return portsInUse;\r\n  }\r\n\r\n  /*\r\n   Recursively check for available ports\r\n   TODO: Fix this to not care about parallelMode...it shouldn't be the job of this method to worry about that. it has been removed from the logic, not from the signature\r\n\r\n   IF (parallelMode)\r\n    IF (portsTaken)\r\n      increment ports and try again\r\n    ELSE\r\n      we've identified available ports, return\r\n   ELSE\r\n    IF (portsTaken)\r\n      do not increment ports, try again\r\n   */\r\n  async identifyPorts(\r\n    generatedEnvID,\r\n    hostName,\r\n    portsInUse,\r\n    nextPorts,\r\n    portOffset,\r\n    parallelMode\r\n  ) {\r\n    this.logger.trace(\r\n      `identifyPorts: ${generatedEnvID} ${hostName}, ${portsInUse}, ${nextPorts}, ${portOffset}, ${parallelMode}`\r\n    );\r\n    let portsInUseByBusybee = await this.arePortsInUseByBusybee(\r\n      portsInUse,\r\n      nextPorts\r\n    );\r\n    this.logger.trace(`portsInUseByBusybee: ${portsInUseByBusybee}`);\r\n    this.logger.trace(`parallelMode: ${parallelMode}`);\r\n\r\n    if (portsInUseByBusybee) {\r\n      let oldPorts = nextPorts;\r\n      nextPorts = nextPorts.map(p => {\r\n        return p + 1;\r\n      });\r\n      this.logger.info(\r\n        `${generatedEnvID} Ports ${oldPorts} in use by Busybee, retrying with ${nextPorts}`\r\n      );\r\n      return await this.identifyPorts(\r\n        generatedEnvID,\r\n        hostName,\r\n        portsInUse,\r\n        nextPorts,\r\n        portOffset + 1,\r\n        parallelMode\r\n      );\r\n    } else {\r\n      // first put a lock on these ports\r\n      this.updateGlobalPortInfo(\r\n        hostName,\r\n        generatedEnvID,\r\n        nextPorts,\r\n        portOffset\r\n      );\r\n      // not in use by busybee. see if ports are in use by something else\r\n      let portsTaken = await this.arePortsTaken(hostName, nextPorts);\r\n      if (portsTaken) {\r\n        // shift ports and try again\r\n        let oldPorts = nextPorts;\r\n        nextPorts = nextPorts.map(p => {\r\n          return p + 1;\r\n        });\r\n        this.logger.info(\r\n          `${generatedEnvID} Ports ${oldPorts} in use by an unknown service, retrying with ${nextPorts}`\r\n        );\r\n        return await this.identifyPorts(\r\n          generatedEnvID,\r\n          hostName,\r\n          portsInUse,\r\n          nextPorts,\r\n          portOffset + 1,\r\n          parallelMode\r\n        );\r\n      }\r\n\r\n      // ports identified, resolve.\r\n      let ret = {\r\n        ports: nextPorts,\r\n        portOffset: portOffset\r\n      };\r\n\r\n      this.logger.trace(`ports identified: ${JSON.stringify(ret)}`);\r\n      return ret;\r\n    }\r\n  }\r\n\r\n  /*\r\n   Helper method for quickly checking if ports are known to be in use by busybee.\r\n   Cheaper than checking the actual port via port scan.\r\n   */\r\n  async arePortsInUseByBusybee(portsInUse, ports) {\r\n    this.logger.trace(`arePortsInUseByBusybee ${portsInUse} | ${ports}`);\r\n    return _.difference(ports, portsInUse).length < ports.length;\r\n  }\r\n\r\n  /*\r\n   Checks if a list of [hostName:port] is in use\r\n   */\r\n  async arePortsTaken(hostName, ports) {\r\n    this.logger.trace(`arePortsTaken ${hostName} ${ports}`);\r\n    let takenPorts = [];\r\n    let portCheckPromises = ports.map(p => {\r\n      return this.isPortTaken(hostName, p);\r\n    });\r\n\r\n    let results = await Promise.all(portCheckPromises);\r\n    return _.includes(results, true);\r\n  }\r\n\r\n  /*\r\n   Checks if a single hostName:port is in use\r\n   */\r\n  isPortTaken(hostName, port) {\r\n    return new Promise((resolve, reject) => {\r\n      this.logger.trace(`isPortTaken ${hostName} ${port}`);\r\n      portscanner.checkPortStatus(port, hostName, (err, status) => {\r\n        // Status is 'open' if currently in use or 'closed' if available\r\n        if (err) return reject(err);\r\n        if (status === 'open') {\r\n          this.logger.trace(`${port} is in use`);\r\n          resolve(true);\r\n        } else {\r\n          this.logger.trace(`${port} is available`);\r\n          resolve(false);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /*\r\n   TODO: support multiple healthcheck types\r\n   */\r\n  async confirmHealthcheck(generatedEnvID) {\r\n    this.logger.trace(`confirmHealthcheck ${generatedEnvID}`);\r\n    let suiteEnvConf = this.currentEnvs.get(generatedEnvID); // current-env-specific conf\r\n    this.logger.trace(suiteEnvConf);\r\n    let healthcheckConf = suiteEnvConf.healthcheck;\r\n\r\n    if (!healthcheckConf) {\r\n      this.logger.info('No Healthcheck provided. Moving on.');\r\n      return;\r\n    }\r\n\r\n    if (!healthcheckConf.type) {\r\n      this.logger.info(\"Healthcheck 'type' not provided. Skipping Healthcheck\");\r\n      return;\r\n    }\r\n\r\n    if (healthcheckConf.type.toUpperCase() === 'REST') {\r\n      let restClient = new RESTClient(this.conf, suiteEnvConf);\r\n      let requestConf: RequestOptsConfig = healthcheckConf.request;\r\n\r\n      // 1. get the initial healthcheckport definition from the\r\n      let healthcheckPort;\r\n      if (requestConf.port) {\r\n        healthcheckPort = requestConf.port;\r\n      } else {\r\n        healthcheckPort = suiteEnvConf.ports[0]; // default to restapi path\r\n      }\r\n      // 2. get the port offset, apply.\r\n      let portOffset = this.currentHosts[suiteEnvConf.hostName].envs[\r\n        generatedEnvID\r\n      ].portOffset;\r\n      healthcheckPort += portOffset;\r\n      let opts = restClient.buildRequest(requestConf, healthcheckPort);\r\n\r\n      // retries the healthcheck path every 3 seconds up to 50 times\r\n      // when successful calls the cb passed to confirmHealthcheck()\r\n      let attempt = 0;\r\n      return await promiseTools.retry(\r\n        { times: healthcheckConf.retries || 50, interval: opts.timeout },\r\n        async () => {\r\n          attempt += 1;\r\n          this.logger.info(\r\n            `Attempting healthcheck #${attempt} for ${generatedEnvID} on port ${healthcheckPort}`\r\n          );\r\n          this.logger.debug(opts);\r\n          let response = await restClient.makeRequest(opts);\r\n          this.logger.debug(response);\r\n          if (response.statusCode === 200) {\r\n            this.logger.info(`Healthcheck Confirmed for ${generatedEnvID}!`);\r\n            return true;\r\n          } else {\r\n            this.logger.debug(`Healthcheck returned: ${response.statusCode}`);\r\n            this.logger.trace(response, true);\r\n            throw new Error(`Healthcheck failed for ${generatedEnvID}`);\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      this.logger.info(\r\n        \"Healthcheck 'type' not recognized. Skipping Healthcheck\"\r\n      );\r\n      return;\r\n    }\r\n  }\r\n\r\n  getCurrentEnv(generatedEnvID): SuiteEnvInfo {\r\n    return this.currentEnvs.get(generatedEnvID);\r\n  }\r\n\r\n  getCurrentEnvs(): TypedMap<SuiteEnvInfo> {\r\n    return this.currentEnvs;\r\n  }\r\n\r\n  getCurrentHosts(): any {\r\n    return this.currentHosts;\r\n  }\r\n\r\n  getRunTimestamp(): number {\r\n    return this.conf.runTimestamp;\r\n  }\r\n\r\n  getRunId(): string {\r\n    return this.conf.runId;\r\n  }\r\n}\r\n"]}