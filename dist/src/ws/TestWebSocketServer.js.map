{"version":3,"file":"TestWebSocketServer.js","sourceRoot":"","sources":["../../../src/ws/TestWebSocketServer.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,qDAAoD;AAEpD,6CAAkD;AAClD,+CAA8C;AAQ9C;IAAyC,uCAAe;IAGtD,6BAAY,IAAS,EAAE,UAAsB;QAA7C,YACE,kBAAM,IAAI,CAAC,SAMZ;QALC,KAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAM,UAAU,GAAG,IAAI,yBAAU,CAAC,KAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC7D,KAAI,CAAC,MAAM,GAAG,IAAI,qBAAM,CAAC,UAAU,CAAC,CAAC;QAErC,WAAW,CAAC,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,EAAE,IAAI,CAAC,CAAC;;IAChD,CAAC;IAED,wCAAU,GAAV;QACE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QAChC,IAAI,GAAG,GAAG;YACR,IAAI,EAAE,2BAAY,CAAC,eAAe;YAClC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE;YAC/B,IAAI,EAAE;gBACJ,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE;gBACjC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE;gBAC/C,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE;gBACtC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE;aACzC;SACF,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;IACtC,CAAC;IAED,wCAAU,GAAV,UAAW,MAA0B;QACnC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QAChC,IAAI,GAAG,GAAG;YACR,IAAI,EAAE,2BAAY,CAAC,eAAe;YAClC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE;YAC/B,IAAI,EAAE,MAAM;SACb,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;IACtC,CAAC;IACH,0BAAC;AAAD,CAAC,AAtCD,CAAyC,iCAAe,GAsCvD;AAtCY,kDAAmB","sourcesContent":["import { WebSocketServer } from './WebSocketServer';\r\nimport { EnvManager } from '../managers/EnvManager';\r\nimport { Logger, LoggerConf } from 'busybee-util';\r\nimport { MessageTypes } from './MessageTypes';\r\n\r\nexport interface BusybeeTestResults {\r\n  runId: string;\r\n  runTimestamp: number;\r\n  data: any[];\r\n}\r\n\r\nexport class TestWebSocketServer extends WebSocketServer {\r\n  private envManager: EnvManager;\r\n\r\n  constructor(conf: any, envManager: EnvManager) {\r\n    super(conf);\r\n    this.envManager = envManager;\r\n    const loggerConf = new LoggerConf(this, conf.logLevel, null);\r\n    this.logger = new Logger(loggerConf);\r\n\r\n    setInterval(this.emitStatus.bind(this), 1000);\r\n  }\r\n\r\n  emitStatus() {\r\n    this.logger.debug('emitStatus');\r\n    let msg = {\r\n      type: MessageTypes.TEST_RUN_STATUS,\r\n      timestamp: new Date().getTime(),\r\n      data: {\r\n        runId: this.envManager.getRunId(),\r\n        runTimestamp: this.envManager.getRunTimestamp(),\r\n        envs: this.envManager.getCurrentEnvs(),\r\n        hosts: this.envManager.getCurrentHosts()\r\n      }\r\n    };\r\n    this.logger.trace(msg);\r\n    this.broadcast(JSON.stringify(msg));\r\n  }\r\n\r\n  emitResult(result: BusybeeTestResults) {\r\n    this.logger.debug('emitResult');\r\n    let msg = {\r\n      type: MessageTypes.TEST_RUN_RESULT,\r\n      timestamp: new Date().getTime(),\r\n      data: result\r\n    };\r\n    this.logger.trace(msg);\r\n    this.broadcast(JSON.stringify(msg));\r\n  }\r\n}\r\n"]}