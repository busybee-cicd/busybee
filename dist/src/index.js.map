{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport {BusybeeParsedConfig} from \"./models/config/BusybeeParsedConfig\";\nrequire('source-map-support').install();\nimport * as _async from 'async';\nimport * as _ from 'lodash';\nimport * as Commander from 'commander';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport {ConfigParser} from  './lib/ConfigParser';\nimport {EnvManager} from './managers/EnvManager';\nimport {TestManager} from './managers/TestManager';\nimport {MockServer} from './lib/MockServer';\nimport {Logger} from './lib/Logger';\nlet logger;\n\n\nCommander\n    .version('0.1.0');\n\n// TODO: REMOVE protocol and host from cmdOpts...need to be per test suite\nCommander\n    .command('test')\n    .description('execute tests')\n    .option('-c, --userConfigFile <userConfigFile>', 'Config File. defaults to userConfigFile.json. parsed as being relative to --directory')\n    .option('-d, --directory <directory>', 'Test Directory. defaults to busybee/')\n    .option('-D, --debug', 'convenience flag for debug mode')\n    .option('-l, --localMode', 'ignores any host configuration in favor of localhost with a capacity of 100')\n    .option('-L, --logLevel <level>', '[DEBUG, INFO, WARN, ERROR]')\n    .option('-o, --onComplete <onComplete>', 'The filename of javascript module placed in your busybee/ directory. Will be called on complete. ex module) module.exports = (err, results) => { console.log(err || JSON.stringify(results)); }')\n    .option('-s, --skipEnvProvisioning <ids>', 'list of comma-separated TestSuite ids. Environments will not be provisioned for these TestSuites prior to running tests')\n    .option('-ss, --skipTestSuite <ids>', 'list of comma-separated TestSuite ids to skip')\n    .option('-t, --testFiles <filenames>', 'list of comma-separated test files to run. ie) test.json,test2.json,users/mytest.json')\n    .action((options) => {\n        let configParser = new ConfigParser(options);\n        const conf: BusybeeParsedConfig = configParser.parse('test');\n        logger = new Logger(conf, this);\n        initTests(conf);\n    });\n\nCommander\n    .command('mock')\n    .description('runs a mockResponse REST API server using your tests as mocks')\n    .option('-c, --userConfigFile <userConfigFile>', 'Config File. defaults to userConfigFile.json. parsed as being relative to --directory')\n    .option('-d, --directory <directory>', 'Test Directory. defaults to busybee/')\n    .option('-D, --debug', 'convenience flag for debug mode')\n    .option('-L, --logLevel <level>', '[DEBUG, INFO, WARN, ERROR]')\n    .option('-l, --localMode', 'ignores any host configuration in favor of localhost with a capacity of 100')\n    .option('-np, --noProxy, Will ignore any userConfigFile.json proxy configuration and skip proxy attempts')\n    .option('-t, --testSuite <id>', 'Required. The ID of the REST Api TestSuite that you would like to run a mock server for')\n    .action((options) => {\n        if (!options.testSuite) {\n            console.log(`'--testSuite' is a required argument, exiting`);\n            return;\n        }\n        let configParser = new ConfigParser(options);\n        const conf: BusybeeParsedConfig = configParser.parse('mock');\n        logger = new Logger(conf, this);\n\n\n        // identify the TestSuite.\n        let testSuite = _.find(conf.parsedTestSuites.values(), (suite) => {\n            return suite.suiteID == options.testSuite;\n        });\n        if (!testSuite) {\n            logger.error(`No TestSuite with the id ${options.testSuite} could be identified, exiting`);\n            return\n        }\n\n        testSuite.cmdOpts = options;\n        new MockServer(testSuite, conf);\n    });\n\nCommander\n    .command('init')\n    .description('set up busybee folder and example userConfigFile/test')\n    .action(() => {\n        const exampleConf = require('./init/userConfigFile.json');\n        const exampleTest = require('./init/test.json');\n        const busybeeDir = path.join(process.cwd(), 'busybee');\n        if (!fs.existsSync(busybeeDir))\n            fs.mkdirSync(busybeeDir);\n        if (!fs.exists(path.join(busybeeDir, 'test.json'), null))\n            fs.writeFileSync(path.join(busybeeDir, 'test.json'), JSON.stringify(exampleTest, null, '\\t'));\n        if (!fs.exists(path.join(busybeeDir, 'userConfigFile.json'), null))\n            fs.writeFileSync(path.join(busybeeDir, 'userConfigFile.json'), JSON.stringify(exampleConf, null, '\\t'));\n\n        console.log(\"Busybee initialized!\");\n    });\n\nCommander.parse(process.argv);\n\n\nfunction initTests(conf: BusybeeParsedConfig) {\n    // 2. instantiate EnvManager and ApiManager. handle shutdown signals\n    let envManager = new EnvManager(conf);\n    let testManager = new TestManager(conf, envManager);\n\n    async function shutdown(err) {\n        if (err)\n            console.log(err);\n\n        try {\n            await envManager.stopAll();\n            process.exit(0);\n        } catch (e) {\n            console.log(err);\n            process.exit(1);\n        }\n    }\n\n\n    process.on('uncaughtException', (err: Error) => {\n        shutdown(err);\n    });\n\n    process.on('SIGHUP', () => {\n        shutdown(null);\n    });\n\n    process.on('SIGINT', () => {\n        shutdown(null);\n    });\n\n    testManager.buildTestSuiteTasks();\n\n    // run the api tests\n    // TODO: allow ordering of TestSuites and TestEnvs\n    let envTasks = [];\n    _.forEach(testManager.testSuiteTasks, (suiteTask) => {\n        suiteTask.envTasks.forEach((envTask) => {\n            envTasks.push(envTask);\n        });\n    });\n\n    _async.parallel(envTasks, (err, envResults) => {\n        // group the result sets by their Suite\n        let suiteResults = {};\n\n        envResults.forEach(envResult => {\n            if (!suiteResults[envResult.suiteID]) {\n                suiteResults[envResult.suiteID] = {\n                    testSets: envResult.testSets,\n                    pass: true,\n                    type: envResult.type\n                };\n            } else {\n                suiteResults[envResult.suiteID].testSets = suiteResults[envResult.suiteID].testSets.concat(envResult.testSets);\n            }\n\n            // mark the suite as failed if it contains atleast 1 env w/ a failure\n            if (_.find(envResult.results, er => { return !er.pass; })) {\n                suiteResults[envResult.suiteID].pass = false;\n            };\n        });\n\n        // for easier parsing lets return each suite as its own object in a list\n        let suiteResultsList = [];\n        _.forEach(suiteResults, (v, suiteID) => {\n            let sr = Object.assign({}, {id: suiteID}, v);\n            suiteResultsList.push(sr);\n        });\n\n\n        if(conf.onComplete || conf.cmdOpts.onComplete) {\n            let scriptPath = conf.onComplete ?\n                path.join(conf.filePaths.busybeeDir, conf.onComplete)\n                : path.join(conf.filePaths.busybeeDir, conf.cmdOpts.onComplete);\n\n            try {\n                logger.debug(`Running onComplete: ${scriptPath}`);\n                require(scriptPath)(err, suiteResultsList);\n            } catch (e) {\n                console.log(e);\n            }\n        } else {\n            console.log(err || JSON.stringify(suiteResultsList, null, '\\t'));\n        }\n    });\n\n    // run the ui tests\n}\n"]}