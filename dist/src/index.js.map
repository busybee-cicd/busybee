{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\r\n\r\nimport {BusybeeParsedConfig} from './models/config/BusybeeParsedConfig';\r\nrequire('source-map-support').install();\r\nimport * as _async from 'async';\r\nimport * as _ from 'lodash';\r\nimport * as Commander from 'commander';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nconst appVersion = require('../../package.json').version;\r\nimport {ConfigParser} from  './lib/ConfigParser';\r\nimport {EnvManager} from './managers/EnvManager';\r\nimport {TestManager} from './managers/TestManager';\r\nimport {MockServer} from './lib/MockServer';\r\nimport {Logger, LoggerConf} from 'busybee-util';\r\nimport {EnvResult} from './models/results/EnvResult';\r\nimport {TestSuiteResult} from './models/results/TestSuiteResult';\r\nlet logger;\r\nconst ONE_SECOND = 1000;\r\nconst ONE_MINUTE = ONE_SECOND * 60;\r\nconst ONE_HOUR = ONE_MINUTE * 60;\r\n//process.env.UV_THREADPOOL_SIZE = '128';\r\n\r\nCommander\r\n  .version(appVersion);\r\n\r\n// TODO: REMOVE protocol and host from cmdOpts...need to be per test suite\r\nCommander\r\n  .command('test')\r\n  .description('execute tests')\r\n  .option('-c, --userConfigFile <userConfigFile>', 'Config File. defaults to userConfigFile.json. parsed as being relative to --directory')\r\n  .option('-d, --directory <directory>', 'Test Directory. defaults to busybee/')\r\n  .option('-D, --debug', 'convenience flag for debug mode')\r\n  .option('-l, --localMode', 'ignores any host configuration in favor of localhost with a capacity of 100')\r\n  .option('-L, --logLevel <level>', '[DEBUG, INFO, WARN, ERROR]')\r\n  .option('-o, --onComplete <onComplete>', 'The filename of javascript module placed in your busybee/ directory. Will be called on complete. ex module) module.exports = (err, results) => { console.log(err || JSON.stringify(results)); }')\r\n  .option('-s, --skipEnvProvisioning <ids>', 'list of comma-separated TestSuite ids. Environments will not be provisioned for these TestSuites prior to running tests')\r\n  .option('-k, --skipTestSuite <ids>', 'list of comma-separated TestSuite ids to skip')\r\n  .option('-t, --testFiles <filenames>', 'list of comma-separated test files to run. ie) test.json,test2.json,users/mytest.json')\r\n  .option('-e, --envInstances <ids>', 'list of comma-separated envInstance ids to run')\r\n  .option('-w, --wsserver <port>', 'enable a websocket server at the specified port')\r\n  .action((options) => {\r\n    let configParser = new ConfigParser(options);\r\n    const conf: BusybeeParsedConfig = configParser.parse('test');\r\n    const loggerConf = new LoggerConf(this, conf.logLevel, null);\r\n    logger = new Logger(loggerConf);\r\n\r\n    initTests(conf);\r\n  });\r\n\r\nCommander\r\n  .command('mock')\r\n  .description('runs a mockResponse REST API server using your tests as mocks')\r\n  .option('-c, --userConfigFile <userConfigFile>', 'Config File. defaults to userConfigFile.json. parsed as being relative to --directory')\r\n  .option('-d, --directory <directory>', 'Test Directory. defaults to busybee/')\r\n  .option('-D, --debug', 'convenience flag for debug mode')\r\n  .option('-L, --logLevel <level>', '[DEBUG, INFO, WARN, ERROR]')\r\n  .option('-n, --noProxy, Will ignore any userConfigFile.json proxy configuration and skip proxy attempts')\r\n  .option('-t, --testSuite <id>', 'Required. The ID of the REST Api TestSuite that you would like to run a mock server for')\r\n  .option('-w, --wsserver <port>', 'enable a websocket server at the specified port')\r\n  .action((options) => {\r\n    if (!options.testSuite) {\r\n      console.log(`'--testSuite' is a required argument, exiting`);\r\n      return;\r\n    }\r\n    let configParser = new ConfigParser(options);\r\n    const conf: BusybeeParsedConfig = configParser.parse('mock');\r\n    const loggerConf = new LoggerConf(this, conf.logLevel, null);\r\n    logger = new Logger(loggerConf);\r\n\r\n\r\n    // identify the TestSuite.\r\n    let testSuite = _.find(conf.parsedTestSuites.values(), (suite) => {\r\n      return suite.suiteID == options.testSuite;\r\n    });\r\n    if (!testSuite) {\r\n      logger.error(`No TestSuite with the id ${options.testSuite} could be identified, exiting`);\r\n      return\r\n    }\r\n\r\n    new MockServer(testSuite, conf);\r\n  });\r\n\r\nCommander\r\n  .command('init')\r\n  .description('set up busybee folder and example userConfigFile/test')\r\n  .action(() => {\r\n    const exampleConf = require('./init/userConfigFile.json');\r\n    const exampleTest = require('./init/test.json');\r\n    const busybeeDir = path.join(process.cwd(), 'busybee');\r\n    if (!fs.existsSync(busybeeDir))\r\n      fs.mkdirSync(busybeeDir);\r\n    if (!fs.exists(path.join(busybeeDir, 'test.json'), null))\r\n      fs.writeFileSync(path.join(busybeeDir, 'test.json'), JSON.stringify(exampleTest, null, '\\t'));\r\n    if (!fs.exists(path.join(busybeeDir, 'userConfigFile.json'), null))\r\n      fs.writeFileSync(path.join(busybeeDir, 'userConfigFile.json'), JSON.stringify(exampleConf, null, '\\t'));\r\n\r\n    console.log(\"Busybee initialized!\");\r\n  });\r\n\r\nCommander.parse(process.argv);\r\n\r\n\r\nfunction initTests(conf: BusybeeParsedConfig) {\r\n  // 2. instantiate EnvManager and ApiManager. handle shutdown signals\r\n  let envManager = new EnvManager(conf);\r\n  let testManager = new TestManager(conf, envManager);\r\n\r\n  async function shutdown(err) {\r\n    if (err)\r\n      console.log(err);\r\n\r\n    try {\r\n      await envManager.stopAll();\r\n      process.exit(0);\r\n    } catch (e) {\r\n      console.log(err);\r\n      process.exit(1);\r\n    }\r\n  }\r\n\r\n\r\n  process.on('uncaughtException', (err: Error) => {\r\n    shutdown(err);\r\n  });\r\n\r\n  process.on('SIGHUP', () => {\r\n    shutdown(null);\r\n  });\r\n\r\n  process.on('SIGINT', () => {\r\n    shutdown(null);\r\n  });\r\n\r\n  testManager.buildTestSuiteTasks();\r\n\r\n  // run the api tests\r\n  // TODO: allow ordering of TestSuites and TestEnvs\r\n  let envTasks: any[] = [];\r\n  _.forEach(testManager.testSuiteTasks, (suiteTask) => {\r\n    suiteTask.envTasks.forEach((envTask) => {\r\n      envTasks.push(envTask);\r\n    });\r\n  });\r\n\r\n  let start = Date.now();\r\n  _async.parallel(envTasks, (err, envResults: Array<EnvResult>) => {\r\n    let end = Date.now();\r\n    // group the result sets by their Suite\r\n    let suiteResults = {};\r\n\r\n    envResults.forEach((envResult: EnvResult) => {\r\n      // todo use TestSuiteResult model instead of any\r\n      if (!suiteResults[envResult.suiteID]) {\r\n        let sr = new TestSuiteResult();\r\n        sr.testSets = envResult.testSets;\r\n        sr.pass = true;\r\n        sr.type = envResult.type;\r\n        sr.id = envResult.suiteID;\r\n        suiteResults[envResult.suiteID] = sr;\r\n      } else {\r\n        suiteResults[envResult.suiteID].testSets = suiteResults[envResult.suiteID].testSets.concat(envResult.testSets);\r\n      }\r\n\r\n      // mark the suite as failed if it contains atleast 1 env w/ a failure\r\n      if (_.find(envResult.testSets, ts => {\r\n          return !ts.pass;\r\n        })) {\r\n        suiteResults[envResult.suiteID].pass = false;\r\n      };\r\n    });\r\n\r\n    // for easier parsing lets return each suite as its own object in a list\r\n    let suiteResultsList = [..._.values(suiteResults)];\r\n\r\n    if (conf.reporters && !_.isEmpty(conf.reporters)) {\r\n      logger.info('Running Reporters');\r\n      conf.reporters.forEach(r => {\r\n        try {\r\n          if (conf.localMode) {\r\n            if (!_.isUndefined(r.skipInLocalMode) && r.skipInLocalMode) {\r\n              return;\r\n            }\r\n          }\r\n\r\n          r.run(suiteResultsList)\r\n        } catch (e) {\r\n          logger.error('Error encountered while running reporter');\r\n          logger.error(e);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (conf.onComplete) {\r\n      let scriptPath = conf.onComplete = path.join(conf.filePaths.busybeeDir, conf.onComplete);\r\n\r\n      try {\r\n        logger.info(`Running onComplete: ${scriptPath}`);\r\n        require(scriptPath)(err, suiteResultsList);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    } else {\r\n      logger.trace(err || suiteResultsList);\r\n      logger.info(formatElapsed(start, end));\r\n    }\r\n\r\n    process.exit();\r\n  });\r\n\r\n  function formatElapsed(start: number, end: number): string {\r\n    let elapsed = end - start;\r\n    let hours = 0;\r\n    let minutes = 0;\r\n    let seconds = 0;\r\n    let ret = `Tests finished in`;\r\n\r\n    if (Math.round(elapsed / ONE_HOUR) > 0) {\r\n      hours = Math.round(elapsed / ONE_HOUR);\r\n      elapsed = elapsed % ONE_HOUR;\r\n\r\n      ret += ` ${hours}`;\r\n      if (hours > 1) {\r\n        ret += ` hours`;\r\n      } else {\r\n        ret += ` hour`;\r\n      }\r\n    }\r\n    if (Math.round(elapsed / ONE_MINUTE) > 0) {\r\n      minutes = Math.round(elapsed / ONE_MINUTE);\r\n      elapsed = elapsed % ONE_MINUTE;\r\n\r\n      ret += ` ${minutes}`;\r\n      if (minutes > 1) {\r\n        ret += ` minutes`;\r\n      } else {\r\n        ret += ` minute`;\r\n      }\r\n    }\r\n    if (Math.round(elapsed / 1000) > 0) {\r\n      seconds = Math.round(elapsed / ONE_SECOND);\r\n\r\n      ret += ` ${seconds}`;\r\n      if (seconds > 1) {\r\n        ret += ` seconds`;\r\n      } else {\r\n        ret += ` second`;\r\n      }\r\n    }\r\n\r\n    return ret;\r\n  }\r\n}\r\n"]}