{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AACA,iBAqJA;;AApJA,OAAO,CAAC,oBAAoB,CAAC,CAAC,OAAO,EAAE,CAAC;AACxC,8BAAgC;AAChC,0BAA4B;AAC5B,qCAAuC;AACvC,uBAAyB;AACzB,2BAA6B;AAC7B,mDAAiD;AACjD,+CAA4C;AAC5C,iDAA8C;AAC9C,+CAA4C;AAC5C,uCAAoC;AACpC,IAAI,MAAM,CAAC;AAGX,SAAS;KACN,OAAO,CAAC,OAAO,CAAC,CAAC;AAEpB,0EAA0E;AAC1E,SAAS;KACN,OAAO,CAAC,MAAM,CAAC;KACf,WAAW,CAAC,eAAe,CAAC;KAC5B,MAAM,CAAC,uCAAuC,EAAE,uFAAuF,CAAC;KACxI,MAAM,CAAC,6BAA6B,EAAE,sCAAsC,CAAC;KAC7E,MAAM,CAAC,aAAa,EAAE,iCAAiC,CAAC;KACxD,MAAM,CAAC,iBAAiB,EAAE,6EAA6E,CAAC;KACxG,MAAM,CAAC,wBAAwB,EAAE,4BAA4B,CAAC;KAC9D,MAAM,CAAC,+BAA+B,EAAE,iMAAiM,CAAC;KAC1O,MAAM,CAAC,iCAAiC,EAAE,yHAAyH,CAAC;KACpK,MAAM,CAAC,6BAA6B,EAAE,+CAA+C,CAAC;KACtF,MAAM,CAAC,UAAC,OAAO;IACd,IAAI,YAAY,GAAG,IAAI,2BAAY,CAAC,OAAO,CAAC,CAAC;IAC7C,IAAM,IAAI,GAAwB,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC7D,MAAM,GAAG,IAAI,eAAM,CAAC,IAAI,EAAE,KAAI,CAAC,CAAC;IAChC,SAAS,CAAC,IAAI,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC;AAEL,SAAS;KACN,OAAO,CAAC,MAAM,CAAC;KACf,WAAW,CAAC,uDAAuD,CAAC;KACpE,MAAM,CAAC,uCAAuC,EAAE,uFAAuF,CAAC;KACxI,MAAM,CAAC,6BAA6B,EAAE,sCAAsC,CAAC;KAC7E,MAAM,CAAC,aAAa,EAAE,iCAAiC,CAAC;KACxD,MAAM,CAAC,wBAAwB,EAAE,4BAA4B,CAAC;KAC9D,MAAM,CAAC,iGAAiG,CAAC;KACzG,MAAM,CAAC,sBAAsB,EAAE,yFAAyF,CAAC;KACzH,MAAM,CAAC,UAAC,OAAO;IACd,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;QACvB,OAAO,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAC;QAC7D,MAAM,CAAC;IACT,CAAC;IACD,IAAI,YAAY,GAAG,IAAI,2BAAY,CAAC,OAAO,CAAC,CAAC;IAC7C,IAAM,IAAI,GAAG,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACxC,MAAM,GAAG,IAAI,eAAM,CAAC,IAAI,EAAE,KAAI,CAAC,CAAC;IAGhC,0BAA0B;IAC1B,IAAI,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,UAAC,KAAK,IAAO,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IACzG,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;QACf,MAAM,CAAC,KAAK,CAAC,8BAA4B,OAAO,CAAC,SAAS,kCAA+B,CAAC,CAAC;QAC3F,MAAM,CAAA;IACR,CAAC;IAED,SAAS,CAAC,OAAO,GAAG,OAAO,CAAC;IAC5B,IAAI,uBAAU,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC;AAEH,SAAS;KACN,OAAO,CAAC,MAAM,CAAC;KACf,WAAW,CAAC,uDAAuD,CAAC;KACpE,MAAM,CAAC;IACN,IAAM,WAAW,GAAG,OAAO,CAAC,4BAA4B,CAAC,CAAC;IAC1D,IAAM,WAAW,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;IAChD,IAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,SAAS,CAAC,CAAC;IACvD,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QAC7B,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAC3B,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC;QACvD,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IAChG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,qBAAqB,CAAC,EAAE,IAAI,CAAC,CAAC;QACjE,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,qBAAqB,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IAE1G,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC;AAEP,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAG9B,mBAAmB,IAAyB;IAC1C,oEAAoE;IACpE,IAAI,UAAU,GAAG,IAAI,uBAAU,CAAC,IAAI,CAAC,CAAC;IACtC,IAAI,WAAW,GAAG,IAAI,yBAAW,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAEpD,kBAAkB,GAAG;QACnB,EAAE,CAAC,CAAC,GAAG,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEnB,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC;aACrB,IAAI,CAAC;YACJ,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACjB,CAAC,CAAC;aACD,KAAK,CAAC,UAAC,GAAG;YACT,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAGD,OAAO,CAAC,EAAE,CAAC,mBAAmB,EAAE,UAAC,GAAU;QACzC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAChB,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE;QACnB,QAAQ,CAAC,IAAI,CAAC,CAAC;IACjB,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE;QACnB,QAAQ,CAAC,IAAI,CAAC,CAAC;IACjB,CAAC,CAAC,CAAC;IAEH,WAAW,CAAC,mBAAmB,EAAE,CAAC;IAElC,oBAAoB;IACpB,kDAAkD;IAClD,IAAI,QAAQ,GAAG,EAAE,CAAC;IAClB,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,cAAc,EAAE,UAAC,SAAS;QAC9C,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,OAAO;YACjC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAC,GAAG,EAAE,OAAO;QACrC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YAC/C,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU;gBAC9B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC;kBACnD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAElE,IAAI,CAAC;gBACH,MAAM,CAAC,KAAK,CAAC,yBAAuB,UAAY,CAAC,CAAC;gBAClD,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YACpC,CAAC;YAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACX,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACjB,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAC1D,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,mBAAmB;AACrB,CAAC","sourcesContent":["#!/usr/bin/env node\r\nimport {BusybeeParsedConfig} from \"./lib/config/BusybeeParsedConfig\";\r\nrequire('source-map-support').install();\r\nimport * as _async from 'async';\r\nimport * as _ from 'lodash';\r\nimport * as Commander from 'commander';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport {ConfigParser} from  './lib/ConfigParser';\r\nimport {EnvManager} from './lib/EnvManager';\r\nimport {TestManager} from './lib/TestManager';\r\nimport {MockServer} from './lib/MockServer';\r\nimport {Logger} from './lib/Logger';\r\nlet logger;\r\n\r\n\r\nCommander\r\n  .version('0.1.0');\r\n\r\n// TODO: REMOVE protocol and host from cmdOpts...need to be per test suite\r\nCommander\r\n  .command('test')\r\n  .description('execute tests')\r\n  .option('-c, --userConfigFile <userConfigFile>', 'Config File. defaults to userConfigFile.json. parsed as being relative to --directory')\r\n  .option('-d, --directory <directory>', 'Test Directory. defaults to busybee/')\r\n  .option('-D, --debug', 'convenience flag for debug mode')\r\n  .option('-l, --localMode', 'ignores any host configuration in favor of localhost with a capacity of 100')\r\n  .option('-L, --logLevel <level>', '[DEBUG, INFO, WARN, ERROR]')\r\n  .option('-o, --onComplete <onComplete>', 'The filename of javascript module placed in your busybee/ directory. Will be called on complete. ex module) module.exports = (err, results) => { console.log(err || JSON.stringify(results)); }')\r\n  .option('-s, --skipEnvProvisioning <ids>', 'list of comma-separated TestSuite ids. Environments will not be provisioned for these TestSuites prior to running tests')\r\n  .option('-sts, --skipTestSuite <ids>', 'list of comma-separated TestSuite ids to skip')\r\n  .action((options) => {\r\n    let configParser = new ConfigParser(options);\r\n    const conf: BusybeeParsedConfig = configParser.parse('test');\r\n    logger = new Logger(conf, this);\r\n    initTests(conf);\r\n  });\r\n\r\nCommander\r\n  .command('mock')\r\n  .description('runs a mock REST API server using your tests as mocks')\r\n  .option('-c, --userConfigFile <userConfigFile>', 'Config File. defaults to userConfigFile.json. parsed as being relative to --directory')\r\n  .option('-d, --directory <directory>', 'Test Directory. defaults to busybee/')\r\n  .option('-D, --debug', 'convenience flag for debug mode')\r\n  .option('-L, --logLevel <level>', '[DEBUG, INFO, WARN, ERROR]')\r\n  .option('-np, --noProxy, Will ignore any userConfigFile.json proxy configuration and skip proxy attempts')\r\n  .option('-t, --testSuite <id>', 'Required. The ID of the REST Api TestSuite that you would like to run a mock server for')\r\n  .action((options) => {\r\n    if (!options.testSuite) {\r\n      console.log(`'--testSuite' is a required argument, exiting`);\r\n      return;\r\n    }\r\n    let configParser = new ConfigParser(options);\r\n    const conf = configParser.parse('mock');\r\n    logger = new Logger(conf, this);\r\n\r\n\r\n    // identify the TestSuite.\r\n    let testSuite = _.find(conf.parsedTestSuites, (suite) => { return suite.suiteID == options.testSuite; });\r\n    if (!testSuite) {\r\n      logger.error(`No TestSuite with the id ${options.testSuite} could be identified, exiting`);\r\n      return\r\n    }\r\n\r\n    testSuite.cmdOpts = options;\r\n    new MockServer(testSuite, conf);\r\n  });\r\n\r\n  Commander\r\n    .command('init')\r\n    .description('set up busybee folder and example userConfigFile/test')\r\n    .action(() => {\r\n      const exampleConf = require('./init/userConfigFile.json');\r\n      const exampleTest = require('./init/test.json');\r\n      const busybeeDir = path.join(process.cwd(), 'busybee');\r\n      if (!fs.existsSync(busybeeDir))\r\n        fs.mkdirSync(busybeeDir);\r\n      if (!fs.exists(path.join(busybeeDir, 'test.json'), null))\r\n        fs.writeFileSync(path.join(busybeeDir, 'test.json'), JSON.stringify(exampleTest, null, '\\t'));\r\n      if (!fs.exists(path.join(busybeeDir, 'userConfigFile.json'), null))\r\n        fs.writeFileSync(path.join(busybeeDir, 'userConfigFile.json'), JSON.stringify(exampleConf, null, '\\t'));\r\n\r\n      console.log(\"Busybee initialized!\");\r\n    });\r\n\r\nCommander.parse(process.argv);\r\n\r\n\r\nfunction initTests(conf: BusybeeParsedConfig) {\r\n  // 2. instantiate EnvManager and ApiManager. handle shutdown signals\r\n  let envManager = new EnvManager(conf);\r\n  let testManager = new TestManager(conf, envManager);\r\n\r\n  function shutdown(err) {\r\n    if (err)\r\n      console.log(err);\r\n\r\n    envManager.stopAll(null)\r\n      .then(() => {\r\n        process.exit(0)\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        process.exit(1);\r\n      });\r\n  }\r\n\r\n\r\n  process.on('uncaughtException', (err: Error) => {\r\n    shutdown(err);\r\n  });\r\n\r\n  process.on('SIGHUP', () => {\r\n    shutdown(null);\r\n  });\r\n\r\n  process.on('SIGINT', () => {\r\n    shutdown(null);\r\n  });\r\n\r\n  testManager.buildTestSuiteTasks();\r\n\r\n  // run the api tests\r\n  // TODO: allow ordering of TestSuites and TestEnvs\r\n  let envTasks = [];\r\n  _.forEach(testManager.testSuiteTasks, (suiteTask) => {\r\n    suiteTask.envTasks.forEach((envTask) => {\r\n      envTasks.push(envTask);\r\n    });\r\n  });\r\n\r\n  _async.parallel(envTasks, (err, results) => {\r\n    if (conf.onComplete || conf.cmdOpts.onComplete) {\r\n      let scriptPath = conf.onComplete ?\r\n        path.join(conf.filePaths.busybeeDir, conf.onComplete)\r\n        : path.join(conf.filePaths.busybeeDir, conf.cmdOpts.onComplete);\r\n\r\n      try {\r\n        logger.debug(`Running onComplete: ${scriptPath}`);\r\n        require(scriptPath)(err, results);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    } else {\r\n      console.log(err || JSON.stringify(results, null, '\\t'));\r\n    }\r\n  });\r\n\r\n  // run the ui tests\r\n}\r\n"]}