{"version":3,"file":"ConfigParser.js","sourceRoot":"","sources":["../../src/lib/ConfigParser.ts"],"names":[],"mappings":"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","sourcesContent":["import * as glob from 'glob';\r\nimport * as fs from 'fs';\r\nimport * as _ from 'lodash';\r\nimport * as path from 'path';\r\nimport * as uuidv1 from 'uuid/v1';\r\nimport {Logger} from './Logger';\r\n\r\nexport class ConfigParser {\r\n\r\n  private busybeeDirPath: string;\r\n  private cFilePath: string;\r\n  private cmdOpts: any;\r\n  private testSet2EnvMap: any;\r\n  private env2TestSuiteMap: any;\r\n  private logLevel: string;\r\n  private logger: Logger;\r\n\r\n  constructor(cmdOpts) {\r\n    let dir = cmdOpts.directory ? cmdOpts.directory : 'busybee';\r\n    let cFile = cmdOpts.config ? cmdOpts.config : 'config.json';\r\n    this.busybeeDirPath = path.isAbsolute(dir) ? dir : path.join(process.cwd(), dir);\r\n    this.cFilePath = path.join(this.busybeeDirPath, cFile);\r\n    this.cmdOpts = cmdOpts;\r\n    this.testSet2EnvMap = {};\r\n    this.env2TestSuiteMap = {};\r\n    this.logLevel = this.getLogLevel(cmdOpts);\r\n    this.logger = new Logger({logLevel: this.logLevel}, this);\r\n    if (cmdOpts.localMode) {\r\n      this.logger.info(`LocalMode detected. Host Configuration will be ignored in favor of 'localhost'`);\r\n    }\r\n  }\r\n\r\n  getLogLevel(cmdOpts) {\r\n    let logLevel;\r\n    if (process.env.BUSYBEE_DEBUG) {\r\n      logLevel = 'DEBUG';\r\n    } else if (process.env.BUSYBEE_LOG_LEVEL) {\r\n      if (Logger.isLogLevel(process.env.BUSYBEE_LOG_LEVEL)) {\r\n        logLevel = process.env.BUSYBEE_LOG_LEVEL;\r\n      }\r\n    } else if (cmdOpts) {\r\n      if (this.cmdOpts.debug) {\r\n        logLevel = 'DEBUG';\r\n      } else if (cmdOpts.logLevel) {\r\n        if (Logger.isLogLevel(cmdOpts.logLevel)) {\r\n          logLevel = cmdOpts.logLevel;\r\n        }\r\n      }\r\n    }\r\n\r\n    return logLevel;\r\n  }\r\n\r\n  parse(mode) {\r\n    let conf = JSON.parse(fs.readFileSync(this.cFilePath, 'utf8'));\r\n    Object.assign(conf, {\r\n      filePaths: {\r\n        config: this.cFilePath,\r\n        busybeeDir: this.busybeeDirPath\r\n      },\r\n      cmdOpts: this.cmdOpts,\r\n      logLevel: this.logLevel\r\n    });\r\n\r\n    conf = this.prepTestSuites(conf, mode);\r\n    return this.parseFiles(conf, mode);\r\n  }\r\n\r\n  prepTestSuites(conf: any, mode: string) {\r\n    /*\r\n      Goal here is to build an object that looks like\r\n      {\r\n        testEnvs: {\r\n          'default': {\r\n            id: 'default',\r\n            testSets: {\r\n              'default': {\r\n                id: 'default',\r\n                tests: []\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      And a map for easily identifying which env a testSet is a member of (for parsing mocks later)\r\n      {\r\n        \"testSetId\": \"envId\"\r\n      }\r\n    */\r\n    this.logger.debug(`prepTestSuites`);\r\n\r\n    conf.parsedTestSuites = {};\r\n    let skipTestSuites;\r\n\r\n    if (this.cmdOpts.skipTestSuite) {\r\n      skipTestSuites = this.cmdOpts.skipTestSuite.split(',');\r\n    }\r\n\r\n    conf.testSuites.forEach((testSuite) => {\r\n      let suiteID = testSuite.id || uuidv1();\r\n      if (skipTestSuites && skipTestSuites.indexOf(suiteID)) {\r\n        return;\r\n      }\r\n\r\n      conf = this.parseTestSuite(conf, testSuite, suiteID, mode);\r\n    });\r\n\r\n    return conf;\r\n  }\r\n\r\n  parseTestSuite(conf: any, testSuite, suiteID, mode) {\r\n    this.logger.debug(`parseTestSuite ${testSuite} ${suiteID}`);\r\n\r\n    // create an id for this testSuite\r\n    conf.parsedTestSuites[suiteID] = Object.assign(\r\n      testSuite,\r\n      { suiteID: suiteID },\r\n      {testEnvs: {}}\r\n    );\r\n    if (testSuite.type == 'REST') {\r\n      // assign a default env to this TestSuite incase they add tests that don't specify an Env to run in\r\n      conf.parsedTestSuites[suiteID].testEnvs['default'] = { suiteEnvID: 'default', testSets: [{ id: 'default' }]};\r\n      if (mode == 'mock') {\r\n        conf.parsedTestSuites[suiteID].envInstances.push({\r\n          id: 'default',\r\n          testSets: [\r\n            {\r\n              id: 'default'\r\n            }\r\n          ]\r\n        });\r\n      }\r\n    }\r\n\r\n\r\n    // iterate each env defined for this testSuite.\r\n    conf.parsedTestSuites[suiteID].envInstances.forEach((testEnvConf) => {\r\n      // rename the env's id to suiteEnvID for clarity later 'id' gets thrown around a lot.\r\n      testEnvConf.suiteEnvID = testEnvConf.id;\r\n      delete testEnvConf.id;\r\n      // add this env to the env2TestSuiteMap\r\n      this.logger.debug('testEnvConf');\r\n      this.logger.debug(JSON.stringify(testEnvConf));\r\n      this.env2TestSuiteMap[testEnvConf.suiteEnvID] = suiteID;\r\n\r\n      let testSetStubs = {};\r\n      if (testEnvConf.testSets) {\r\n        testEnvConf.testSets.forEach((testSetConf) => {\r\n          // testSetStubs is a placeholder object to ensure that there is a 'tests'\r\n          // array ready to accept tests during the test parsing step\r\n          if (testSetStubs[testSetConf.id]) {\r\n            this.logger.info(`Test set ${testSetConf.id} already exists. Skipping`);\r\n            return;\r\n          }\r\n\r\n          testSetStubs[testSetConf.id] = Object.assign({}, testSetConf, {tests: []});\r\n\r\n          // store env lookup for later\r\n          this.testSet2EnvMap[testSetConf.id] = testEnvConf.suiteEnvID;\r\n        });\r\n      }\r\n\r\n      conf.parsedTestSuites[suiteID].testEnvs[testEnvConf.suiteEnvID] =\r\n        Object.assign(testEnvConf, {testSets: testSetStubs});\r\n    });\r\n\r\n    return conf;\r\n  }\r\n\r\n  parseFiles(conf, mode) {\r\n    this.logger.debug(`parseFiles`);\r\n    let files = glob.sync(`${this.busybeeDirPath}/**/*.json`, {ignore:`${this.cFilePath}`});\r\n\r\n    // parse json files, compile testSets and add them to the conf.\r\n    this.logger.info(\"parsing files...\");\r\n    files.forEach((file) => {\r\n      this.logger.info(file);\r\n\r\n      let data = fs.readFileSync(file, 'utf8');\r\n      var tests = JSON.parse(data);\r\n      if (!Array.isArray(tests)) {\r\n        tests = [tests];\r\n      }\r\n\r\n      tests.forEach((test) => {\r\n        if (mode == 'test') {\r\n          if (test.mock || test.skip) { return; }\r\n        }\r\n        if (mode == 'mock') {\r\n          test.testSet = { id: 'default' }\r\n        }\r\n\r\n        if (_.isUndefined(test.testSet)) {\r\n          this.logger.info(`test '${test.name}' does not contain required prop 'testSet'. Skipping`);\r\n\r\n          return;\r\n        }\r\n\r\n        // suport multiple testSets\r\n        if (!Array.isArray(test.testSet)) {\r\n          test.testSet = [test.testSet];\r\n        }\r\n\r\n        // iterate each testSet entry for this test (1 test can run in multiple testSets)\r\n        test.testSet.forEach((testSetInfo) => {\r\n          // lookup the env that this TestSet is a member of\r\n          this.logger.debug(JSON.stringify(this.testSet2EnvMap));\r\n          this.logger.debug(JSON.stringify(this.env2TestSuiteMap));\r\n\r\n          if (_.isUndefined(this.testSet2EnvMap[testSetInfo.id])) {\r\n            this.logger.warn(`Unable to identify the Test Environment containing the testSetId '${testSetInfo.id}'.`);\r\n            return;\r\n          }\r\n\r\n          let testEnvId = this.testSet2EnvMap[testSetInfo.id];\r\n\r\n          // lookup the suite that this env is a member of\r\n          if (_.isUndefined(this.env2TestSuiteMap[testEnvId])) {\r\n            this.logger.warn(`Unable to identify the Test Suite containing the envId ${testEnvId}.`);\r\n            return;\r\n          }\r\n\r\n          let suiteID = this.env2TestSuiteMap[testEnvId];\r\n          this.logger.debug(`suiteID: ${suiteID}`);\r\n\r\n          if (_.isUndefined(testSetInfo.index)) {\r\n            // push it on the end\r\n            conf.parsedTestSuites[suiteID].testEnvs[testEnvId].testSets[testSetInfo.id].tests.push(test);\r\n            //conf.restApi.testEnvs[testEnvId].testSets[testSetInfo.id].tests.push(test);\r\n          } else {\r\n            // insert it at the proper index, fill any empty spots along the way\r\n            Array(testSetInfo.index + 1).fill(null).forEach((d,i) => {\r\n              if (i == testSetInfo.index) {\r\n                conf.parsedTestSuites[suiteID].testEnvs[testEnvId].testSets[testSetInfo.id].tests[i] = test;\r\n              } else {\r\n                if (!conf.parsedTestSuites[suiteID].testEnvs[testEnvId].testSets[testSetInfo.id].tests[i]) {\r\n                  conf.parsedTestSuites[suiteID].testEnvs[testEnvId].testSets[testSetInfo.id].tests[i] = {};\r\n                }\r\n              }\r\n            });\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    return conf;\r\n  }\r\n\r\n}\r\n"]}