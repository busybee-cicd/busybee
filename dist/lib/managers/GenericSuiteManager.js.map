{"version":3,"file":"GenericSuiteManager.js","sourceRoot":"","sources":["../../../src/lib/managers/GenericSuiteManager.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport * as path from 'path';\nimport {Logger} from '../Logger';\nimport {EnvManager} from \"./EnvManager\";\n\nexport class GenericSuiteManager {\n\n  private conf: any;\n  private suiteEnvConf: any;\n  private envManager: EnvManager;\n  private logger: Logger;\n\n  constructor(conf: any, suiteEnvConf: any, envManager: EnvManager) {\n    this.conf = conf;\n    this.suiteEnvConf = suiteEnvConf;\n    this.envManager = envManager;\n    this.logger = new Logger(conf, this);\n  }\n\n  buildUrl(port) {\n    this.logger.debug(`buildUrl ${port}`);\n    let protocol = this.suiteEnvConf.protocol;\n    let hostName = this.suiteEnvConf.hostName;\n\n    let url = `${protocol}://${hostName}`;\n    if (port) {\n      url += `:${port}`;\n    }\n\n    return url;\n  }\n\n  runTestSets(generatedEnvID) {\n    // TODO: logic for running TestSets in order\n    return new Promise(async (resolve, reject) => {\n      this.logger.debug(`runTestSets ${this.suiteEnvConf.suiteID} ${this.suiteEnvConf.suiteEnvID}`);\n      let testSetPromises = _.map(this.suiteEnvConf.testSets, (testSet, id) => {\n        return this.runTestSet(testSet, generatedEnvID);\n      });\n\n      let testSetResults;\n      let testSetErr;\n      try {\n        testSetResults = await Promise.all(testSetPromises);\n      } catch (e) {\n        testSetErr = e;\n      }\n\n      if (testSetErr) {\n        this.logger.debug(`runTestSets ERROR encountered while running testSetPromises`);\n        reject(testSetErr);\n      } else {\n        resolve(testSetResults);\n      }\n    });\n\n  }\n\n  async runTestSet(testSet, generatedEnvID) {\n      this.logger.debug(`runTestSet ${this.suiteEnvConf.suiteID} ${this.suiteEnvConf.suiteEnvID} ${testSet.id}`);\n      // run the script via envManager\n      let busybeeDir = this.conf.filePaths.busybeeDir;\n      let scriptPath = path.join(busybeeDir, this.suiteEnvConf.runScript);\n\n      let args = {\n        generatedEnvID: generatedEnvID,\n        protocol: this.suiteEnvConf.protocol,\n        hostName: this.suiteEnvConf.hostName,\n        ports: this.suiteEnvConf.ports,\n        busybeeDir: busybeeDir,\n        data: testSet.data\n      };\n\n      return this.envManager.runScript(scriptPath, [JSON.stringify(args)]);\n  }\n\n}\n"]}