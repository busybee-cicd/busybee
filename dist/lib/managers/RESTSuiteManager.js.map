{"version":3,"file":"RESTSuiteManager.js","sourceRoot":"","sources":["../../../src/lib/managers/RESTSuiteManager.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _async from 'async';\nimport * as _ from 'lodash';\nimport {Logger} from '../Logger';\nimport {RESTClient} from '../RESTClient';\nimport {SuiteEnvInfo} from \"../models/SuiteEnvInfo\";\n\nexport class RESTSuiteManager {\n\n  private conf: any;\n  private logger: Logger;\n  private restClient: any;\n\n  constructor(conf, suiteEnvConf) {\n    this.conf = conf;\n    this.logger = new Logger(conf, this);\n    this.restClient = new RESTClient(conf, suiteEnvConf);\n  }\n\n  ///////// TestRunning\n\n\n  runRESTApiTestSets(currentEnv: SuiteEnvInfo) {\n    // TODO: logic for running TestSets in order\n    return new Promise(async (resolve, reject) => {\n      this.logger.debug(`runRESTApiTestSets ${currentEnv.suiteID} ${currentEnv.suiteEnvID}`);\n      let testSetPromises = _.map(currentEnv.testSets.values(), (testSet) => {\n        return this.runRESTApiTestSet(currentEnv, testSet);\n      });\n\n      let testSetResults;\n      let testSetErr;\n      try {\n        testSetResults = await Promise.all(testSetPromises);\n      } catch (e) {\n        testSetErr = e;\n      }\n\n      if (testSetErr) {\n        this.logger.debug(`runRESTApiTestSets ERROR encountered while running testSetPromises`);\n        reject(testSetErr);\n      } else {\n        resolve(testSetResults);\n      }\n    });\n\n  }\n\n  async runRESTApiTestSet(currentEnv, testSet) {\n    this.logger.debug(`runRESTApiTestSet ${currentEnv.ports} ${testSet.id}`);\n\n    return new Promise((resolve, reject) => {\n      // build api test functions\n      if (!testSet.tests) {\n        reject(`testSet ${testSet.id} has no tests`);\n      }\n\n      let testFns = this.buildTestTasks(testSet, currentEnv);\n\n      // run api test functions\n      this.logger.info(`Running Test Set: ${testSet.id}`);\n      if (testSet.description) {\n        this.logger.info(`${testSet.description}`);\n      }\n\n      let flow = this.conf.controlFlow || 'parallel';\n      _async[flow](testFns, (err2, testResults) => {\n        // pass test results\n        let testSetResults = {\n          name: testSet.id,\n          results: testResults\n        };\n\n        if (err2) {\n          this.logger.debug('runRESTApiTestSet ERROR while running tests');\n          this.logger.debug(err2);\n          reject(err2);\n        } else {\n          resolve(testSetResults);\n        }\n      });\n    });\n  }\n\n  buildTestTasks(testSet, currentEnv) {\n    this.logger.debug(`RESTSuiteManager:buildTestTasks <testSet> ${currentEnv.ports}`);\n    this.logger.debug(testSet);\n    return testSet.tests.map((test, i) => {\n\n      return (cb) => {\n        if (!test.request) {\n          this.logger.info(`testSet ${testSet.id}:${test.name} contains no request information. Probably a placeholder due to indexing.`);\n          return cb(null);\n        }\n        if (test.skip || test.mock) {\n          return cb(null);\n        }\n\n        // build request\n        let port = currentEnv.ports[0]; // the REST api port should be passed first in the userConfigFile.\n        let opts = this.restClient.buildRequest(test.request, port);\n        this.logger.debug(opts);\n\n        // figure out if this test is running at a specific index. (just nice for consoling)\n        let testIndex;\n        if (_.isUndefined(test.testSet)) {\n          testIndex = '#';\n        } else {\n          // we have more than one testSet configuration for this test. find the one\n          // matching the current testSet\n          let testSetConf = test.testSet;\n          if (Array.isArray(testSetConf)) {\n            testSetConf = _.find(testSetConf, (c) => {\n              return c.id == testSet.id;\n            });\n          }\n\n          if (_.isUndefined(testSetConf.index)) {\n            testIndex = '#';\n          } else {\n            testIndex = testSetConf.index;\n          };\n\n        }\n        this.logger.info(`${testSet.id}: ${testIndex}: ${test.name}`)\n\n        this.restClient.makeRequest(opts, (err, res, body) => {\n          if (err) { return cb(err); }\n\n          // validate results\n          let testResult = <any>{name: test.name, index: test.testIndex};\n          if (test.expect.headers) {\n            testResult.headers = {};\n          }\n\n          if (test.expect.status) {\n            testResult.status = res.statusCode == test.expect.status\n              ? true\n              : `Expected ${test.expect.status} was ${res.statusCode}`\n          }\n\n          if (test.expect.body) {\n            testResult.body = _.isEqual(body, test.expect.body)\n              ? true\n              : `Expected ${JSON.stringify(test.expect.body)} was ${JSON.stringify(body)}`\n          }\n\n          if (test.expect.headers) {\n            _.forEach(test.expect.headers, (v, headerName) => {\n              if (res.headers[headerName] != v) {\n                testResult.headers[headerName] = `Expected ${v} was ${res.headers[headerName]}`;\n              } else {\n                testResult.headers[headerName] = true;\n              }\n            });\n          }\n\n          cb(null, testResult);\n        });\n      };\n    });\n  }\n}\n"]}