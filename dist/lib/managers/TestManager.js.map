{"version":3,"file":"TestManager.js","sourceRoot":"","sources":["../../../src/lib/managers/TestManager.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport {Logger} from \"../Logger\";\nimport {RESTSuiteManager} from './RESTSuiteManager';\nimport {GenericSuiteManager} from './GenericSuiteManager';\nimport {EnvManager} from \"./EnvManager\";\nimport {BusybeeParsedConfig} from \"../config/BusybeeParsedConfig\";\nimport {SuiteEnvInfo} from \"../models/SuiteEnvInfo\";\n\nexport class TestManager {\n\n  testSuiteTasks: any;\n  private conf: any;\n  private logger: Logger;\n  private envManager: EnvManager;\n\n  constructor(conf: BusybeeParsedConfig, envManager: EnvManager) {\n    this.conf = conf;\n    this.logger = new Logger(conf, this);\n    this.envManager = envManager;\n    this.testSuiteTasks = {};\n  }\n\n  buildTestSuiteTasks() {\n    this.logger.debug('buildTestSuiteTasks');\n    let conf = this.conf;\n    conf.parsedTestSuites.forEach((testSuite, suiteID) => {\n      if (testSuite.skip) { return; }\n      // parse the envs of this TestSuite\n      this.testSuiteTasks[suiteID] = { envTasks: [] };\n      //conf.parsedTestSuites[suiteID].envTasks = [];\n      this.logger.debug(suiteID);\n      this.logger.debug(testSuite);\n      testSuite.testEnvs.forEach((testEnv, suiteEnvID) => {\n        this.logger.debug(testEnv, true);\n        if (testSuite.type === \"REST\") {\n          // 1. make sure testSets exist for this testEnv\n          if (_.isEmpty(testEnv.testSets)) {\n            this.logger.debug(`testEnv ${testEnv.suiteEnvID} contains 0 testSets. skipping`);\n            return;\n          }\n          // 2. confirm the testSet contains tests\n          let hasTests = false;\n          testEnv.testSets.forEach((testSet) => {\n            if (testSet.tests && testSet.tests.length > 0) {\n              hasTests = true;\n              return false;\n            }\n          });\n          if (!hasTests) {\n            this.logger.debug(`testEnv ${testEnv.suiteEnvID} contains 0 tests. skipping`);\n            return;\n          }\n\n          this.testSuiteTasks[suiteID].envTasks.push(this.buildRESTTestEnvTask(this.envManager, suiteID, testEnv.suiteEnvID));\n        } else {\n          this.testSuiteTasks[suiteID].envTasks.push(this.buildTestEnvTask(this.envManager, suiteID, testEnv.suiteEnvID));\n        }\n      });\n    });\n  }\n\n  buildRESTTestEnvTask(envManager, suiteID, suiteEnvID) {\n    this.logger.debug(`buildRESTTestEnvTask ${suiteID} ${suiteEnvID}`);\n\n    let generatedEnvID = envManager.generateId();\n    return (cb) => {\n      let buildEnvFn = async () => {\n        generatedEnvID = await envManager.start(generatedEnvID, suiteID, suiteEnvID);\n        let currentEnv: SuiteEnvInfo = envManager.getCurrentEnv(generatedEnvID);\n        // create a restmanager to handle these tests\n        let restManager = new RESTSuiteManager(this.conf, currentEnv);\n        let testSetResults = await restManager.runRESTApiTestSets(currentEnv);\n\n        return testSetResults;\n      }\n\n      buildEnvFn()\n        .then((testSetResults) => {\n          envManager.stop(generatedEnvID)\n            .then(() => { cb(null, testSetResults); })\n            .catch((err) => { cb(err); });\n        })\n        .catch((err) => {\n          console.trace();\n          this.logger.error(\"buildRESTTestEnvTask: ERROR CAUGHT WHILE RUNNING TEST SETS\");\n          this.logger.error(err);\n          envManager.stop(generatedEnvID)\n            .then(() => { cb(err); })\n            .catch((err2) => cb(err2));\n        });\n    };\n  }\n\n  /*\n    TODO: use the GenericSuiteManager to kick off tests\n  */\n  buildTestEnvTask(envManager, suiteID, suiteEnvID) {\n    this.logger.debug(`buildTestEnvTask ${suiteID} ${suiteEnvID}`);\n\n    let generatedEnvID = envManager.generateId();\n    return (cb) => {\n      let buildEnvFn = async () => {\n        generatedEnvID = await envManager.start(generatedEnvID, suiteID, suiteEnvID);\n        let currentEnv = envManager.getCurrentEnv(generatedEnvID);\n        // create a restmanager to handle these tests\n        let suiteManager = new GenericSuiteManager(this.conf, currentEnv, envManager);\n        let testSetResults = await suiteManager.runTestSets(generatedEnvID);\n\n        return testSetResults;\n      }\n\n      buildEnvFn()\n        .then((testSetResults) => {\n          this.logger.debug(\"TEST SET SUCCESS\");\n          envManager.stop(generatedEnvID)\n            .then(() => { cb(null, testSetResults); })\n            .catch((err) => { cb(err); });\n        })\n        .catch((err) => {\n          this.logger.debug(\"buildTestEnvTask: ERROR CAUGHT WHILE RUNNING TEST SETS\");\n          this.logger.debug(err);\n          envManager.stop(generatedEnvID)\n            .then(() => { cb(err); })\n            .catch((err2) => cb(err2));\n        });\n    };\n  }\n}\n"]}