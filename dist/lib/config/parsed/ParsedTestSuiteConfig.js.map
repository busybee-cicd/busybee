{"version":3,"file":"ParsedTestSuiteConfig.js","sourceRoot":"","sources":["../../../../src/lib/config/parsed/ParsedTestSuiteConfig.ts"],"names":[],"mappings":"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","sourcesContent":["import {MockServerConfig} from \"../common/MockServerConfig\";\r\nimport {RequestOptsConfig} from \"../common/RequestOptsConfig\";\r\nimport {EnvConfig} from \"../common/EnvConfig\";\r\nimport {ParsedTestEnvConfig} from \"./ParsedTestEnvConfig\";\r\nimport {TypedMap} from \"../../TypedMap\";\r\nimport {TestSuiteConfig} from \"../user/TestSuiteConfig\";\r\nimport {ParsedTestSetConfig} from \"./ParsedTestSetConfig\";\r\nimport {EnvInstanceConfig} from \"../user/EnvInstanceConfig\";\r\nimport {TestSetConfig} from \"../user/TestSetConfig\";\r\nimport {Logger} from \"../../Logger\";\r\n\r\nexport class ParsedTestSuite {\r\n  suiteID: string;\r\n  type: string;\r\n  skip: boolean;\r\n  protocol: string;\r\n  host: string;\r\n  ports: number[];\r\n  defaultRequestOpts: RequestOptsConfig;\r\n  mockServer: MockServerConfig;\r\n  env: EnvConfig;\r\n  testEnvs: TypedMap<ParsedTestEnvConfig>;\r\n  root: string;\r\n  private logger: Logger;\r\n\r\n  constructor(suite: TestSuiteConfig, mode: string, testSet2EnvMap: TypedMap<string>, env2TestSuiteMap: TypedMap<string>) {\r\n    this.logger = new Logger({logLevel: process.env.BUSYBEE_LOG_LEVEL}, this);\r\n    this.defaultRequestOpts = suite.defaultRequestOpts;\r\n    this.env = suite.env;\r\n    this.mockServer = suite.mockServer;\r\n    this.ports = suite.ports;\r\n    this.protocol = suite.protocol;\r\n    this.host = suite.host;\r\n    this.suiteID = suite.id;\r\n    this.skip = suite.skip;\r\n    this.type = suite.type;\r\n    this.root = suite.root;\r\n\r\n    this.testEnvs = new TypedMap<ParsedTestEnvConfig>();\r\n    this.parseSuite(suite, mode, testSet2EnvMap, env2TestSuiteMap);\r\n  }\r\n\r\n  parseSuite(testSuite: TestSuiteConfig, mode: string, testSet2EnvMap: TypedMap<string>, env2TestSuiteMap: TypedMap<string>) {\r\n    // assign a default env to this TestSuite incase they add tests that don't specify an Env to run in\r\n    let defaultParsedTestEnv = new ParsedTestEnvConfig();\r\n    let defaultParsedTestSet = new ParsedTestSetConfig();\r\n    defaultParsedTestSet.id = 'default';\r\n    defaultParsedTestEnv.testSets.set('default', defaultParsedTestSet);\r\n\r\n    let defaultEnvInstance = new EnvInstanceConfig();\r\n    defaultEnvInstance.testSets = [];\r\n    defaultEnvInstance.id = 'default';\r\n    let defaultTestSet = new TestSetConfig();\r\n    defaultTestSet.id = 'default';\r\n    defaultEnvInstance.testSets.push(defaultTestSet);\r\n    if (!testSuite.envInstances) {\r\n      testSuite.envInstances = [];\r\n    }\r\n    testSuite.envInstances.push(defaultEnvInstance);\r\n    this.testEnvs.set('default', defaultParsedTestEnv);\r\n\r\n    // iterate each user userConfigFile env defined for this testSuite.\r\n    testSuite.envInstances.forEach((testEnvConf: EnvInstanceConfig) => {\r\n      // rename the env's id to suiteEnvID for clarity later 'id' gets thrown around a lot.\r\n      // testEnvConf.suiteEnvID = testEnvConf.id;\r\n      // delete testEnvConf.id;\r\n      // add this env to the env2TestSuiteMap\r\n      this.logger.debug('testEnvConf');\r\n      this.logger.debug(JSON.stringify(testEnvConf));\r\n\r\n      let parsedTestEnvConfig = new ParsedTestEnvConfig();\r\n      parsedTestEnvConfig.suiteEnvID = testEnvConf.id;\r\n      env2TestSuiteMap.set(parsedTestEnvConfig.suiteEnvID, this.suiteID);\r\n\r\n      if (testEnvConf.testSets) {\r\n        testEnvConf.testSets.forEach((testSetConf) => {\r\n          let parsedTestSetConfig = new ParsedTestSetConfig();\r\n          // testSetStubs is a placeholder object to ensure that there is a 'tests'\r\n          // array ready to accept tests during the test parsing step\r\n          if (parsedTestEnvConfig.testSets.get(testSetConf.id)) {\r\n            this.logger.info(`Test set ${testSetConf.id} already exists. Skipping`);\r\n            return;\r\n          }\r\n\r\n          parsedTestSetConfig.id = testSetConf.id;\r\n          parsedTestEnvConfig.testSets.set(testSetConf.id, parsedTestSetConfig);\r\n\r\n          // store env lookup for later\r\n          testSet2EnvMap.set(parsedTestSetConfig.id, parsedTestEnvConfig.suiteEnvID);\r\n        });\r\n      }\r\n\r\n      this.testEnvs.set(parsedTestEnvConfig.suiteEnvID, parsedTestEnvConfig);\r\n    });\r\n\r\n    this.logger.debug(('done parsing suite'));\r\n  }\r\n\r\n}\r\n"]}